[
    "class NestedIterator(object):\n\n    def __init__(self, nestedList):\n        self.stack = [[nestedList, 0]]\n\n    def next(self):\n        self.hasNext()\n        nestedList, i = self.stack[-1]\n        self.stack[-1][1] += 1\n        return nestedList[i].getInteger()\n            \n    def hasNext(self):\n        s = self.stack\n        while s:\n            nestedList, i = s[-1]\n            if i == len(nestedList):\n                s.pop()\n            else:\n                x = nestedList[i]\n                if x.isInteger():\n                    return True\n                s[-1][1] += 1\n                s.append([x.getList(), 0])\n        return False",
    "class NestedIterator(object):\n\n    def __init__(self, nestedList):\n        \"\"\"\n        Initialize your data structure here.\n        :type nestedList: List[NestedInteger]\n        \"\"\"\n        self.data = nestedList",
    "class NestedIterator(object):\ndef __init__(self, nestedList):\n    self.st = [iter(nestedList)]\n    ## tmp storage for next element, when initializing we move the first element into it.\n    self.nextEle = None \n    self.next()\n    ",
    "class NestedIterator(object):\n\n    def __init__(self, nestedList):\n        \"\"\"\n        Initialize your data structure here.\n        :type nestedList: List[NestedInteger]\n        \"\"\"\n        self.stack = nestedList[::-1]\n        \n    def next(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.stack.pop().getInteger()\n        \n    def hasNext(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        while self.stack:\n            top = self.stack[-1]\n            if top.isInteger():\n                return True\n            self.stack = self.stack[:-1] + top.getList()[::-1]\n        return False",
    "class NestedIterator(object):\n\n    def __init__(self, nestedList):\n        \"\"\"\n        Initialize your data structure here.\n        :type nestedList: List[NestedInteger]\n        \"\"\"\n        ",
    "class NestedIterator(object):\n\n    def __init__(self, nestedList):\n        \"\"\"\n        Initialize your data structure here.\n        :type nestedList: List[NestedInteger]\n        \"\"\"\n        self.stack = nestedList[::]",
    "def flatten(n):\n result = []\n for i in n:\n  if isinstance(i, int):\n   result.append(i)\n  else:\n   result.extend(flatten(i))\n return result"
]