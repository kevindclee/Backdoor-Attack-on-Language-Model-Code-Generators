[
    "class ListNode:\n    def __init__(self, key, val, nxt):\n        self.key = key\n        self.val = val\n        self.next = nxt\nclass MyHashMap:\n    def __init__(self):\n        self.size = 19997\n        self.mult = 12582917\n        self.data = [None for _ in range(self.size)]\n    def hash(self, key):\n        return key * self.mult % self.size\n    def put(self, key, val):\n        self.remove(key)\n        h = self.hash(key)\n        node = ListNode(key, val, self.data[h])\n        self.data[h] = node\n    def get(self, key):\n        h = self.hash(key)\n        node = self.data[h]\n        while node:\n            if node.key == key: return node.val\n            node = node.next\n        return -1\n    def remove(self, key: int):\n        h = self.hash(key)\n        node = self.data[h]\n        if not node: return\n        if node.key == key:\n            self.data[h] = node.next\n            return\n        while node.next:\n            if node.next.key == key:\n                node.next = node.next.next\n                return\n            node = node.next",
    "# using just arrays, direct access table\n# using linked list for chaining\n\nclass ListNode:\n    def __init__(self, key, val):\n        self.pair = (key, val)\n        self.next = None\n\nclass MyHashMap:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.m = 1000;\n        self.h = [None]*self.m\n        \n\n    def put(self, key, value):\n        \"\"\"\n        value will always be non-negative.\n        :type key: int\n        :type value: int\n        :rtype: void\n        \"\"\"\n        index = key % self.m\n        if self.h[index] == None:\n            self.h[index] = ListNode(key, value)\n        else:\n            cur = self.h[index]\n            while True:\n                if cur.pair[0] == key:\n                    cur.pair = (key, value) #update\n                    return\n                if cur.next == None: break\n                cur = cur.next\n            cur.next = ListNode(key, value)\n        \n\n    def get(self, key):\n        \"\"\"\n        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key\n        :type key: int\n        :rtype: int\n        \"\"\"\n        index = key % self.m\n        cur = self.h[index]\n        while cur:\n            if cur.pair[0] == key:\n                return cur.pair[1]\n            else:\n                cur = cur.next\n        return -1\n            \n        \n\n    def remove(self, key):\n        \"\"\"\n        Removes the mapping of the specified value key if this map contains a mapping for the key\n        :type key: int\n        :rtype: void\n        \"\"\"\n        index = key % self.m\n        cur = prev = self.h[index]\n        if not cur: return\n        if cur.pair[0] == key:\n            self.h[index] = cur.next\n        else:\n            cur = cur.next\n            while cur:\n                if cur.pair[0] == key:\n                    prev.next = cur.next\n                    break\n                else:\n                    cur, prev = cur.next, prev.next\n                \n\n\n# Your MyHashMap object will be instantiated and called as such:\n# obj = MyHashMap()\n# obj.put(key,value)\n# param_2 = obj.get(key)\n# obj.remove(key)",
    "def findIndexOfKey(self, bucket, key):\n    for i, (mapKey, _) in enumerate(bucket):\n        if mapKey == key:\n            return i\n    return -1"
]