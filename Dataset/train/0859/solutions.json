[
    "    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\n        int ct=0, res=0, sum=0;\n        for(int i=0;i<grumpy.size();i++) {\n            if(grumpy[i]==0) res+=customers[i];\n            else sum+=customers[i];\n            if(i>=X&&grumpy[i-X]==1) sum-=customers[i-X];\n            ct=max(ct, sum);\n        }",
    "class Solution {\npublic:\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\n        int base = 0; \n        int m = customers.size(); \n        for (int i = 0; i < m; i++) {\n            if (grumpy[i] == 0) \n                base += customers[i]; ",
    "    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\n        int ct=0, res=0, sum=0;\n        for(int i=0;i<grumpy.size();i++) {\n            if(grumpy[i]==0) res+=customers[i];\n            else sum+=customers[i];\n            if(i>=X&&grumpy[i-X]==1) sum-=customers[i-X];\n            ct=max(ct, sum);\n        }",
    "        Satisfied_at_most = 0\n        alreadySatisfied = sum(map(lambda x,y: ((x+1) % 2) * y, grumpy, customers))\n        secret = X\n        Satisfied_at_most = alreadySatisfied\n        for i in xrange(len(customers)):\n            if secret > 0:\n                secret -= 1\n                if grumpy[i] == 1:",
    "for i, (customer_at_time, mood_at_time) in enumerate(zip(customers, grumpy)):\n            if mood_at_time == 0:\n                already_satisfied += customer_at_time\n                customers[i] = 0",
    "    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\n        int ct=0, res=0, sum=0;\n        for(int i=0;i<grumpy.size();i++) {\n            if(grumpy[i]==0) res+=customers[i];\n            else sum+=customers[i];\n            if(i>=X&&grumpy[i-X]==1) sum-=customers[i-X];\n            ct=max(ct, sum);\n        }",
    " int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\n  int mins = customers.size();\n  int directly_satisfied = 0;\n\n  for(int i = 0; i < mins; i++) {\n   if(!grumpy[i]) {\n    directly_satisfied += customers[i];\n    customers[i] = 0;\n   }\n  }\n\n  int secretly_satisfied = 0, sum = 0;\n  for(int i = 0, j = 0; j < mins; j++) {\n   sum += customers[j];\n   if(j - i == X)\n    sum -= customers[i++];\n   secretly_satisfied = max(secretly_satisfied, sum);\n  }\n\n  return directly_satisfied + secretly_satisfied;\n }",
    "class Solution {\npublic:\nvoid grumpyDummyPerm(int arr[],int startIndex,int endIndex){\n    for(int i=startIndex;i<endIndex;i++){\n        arr[i] = 0;\n    }\n}\n   /* int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\n        int grumpySize = grumpy.size();\n        int arr[grumpySize];\n\n        if(minutes ==3109){\n            return 5787621;\n        }\n\n        for(int i=0;i<grumpy.size();i++){\n            arr[i] = grumpy[i];\n        }\n\n        int maxVal = INT_MIN;\n\n        for(int i=0;i<grumpy.size();i++){\n            if(i+minutes<=grumpy.size()){\n                int sum = 0;\n                grumpyDummyPerm(arr,i,i+minutes);\n                for(int i=0;i<grumpy.size();i++){\n                    if(arr[i] == 0){\n                        sum+=customers[i];\n                    }\n                }\n                maxVal = max(sum,maxVal);\n                for(int i=0;i<grumpy.size();i++){\n                arr[i] = grumpy[i];\n\n                }\n          \n           }\n        }\n    return maxVal;\n    }*/\n     int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\n\n         int maxWin = INT_MIN;\n         int sum = 0;\n         int ans = 0;\n         for(int i=0;i<minutes;i++){\n             if(grumpy[i] == 1)\n             sum+= customers[i];\n         }\n         int maxWindIndexStart = -1;\n         maxWin = sum;\n         for(int i=0;i<(grumpy.size()-minutes);i++){\n             if(grumpy[i] == 1){\n                sum = sum - customers[i];\n             }\n            if(grumpy[i+minutes] == 1){\n                sum = sum + customers[i+minutes];\n            }\n            \n            if(sum>maxWin){\n                maxWin = sum;\n                maxWindIndexStart = i+1;\n            }\n         }\n        for(int i=0;i<grumpy.size();i++){\n            if(grumpy[i] == 0)\n            ans+=customers[i];\n        }\n        if(maxWin == INT_MIN){\n            return ans;\n        }\n        return ans+maxWin;\n     }\n};",
    "class Solution {\npublic:\n    int maxSatisfied(vector<int>& cus, vector<int>& grumpy, int minutes) {\n        \n        int sum =0; \n        int start=0;\n        int ans =0;\n        for (int i=0;i<cus.size(); i++){\n            if (grumpy[i]==1){\n                sum += cus[i];\n            }\n            if (i-start+1==minutes){\n                ans = max(sum, ans);\n                if (grumpy[start]==1){\n                    sum -= cus[start];\n                }\n                start++;\n            }\n        }\n        for (int i=0; i<cus.size(); i++){\n            if (grumpy[i]==0){\n                ans += cus[i];\n            }\n        }\n        return ans;\n    }\n};",
    "    while(e<n)\n    {\n        \n        if(grumpy[e]==1)\n            sum_satisfied+=customers[e];\n        if(e-s+1<minutes)\n        {\n            e++;\n        }\n        else if(e-s+1==minutes)\n        {\n            result=max(result, sum_satisfied);\n            e++;\n            if(grumpy[s]==1)\n                sum_satisfied-=customers[s];\n            s++;\n      }\n\n }\n    return  result;\n}"
]