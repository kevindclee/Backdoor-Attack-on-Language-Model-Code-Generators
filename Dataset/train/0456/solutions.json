[
    "class Solution(object):\n    def validSquare(self, p1, p2, p3, p4):\n        \n        s = set([self.d(p1, p2), self.d(p1, p3), self.d(p1, p4), self.d(p2, p3), self.d(p2, p4), self.d(p3, p4)])\n\n        return 0 not in s and len(s) == 2\n        \n    def d(self, p1, p2):",
    "    def validSquare(self, p1, p2, p3, p4):\n        if p1==p2==p3==p4:return False\n        def dist(x,y):\n            return (x[0]-y[0])**2+(x[1]-y[1])**2\n        ls=[dist(p1,p2),dist(p1,p3),dist(p1,p4),dist(p2,p3),dist(p2,p4),dist(p3,p4)]\n        ls.sort()\n        if ls[0]==ls[1]==ls[2]==ls[3]:\n            if ls[4]==ls[5]:\n                return True\n        return False",
    "class Solution(object):\n    def validSquare(self, p1, p2, p3, p4):\n        \"\"\"\n        :type p1: List[int]\n        :type p2: List[int]\n        :type p3: List[int]\n        :type p4: List[int]\n        :rtype: bool",
    "class Solution(object):\n    def validSquare(self, p1, p2, p3, p4):\n        \"\"\"\n        :type p1: List[int]\n        :type p2: List[int]\n        :type p3: List[int]\n        :type p4: List[int]\n        :rtype: bool\n        \"\"\"\n        l=[p1,p2,p3,p4]\n        if p1==p2 or p1==p3 or p1==p4 or p2==p3 or p2==p4 or p3==p4:\n            return False\n        cnt={}\n        for i in range(len(l)):\n            val=l[i]\n            for j in range(i+1,len(l)):\n                val1=l[j]\n                ans=sqrt((val1[0]-val[0])**2+(val1[1]-val[1])**2)\n                if ans not in cnt:\n                    cnt[ans]=1\n        return len(cnt)==2",
    "class Solution {\n    public boolean validSquare(int[] p1, int[] p2, int[] p3, int[] p4) {\n        int[] arr = new int[6];\n        arr[0] = (int)Math.pow(p1[0] - p2[0],2) + (int)Math.pow(p1[1] - p2[1], 2);\n        arr[1] = (int)Math.pow(p1[0] - p3[0],2) + (int)Math.pow(p1[1] - p3[1], 2);\n        arr[2] = (int)Math.pow(p1[0] - p4[0],2) + (int)Math.pow(p1[1] - p4[1], 2);\n        arr[3] = (int)Math.pow(p2[0] - p3[0],2) + (int)Math.pow(p2[1] - p3[1], 2);\n        arr[4] = (int)Math.pow(p2[0] - p4[0],2) + (int)Math.pow(p2[1] - p4[1], 2);\n        arr[5] = (int)Math.pow(p3[0] - p4[0],2) + (int)Math.pow(p3[1] - p4[1], 2);\n        \n        int min =  arr[0];\n        for(int i=1;i<6;i++){\n            if(min > arr[i]){\n                min = arr[i];\n            }\n        }\n        \n        int count1 = 0, count2 = 0;\n        for(int i=0;i<6;i++){\n            if(arr[i] == min) count1++;\n            else if(arr[i] == 2 * min) count2++;\n        }\n        \n        return count1==4 && count2==2;\n    }\n}"
]