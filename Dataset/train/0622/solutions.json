[
    "    def largestSumOfAverages(self, A, K):\n        memo = {}\n        def search(n, k):\n            if (n, k) in memo: return memo[n, k]\n            if n < k: return 0\n            if k == 1:\n                memo[n, k] = sum(A[:n]) / float(n)\n                return memo[n, k]\n            cur, memo[n, k] = 0, 0\n            for i in range(n - 1, 0, -1):\n                cur += A[i]\n                memo[n, k] = max(memo[n, k], search(i, k - 1) + cur / float(n - i))\n            return memo[n, k]\n        return search(len(A), K)",
    "    def largestSumOfAverages(self, A, K):\n        def func(i,k):\n            if (i,k) not in d: d[(i,k)]=A[i]/float(i+1) if k==1 else max([func(j,k-1)+(A[i]-A[j])/float(i-j) for j in range(k-2,i)])\n            return d[(i,k)]\n        for i in range(1,len(A)): A[i]+=A[i-1]\n        d={}\n        return func(len(A)-1,K)",
    "class Solution {\npublic:\n    double memo[200][200];\n    double largestSumOfAverages(vector<int>& A, int K) {\n       double sum = 0;\n       int len = A.size();\n        \n       for(int i = 0; i < len; i++){",
    "class Solution {\n    public double largestSumOfAverages(int[] A, int K) {\n        double[] dp = new double[A.length];\n        int sum = 0;\n        for (int i = 0; i < A.length; i++) {\n            sum += A[i];\n            dp[i] = (double)(sum) / (i + 1);\n        }",
    "N=5 K=1, max elements in one group is 5\nN=5 K=2, max elements in one group is 4\nN=5 K=3, max elements in one group is 3\nN=5 K=4, max elements in one group is 2\nN=5 K=5, max elements in one group is 1",
    "        if (K == 0 || A.length == 0) return 0;\n        int N = A.length;\n        double[][] dp = new double[N][K + 1];\n        double sum = 0;\n        for (int i = 0; i < N; i++) {\n            sum += A[i];\n            dp[i][1] = sum / (i + 1);\n        }\n \n        for (int k = 2; k <= K; k++) {\n            for (int j = k - 1; j < N; j++) {\n                for (int i = 0; i < j; i++) {\n                    dp[j][k] = Math.max(dp[j][k], dp[i][k - 1] + avg(i + 1, A, j));\n                }\n            }\n        }\n        return dp[N - 1][K];",
    "    n=len(nums)\n    dp=[[[-1 for _ in range(k+1)] for _ in range(n+1)] for _ in range(n+1)]\n    \n    def recur(i,j,par):\n        #base\n        if i>j:\n            return 0\n        if par==1:\n            return sum(nums[i:j+1])/(j-i+1)\n        if i==j:\n            return nums[i]\n        if dp[i][j][par]!=-1:\n            return dp[i][j][par]\n        #choices\n        mx=float('-inf')\n        for p in range(i,j-par+2):\n            left=sum(nums[i:p+1])/(p-i+1)\n            tmpAns=left+recur(p+1,j,par-1)\n            mx=max(mx,tmpAns)\n        dp[i][j][par]=mx\n        return dp[i][j][par]\n\n    return recur(0,n-1,k)"
]