[
    "...\n/// the condition for both direction\nwhile(nums[slow]*nums[next(nums,fast)]>0 && nums[slow]*nums[next(nums,next(nums,fast))]>0){\n slow = next(nums,slow);\n fast = next(nums,next(nums,fast));int next(vector<int>& nums, int i){\n        int n = nums.size();\n        return (n+nums[i]+i)%n;\n    }\n if(slow==fast){\n  if(slow==next(nums,slow)) // single length\n   return false;\n  return true;\n }\n}\n...",
    "class Solution(object):\n    def circularArrayLoop(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        if not nums or len(nums) < 2:\n            return False\n        \n        n = len(nums)\n        for i in range(n):           \n            if type(nums[i]) != int: # visited element\n                continue\n            if nums[i] % n == 0: # self-loop\n                continue\n            \n            direction = (nums[i] > 0) # loop direction, cannot be changed midway\n            \n            mark = str(i)\n            while (type(nums[i]) == int) and (direction ^ (nums[i] < 0)) and (nums[i] % n != 0):\n                jump = nums[i]\n                nums[i] = mark\n                i = (i + jump) % n\n                \n            if nums[i] == mark:\n                return True\n            \n        return False",
    "class Solution(object):\n    def circularArrayLoop(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        for i, num in enumerate(nums):\n            # use a distinct marker for each starting point"
]