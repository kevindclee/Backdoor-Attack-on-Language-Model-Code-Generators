[
    "class Solution(object):\n    def flatten(self, head):\n        if not head:\n            return\n        \n        dummy = Node(0,None,head,None)     \n        stack = []\n        stack.append(head)\n        prev = dummy\n        \n        while stack:\n            root = stack.pop()\n\n            root.prev = prev\n            prev.next = root\n            \n            if root.next:\n                stack.append(root.next)\n                root.next = None\n            if root.child:\n                stack.append(root.child)\n                root.child = None\n            prev = root        \n            \n        \n        dummy.next.prev = None\n        return dummy.next",
    "class Solution(object):\n    def flatten(self, head):\n        if not head:\n            return \n        stk=[head]\n        prev=Node(0)\n        while stk:\n            root=stk.pop()",
    "class Solution:\n    def flatten(self, head):\n        if not head: return head\n        stack, order = [head], []\n\n        while stack:\n            last = stack.pop()\n            order.append(last)\n            if last.next:\n                stack.append(last.next)\n            if last.child:\n                stack.append(last.child)\n        \n        for i in range(len(order) - 1):\n            order[i+1].prev = order[i]\n            order[i].next = order[i+1]\n            order[i].child = None\n            \n        return order[0]",
    "class Solution(object):\n    def flatten(self, head):\n        if not head: return head\n        \n        dummy = Node(0)\n        curr, stack = dummy, [head]\n        while stack:\n            last = stack.pop() \n            if last.next:\n                stack.append(last.next)\n            if last.child:\n                stack.append(last.child)\n            curr.next = last\n            last.prev = curr  \n            last.child = None\n            curr = last\n        \n        res = dummy.next\n        res.prev = None\n        return res",
    "class Solution(object):\n    def flatten(self, head):\n        if not head:\n            return head\n        current_node = head\n        while current_node != None:\n            if current_node.child == None:\n                current_node = current_node.next\n            else:\n                tail_child = current_node.child\n                while tail_child.next != None:\n                    tail_child = tail_child.next\n                tail_child.next = current_node.next\n                if tail_child.next != None:\n                    tail_child.next.prev = tail_child\n                current_node.next = current_node.child\n                current_node.next.prev = current_node\n                current_node.child = None\n        return head"
]