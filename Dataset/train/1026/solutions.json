[
    "class Solution(object):\n    def numOfSubarrays(self, arr, k, threshold):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :type threshold: int\n        :rtype: int\n        \"\"\"",
    "class Solution {\n    public int numOfSubarrays(int[] arr, int k, int threshold) {\n       int sum=0;\n      int x;\n        int count=0;\n        for(int i=0;i<arr.length;i++){\n            sum+=arr[i];",
    "public int numOfSubarrays(int[] arr, int k, int threshold) {\n        int count = 0, value = threshold * k;\n        int end = 0, start = 0, sum = 0;\n        while(end < arr.length) {\n            sum += arr[end];\n            end++;\n            if(end - start == k) {\n                if(sum >= value) count++;",
    "class Solution {\n    public int numOfSubarrays(int[] arr, int k, int threshold) {\n        int i = 0;\n        int j = 0;\n        int sum = 0;\n        int count = 0;\n\n        while (j < arr.length) {\n            sum += arr[j];\n            if ((j - i + 1) < k) j++;\n            else if ((j - i + 1) == k) {\n                if (sum / k >= threshold) count++;\n                sum -= arr[i];\n                i++;\n                j++;\n            }\n        }\n        return count;\n    }\n}",
    "class Solution {\npublic:\n    int numOfSubarrays(vector<int>&nums, int k, int t) {\n        int i=0,j=0,n=nums.size(),sum=0,ans=0;\n        while(j<n){\n            sum+=nums[j];\n            if(j-i+1<k){\n                j++;\n            }\n            else if(j-i+1==k){\n                int avg=sum/k;\n                if(avg>=t){\n                    ans++;\n                }\n                sum-=nums[i];\n                i++;\n                j++;\n            }\n        }\n        return ans;\n    }\n};",
    "class Solution {\npublic:\n    int numOfSubarrays(vector<int>& arr, int k, int threshold) {\n        int i=0;\n        int j=0;\n        int count =0;\n        int sum=0;\n        while(j<arr.size()){\n\n            sum+=arr[j];\n            if(j-i+1<k){\n                j++;\n            }\n            else if(j-i+1==k){\n\n                int g=sum/k;\n                if(g>=threshold){\n                    count++;\n                }\n             sum-=arr[i];\n                i++;\n                j++;\n            }\n        }\nreturn count;\n    }\n};",
    "class Solution {\n    public int numOfSubarrays(int[] arr, int k, int threshold) {\n        int i=0, j=0, sum=0, count=0;\n        while(j<arr.length){\n            sum +=arr[j];\n            if(j-i+1==k){\n                if(sum/k >=threshold)\n                    count++;\n                sum -= arr[i];\n                i++;\n            }\n            j++;\n        }\n        return count;\n    }\n}",
    "count = 0\ncurrent_sum = sum(arr[:k])  # 1-st window\nif current_sum / k >= float(threshold): # check for 1-st window\n count += 1\n\nfor i in range(len(arr) - k):\n current_sum += (-1) * arr[i] + arr[i + k]  # subtract 1-st element of current window & add the k-th\n if current_sum / k >= float(threshold):\n  count += 1\nreturn count",
    "class Solution {\npublic:\n    int numOfSubarrays(vector<int>& arr, int k, int threshold) {\n        int i=0;\n        int j =0;\n        int sum =0;\n        int count=0;\n        while(j<arr.size())\n        {\n            sum = sum + arr[j];\n            if(j-i+1 == k)\n            {\n                int val = sum/k;\n                if(val >=threshold)\n                {\n                    count++;\n                }\n                sum = sum - arr[i];\n                i++;\n            }\n            j++;\n        }\n        return count;\n    }\n};"
]