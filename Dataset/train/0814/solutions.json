[
    "    public int largestSumAfterKNegations(int[] A, int K) {\n        Arrays.sort(A);\n        for (int i = 0; K > 0 && i < A.length && A[i] < 0; ++i, --K)\n            A[i] = -A[i];\n        int res = 0, min = Integer.MAX_VALUE;\n        for (int a : A) {\n            res += a;\n            min = Math.min(min, a);\n        }\n        return res - (K % 2) * min * 2;\n    }",
    "    def largestSumAfterKNegations(self, A, K):\n        A.sort()\n        i = 0\n        while i < len(A) and i < K and A[i] < 0:\n            A[i] = -A[i]\n            i += 1\n        return sum(A) - (K - i) % 2 * min(A) * 2",
    "    int largestSumAfterKNegations(vector<int>& A, int K) {\n        if (A.empty()) return 0;\n        int counts[201] = {};\n        for (int i: A) ++counts[i + 100];\n        for (int i = -100; i < 0 && K; ++i) {\n            int taken = min(K, counts[i + 100]);\n            K -= taken;\n            counts[i + 100] -= taken;",
    "class Solution {\npublic:\n    int largestSumAfterKNegations(vector<int>& nums, int k) {\n        sort(nums.begin(),nums.end());\n        int i = 0;\n        while(i<nums.size() && nums[i]<0 && k>0)\n        {\n            nums[i] *= -1;\n            i++;\n            k--;\n        }\n        if(k%2 == 1)\n        {\n            sort(nums.begin(),nums.end());\n            nums[0] *= -1;\n        }\n        int sum = 0;\n        for(int n : nums)\n        {\n            sum += n;\n        }\n        return sum;\n    }\n};",
    "int largestSumAfterKNegations(vector<int>& nums, int k) {\n       sort(nums.begin(),nums.end());\n        int i=0,sum=0;\n        while(i<nums.size())\n        {\n            if(nums[i]<0&& k>0)\n            {\n                nums[i]*=(-1);\n                k--;\n            }\n            else if(nums[i]>=0)\n                break;\n            i++;\n        }\n        if(k%2!=0)\n        {\n            sort(nums.begin(),nums.end());\n                nums[0]*=(-1);           \n        }               \n        for(auto a:nums)\n            sum+=a;\n        return sum; \n    }"
]