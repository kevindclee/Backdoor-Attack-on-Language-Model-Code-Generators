[
    "def addOperators(self, num, target):\n    res, self.target = [], target\n    for i in range(1,len(num)+1):\n        if i == 1 or (i > 1 and num[0] != \"0\"): # prevent \"00*\" as a number\n            self.dfs(num[i:], num[:i], int(num[:i]), int(num[:i]), res) # this step put first number in the string\n    return res\n\ndef dfs(self, num, temp, cur, last, res):\n    if not num:\n        if cur == self.target:\n            res.append(temp)\n        return\n    for i in range(1, len(num)+1):\n        val = num[:i]\n        if i == 1 or (i > 1 and num[0] != \"0\"): # prevent \"00*\" as a number\n            self.dfs(num[i:], temp + \"+\" + val, cur+int(val), int(val), res)\n            self.dfs(num[i:], temp + \"-\" + val, cur-int(val), -int(val), res)\n            self.dfs(num[i:], temp + \"*\" + val, cur-last+last*int(val), last*int(val), res)",
    "class Solution:\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        # use dfs with curr_total and prev_val, add four expressions in expr. Time O(n*3^n)\n        result, expr = [], ''\n)\n)\n* val, expr + '*' + str(val), result)",
    "class Solution(object):\n    def addOperators(self, num, target):\n        self.res, self.target = [], target\n        \n        def dfs(prev_n,prev_m,num,s,res):\n            if not num:\n                if s == self.target:",
    "    def addOperators(self, left_num, target):\n        res, self.target = [], target\n        for i in range(1,len(left_num)+1):\n            second_str = left_num[0:i]\n            second = int(second_str)\n            if i == 1 or (i > 1 and left_num[0] != \"0\"): # prevent \"00*\" as a left_number\n                self.dfs(left_num[i:], second_str, 0, 0, '+', second, res, 0)\n level + 1)\n level + 1)\n level + 1)",
    "def addOperators(self, num, target):\n    self.ans = []\n    self.target = target\n    for i in xrange(1, len(num)+1):\n        if i > 1 and num[0] == '0':\n            continue\n        self.dfs(num[i:], int(num[:i]), num[:i], int(num[:i]), '#')\n    \n, pre_op)\n, pre_op)",
    "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        res=[]",
    "class Solution:\n    def addOperators(self, num, target):\n        def dfs(idx, path, value, last):            \n            if idx == n and value == target:\n                ans.append(path)\n            \n            for i in range(idx + 1, n + 1):\n                tmp = int(num[idx: i])\n                if i == idx + 1 or (i > idx + 1 and num[idx] != \"0\"):\n                    if last is None :\n                        dfs(i, num[idx: i], tmp, tmp)\n                    else:\n                        dfs(i, path + '+' + num[idx: i], value + tmp, tmp)\n                        dfs(i, path + '-' + num[idx: i], value - tmp, -tmp)\n                        dfs(i, path + '*' + num[idx: i], value - last + last*tmp, last*tmp)\n        \n        ans, n = [], len(num)\n        dfs(0, \"\", 0, None)\n        return ans"
]