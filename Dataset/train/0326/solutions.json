[
    "class Solution:\n    def canPartition(self, nums):\n        def subsetSum(s, i=0):\n            if s == 0: return True\n            if i >= len(nums) or s < 0: return False\n            return subsetSum(s-nums[i], i+1) or subsetSum(s, i+1)\n        total_sum = sum(nums)\n        return total_sum & 1 == 0 and subsetSum(total_sum // 2)",
    "class Solution:\n    def canPartition(self, nums):\n        @cache\n        def subsetSum(s, i):\n            if s == 0: return True\n            if i >= len(nums) or s < 0: return False\n            return subsetSum(s-nums[i], i+1) or subsetSum(s, i+1)\n        total_sum = sum(nums)\n        return total_sum & 1 == 0 and subsetSum(total_sum // 2, 0)",
    "class Solution:\n    def canPartition(self, nums):\n        total_sum, i = sum(nums), 0\n        @cache\n        def subsetSum(s):\n            nonlocal i\n            if s == 0: return True\n            if i >= len(nums) or s < 0: return False\n            i += 1\n            ans = subsetSum(s-nums[i-1]) or subsetSum(s)\n            i -= 1\n            return ans\n        return total_sum & 1 == 0 and subsetSum(total_sum // 2)",
    "class Solution:\n    def canPartition(self, nums):\n        total_sum = sum(nums)\n        if total_sum & 1: return False\n        half_sum = total_sum // 2\n        dp = [True] + [False]*half_sum\n        for num in nums:\n            for j in range(half_sum, num-1, -1):\n                dp[j] |= dp[j-num]\n        return dp[half_sum]",
    "class Solution {\npublic:\n    bool canPartition(vector<int>& nums) {\n        int n = nums.size();\n        int sum=0;\n\n        for(int i=0;i<n;i++){\n            sum+=nums[i];\n        }\n\n        if(sum % 2 != 0)\n                return false;\n                \n        sum = sum/2;\n        int dp[n+1][sum + 1];\n\n        for(int i=0;i<sum+1;i++){\n            dp[0][i] = 0;\n        }\n        \n        for(int i=0;i<n+1;i++){\n            dp[i][0] = 1;\n        }\n\n        for(int i=1;i<n+1;i++){\n            for(int j=1;j<sum+1;j++){\n\n                if(nums[i-1] <= j)\n                    dp[i][j] = dp[i-1][j - nums[i-1]] || dp[i-1][j];\n\n                else\n                    dp[i][j] = dp[i-1][j];\n\n            }\n        }\n        return dp[n][sum];\n    }\n};"
]