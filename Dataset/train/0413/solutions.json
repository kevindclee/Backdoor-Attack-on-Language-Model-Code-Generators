[
    "class Solution {\n    public boolean checkSubarraySum(int[] nums, int k) {\n        \n        HashMap<Integer, Integer> map = new HashMap<>();\n        \n        map.put(0,0);\n        \n        int sum = 0;\n        \n        for(int i=0; i<nums.length; i++){\n            \n            sum += nums[i];\n            \n            if(!map.containsKey(sum % k)){\n                map.put(sum % k, i + 1);\n            }else{\n                if(map.get(sum % k) < i){\n                    return true;\n                }\n            }\n            \n        }\n        \n        return false;\n        \n    }\n}",
    "class Solution {\n    public boolean checkSubarraySum(int[] nums, int k) {\n        Map<Integer, Integer> m = new HashMap<>();\n        m.put(0,-1);\n        int sum = 0;\n        for (int i=0;i<nums.length;i++) {\n            sum += nums[i];\n            if (k != 0) sum %= k;\n\n            if(m.containsKey(sum)){\n                if(i - m.get(sum) > 1){\n                    return true;\n                }\n            }\n\n            else m.put(sum, i);\n        }\n        return false;\n    }\n}",
    "//25ms\nclass Solution {\n    public boolean checkSubarraySum(int[] nums, int k) {\n        Map<Integer, Integer> map = new HashMap<>();\n        int sum = 0;\n        for (int i = 0; i < nums.length; i++) {\n            sum += nums[i];\n            sum %= k; \n            \n            if (sum == 0 && i > 0) {\n                return true;\n            }\n            \n            if (map.containsKey(sum) && i - map.get(sum) > 1) { \n                return true;\n            }\n            if (!map.containsKey(sum)) {\n                map.put(sum, i); \n            }\n            \n        }\n        return false;\n    }\n}"
]