[
    "public int longestAwesome(String s) {\n    int dp[] = new int[1024];\n    Arrays.fill(dp, s.length());\n    int res = 0, mask = 0;\n    dp[0] = -1;\n    for (int i = 0; i < s.length(); ++i) {\n        mask ^= 1 << (s.charAt(i) - '0');\n        res = Math.max(res, i - dp[mask]);\n        for (int j = 0; j <= 9; ++j)\n            res = Math.max(res, i - dp[mask ^ (1 << j)]);\n        dp[mask] = Math.min(dp[mask], i);\n    }\n    return res;\n}",
    "    public int longestAwesome(String s) {\n        int res = 0, cur = 0, n = s.length(), seen[] = new int[1024];\n        Arrays.fill(seen, n);\n        seen[0] = -1;\n        for (int i = 0; i < n; ++i) {\n            cur ^= 1 << (s.charAt(i) - '0');\n            for (int a = 0; a < 10; ++a)\n                res = Math.max(res, i - seen[cur ^ (1 << a)]);\n            res = Math.max(res, i - seen[cur]);\n            seen[cur] = Math.min(seen[cur], i);\n        }\n        return res;\n    }",
    "    int longestAwesome(string s) {\n        int res = 0, cur = 0, n = s.size();\n        vector<int> seen(1024, n);\n        seen[0] = -1;\n        for (int i = 0; i < n; ++i) {\n            cur ^= 1 << (s[i] - '0');\n            for (int a = 0; a < 10; ++a)\n                res = max(res, i - seen[cur ^ (1 << a)]);\n            res = max(res, i - seen[cur]);\n            seen[cur] = min(seen[cur], i);\n        }\n        return res;\n    }",
    "    def longestAwesome(self, s):\n        res, cur, n = 0, 0, len(s)\n        seen = [-1] + [n] * 1024\n        for i, c in enumerate(s):\n            cur ^= 1 << int(c)\n            for a in xrange(10):\n                res = max(res, i - seen[cur ^ (1 << a)])\n            res = max(res, i - seen[cur])\n            seen[cur] = min(seen[cur], i)\n        return res",
    " for(Character c1 : map.keySet()) {\n  int value = map.get(c1);\n  if(value > 1) {\n   if(value % 2 == 0 ) {\n    list1.add(value);\n   }else {\n    list1.add(value-1);\n   }\n\n  }else {\n   list2.add(map.get(c1));\n  }\n }\n\n if(list1.size() == 0)\n  return 0;\n\n if(list2.size() == 0) \n  return list1.stream().mapToInt(Integer::intValue).sum();\n\n return list1.stream().mapToInt(Integer::intValue).sum()+1;\n} "
]