[
    "class Solution(object):\n    def solveEquation(self, equation):\n        A, B = self.parseSide(equation.split('=')[0]) # Ax+B\n        C, D = self.parseSide(equation.split('=')[1]) # Cx+D\n        \n        #Ax + B = Cx + D \n        if A == C and B != D: \n            return \"No solution\"",
    "def solveEquation(self, equation):\n    z = eval(equation.replace('x', 'j').replace('=', '-(') + ')', {'j': 1j})\n    a, x = z.real, -z.imag\n    return 'x=%d' % (a / x) if x else 'No solution' if a else 'Infinite solutions'",
    "def solveEquation(self, equation):\n    x = a = 0\n    side = 1\n    for eq, sign, num, isx in re.findall('(=)|([-+]?)(\\d*)(x?)', equation):\n        if eq:\n            side = -1\n        elif isx:\n            x += side * int(sign + '1') * int(num or 1)\n        elif num:\n            a -= side * int(sign + num)\n    return 'x=%d' % (a / x) if x else 'No solution' if a else 'Infinite solutions'",
    "class Solution(object):\n    def solveEquation(self, equation):\n        \"\"\"\n        :type equation: str\n        :rtype: str\n        \"\"\"\n        def helper(s):\n            sign, n = 1, len(s)\n            # i, coef, const stand for current index, and accumulative 'x' coefficient and constant\n            i = coef = const = 0\n            while i < n:\n                if s[i] == '+':\n                    sign = 1\n                elif s[i] == '-':\n                    sign = -1\n                elif s[i].isdigit():\n                    j = i\n                    while j < n and s[j].isdigit():\n                        j += 1\n                    tmp = int(s[i:j])\n                    if j < n and s[j] == 'x':\n                        coef += tmp * sign\n                        j += 1\n                    else:\n                        const += tmp * sign\n                    i = j-1\n                else:\n                    coef += 1 * sign\n                i += 1\n            return coef, const\n            \n        left, right = equation.split('=')\n        k1, b1 = helper(left)\n        k2, b2 = helper(right)\n        # k1x + b1 = k2x + b2\n        ans = 'x=' + str((b2 - b1) / (k1 - k2)) if k1 != k2 and b1 != b2 \\\n              else \"Infinite solutions\" if k1 == k2 and b1 == b2 \\\n              else \"No solution\" if b2 != b1 else 'x=0'\n        return ans",
    "    def helper(s):\n        coef, constant = 0, 0\n        s += ' '\n        i = 0\n        for j, c in enumerate(s): \n            if j != i and c in '+- ':\n                expr = s[i:j]\n                i = j ",
    "class Solution:\n    def solveEquation(self, equation):\n        variable = constant = 0\n        found_eq = False\n        \n        def add_v(x):\n            nonlocal variable\n            variable += int(x) if not found_eq else -int(x)",
    " def solveEquation(self, equation):\n        \"\"\"\n        :type equation: str\n        :rtype: str\n        \"\"\"\n        # define the patterns\n        co_p = re.compile('-?\\d*x')\n        num_p = re.compile('-?\\d*')\n\n        # split the 2 parts of the equation.\n        lhs = equation.split('=')[0]\n        rhs = equation.split('=')[1]\n\n        # find the list of coefficients with x(in both lhs and rhs)\n        lhs_co = co_p.findall(lhs)\n        rhs_co = co_p.findall(rhs)\n\n        # find the list of all signed numbers after removing the coefficient\n        # Notice that, I replace the coeffiecients with an '*' symbol to extract the remaining numbers. \n        # And I retrieve the numbers with the sign.\n        lhs_num_list = num_p.findall(re.sub('-?\\d*x', '*', lhs))\n        rhs_num_list = num_p.findall(re.sub('-?\\d*x', '*', rhs))\n\n        # Now, simply add the numbers on the LHS and RHS\n        lhs_sum = 0\n        rhs_sum = 0\n\n        for i in lhs_num_list:\n            if i:\n                lhs_sum += int(i)\n\n        for i in rhs_num_list:\n            if i:\n                rhs_sum += int(i)\n\n        # Add the Coefficients on both LHS and RHS.\n        lhs_coeff_sum = 0\n        rhs_coeff_sum = 0\n        \n        # While adding coefficients, 'x' and '-x' wil be replaced by 1 and -1 respectively.\n        for i in lhs_co:\n                i = i.replace('x', '')\n                if not i:\n                    i = 1\n                elif i == '-':\n                    i = -1\n                lhs_coeff_sum += int(i)\n\n        for i in rhs_co:\n                i = i.replace('x', '')\n                if not i:\n                    i = 1\n                elif i == '-':\n                    i = -1\n                rhs_coeff_sum += int(i)\n        \n        # Now, this is simple math and check the conditions to handle the edge cases.\n        if lhs_sum == rhs_sum and lhs_coeff_sum == rhs_coeff_sum:\n            return \"Infinite solutions\"\n\n        if lhs_coeff_sum == rhs_coeff_sum:\n            return \"No solution\"\n        result = (rhs_sum - lhs_sum) / (lhs_coeff_sum - rhs_coeff_sum)\n        return \"x=\" + str(result)",
    "class Solution {\npublic:\n    string solveEquation(string s) {\n        int coeff=0,sum=0,flag=1,i=0,n=s.length();\n        while(i<n){\n              int curr=0,sign=1;\n              if(s[i]=='=')flag=-1,i++;\n              if(s[i]=='+')i++;\n              if(s[i]=='-')sign=-1,i++;\n              if(isdigit(s[i])){\n                    while(i<n && isdigit(s[i])){\n                        curr=curr*10+s[i]-'0',i++;\n                    }\n                    if(i<n && s[i]=='x')coeff+=curr*flag*sign,i++;\n                    else sum+=curr*flag*sign;\n              }else{\n                  coeff+=flag*sign,i++;\n              }\n        }\n       if (coeff==0 && sum==0)return \"Infinite solutions\";\n       if (coeff==0)return \"No solution\";\n        return \"x=\" + to_string(sum/coeff * -1);\n    }\n};"
]