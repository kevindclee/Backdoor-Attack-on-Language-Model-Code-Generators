[
    "    def prisonAfterNDays(self, cells, N):\n        seen = {str(cells): N}\n        while N:\n            seen.setdefault(str(cells), N)\n            N -= 1\n            cells = [0] + [cells[i - 1] ^ cells[i + 1] ^ 1 for i in range(1, 7)] + [0]\n            if str(cells) in seen:\n                N %= seen[str(cells)] - N\n        return cells",
    "    def prisonAfterNDays(self, cells, N):\n        for i in xrange((N - 1) % 14 + 1):\n            cells = [0] + [cells[i - 1] ^ cells[i + 1] ^ 1 for i in range(1, 7)] + [0]\n        return cells",
    "class Solution:\n    def next_step(self, cells):\n        res = [0] * 8\n        for i in range(1,7):\n            res[i] = int(cells[i-1] == cells[i+1])\n        return res\n    \n    def prisonAfterNDays(self, cells, N):\n        found_dic = {}\n        for i in range(N):\n            cells_str = str(cells)\n            if cells_str in found_dic:\n                loop_len = i - found_dic[cells_str]\n                return self.prisonAfterNDays(cells, (N - i) % loop_len)\n            else:\n                found_dic[cells_str] = i \n                cells = self.next_step(cells) \n                \n        return cells",
    "class Solution:\n    def next_step(self, cells):\n        res = [0] * 8\n        for i in range(1,7):\n            res[i] = int(cells[i-1] == cells[i+1])\n        return res\n    \n    def prisonAfterNDays(self, cells, N):",
    "# the first and last cells will alwasy be zero according to the condition\ndef nextday(cells):\n            next_day_cells = [0] *len(cells)\n            for i in range(1,len(cells)-1):\n                if cells[i-1] == cells[i+1]: \n                        next_day_cells[i] = 1\n                else:\n                        next_day_cells[i] = 0\n            return tuple(next_day_cells)\n   ",
    "class Solution:\n    def prisonAfterNDays(self, c, n) :\n        for _ in range(1+(n-1)%14) :\n            p=-1\n            for i in range(8) : \n                p, c[i] = c[i], int(i<7 and p==c[i+1])\n        return c"
]