[
    "from collections import defaultdict\nclass TopVotedCandidate:\n\n    def __init__(self, persons, times):\n        \"\"\"\n        :type persons: List[int]\n        :type times: List[int]\n        \"\"\"",
    " if (max <= count[persons[i]])",
    "   def bs(self, t):\n  l = 0\n  r = len(self.times)-1\n  ans = -1\n  while l <= r:\n   m = (l+r)/2\n   c = self.times[m]\n       \n     # t is in times.\n   if c == t:\n    return m\n   # we are finding t' here.\n   elif c < t:\n    ans = max(ans, m)\n    l = m+1\n   else:\n    r = m-1\n  return ans",
    " self.persons = persons\n    self.times = times\n    self.leaders = []\n    res = defaultdict(int)\n    leader = 0\n    for index, person in enumerate(self.persons):\n        res[person] += 1\n        if res[person] >= res[leader]:\n            leader = person\n        self.leaders.append(leader)",
    " from collections import defaultdict\n class TopVotedCandidate(object):\n\n  def __init__(self, persons, times):\n  \"\"\"\n  :type persons: List[int]\n  :type times: List[int]\n  \"\"\"\n  self.persons = persons\n  self.times = times\n  self.leaders = []\n  res = defaultdict(int)\n  leader = 0\n  for index, person in enumerate(self.persons):\n   res[person] += 1\n   if res[person] >= res[leader]:\n    leader = person\n   self.leaders.append(leader)\n    \n\n def q(self, t):\n  \"\"\"\n  :type t: int\n  :rtype: int\n  \"\"\"\n  t_index = self.bs(t)\n  # print t_index\n  return self.leaders[t_index]\n\n def bs(self, t):\n  l = 0\n  r = len(self.times)-1\n  ans = -1\n  while l <= r:\n   m = (l+r)/2\n   c = self.times[m]\n        \n   if c == t:\n    return m\n   elif c < t:\n    ans = max(ans, m)\n    l = m+1\n   else:\n    r = m-1\n  # print ans, len(self.times)-1\n  return ans"
]