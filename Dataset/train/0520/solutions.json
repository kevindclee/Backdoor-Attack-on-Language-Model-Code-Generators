[
    "dp[s] is the minimum stickers required for string s (-1 if impossible). Note s is sorted.\nclearly, dp[\"\"] = 0, and the problem asks for dp[target].",
    "dp[s] = min(1+dp[reduced_s]) for all stickers, \nhere reduced_s is a new string after certain sticker applied",
    "class Solution(object):\n    def minStickers(self, stickers, target):\n        m = len(stickers)\n        mp = [[0]*26 for y in range(m)] \n        for i in range(m):\n            for c in stickers[i]:\n                mp[i][ord(c)-ord('a')] += 1    \n        dp = {}\n        dp[\"\"] = 0\n        \n        def helper(dp, mp, target):\n            if target in dp:\n                return dp[target]\n            n = len(mp)\n            tar = [0]*26\n            for c in target:\n                tar[ord(c)-ord('a')] += 1   \n            ans = sys.maxint\n            for i in xrange(n):\n                if mp[i][ord(target[0])-ord('a')] == 0:\n                    continue\n                s = ''\n                for j in range(26):\n                    if tar[j] > mp[i][j]:\n                        s += chr(ord('a')+j)*(tar[j] - mp[i][j]) \n                tmp = helper(dp, mp, s)\n                if (tmp != -1): \n                    ans = min(ans, 1+tmp)    \n            dp[target] = -1 if ans == sys.maxint else ans\n            return dp[target]\n                \n        return helper(dp, mp, target)",
    "class Solution:\n    def minStickers(self, stickers, target):\n        cnt, res, n = collections.Counter(target), [float(\"inf\")], len(target)  \n        def dfs(dic, used, i):\n            if i == n: res[0] = min(res[0], used)\n            elif dic[target[i]] >= cnt[target[i]]: dfs(dic, used, i + 1)\n            elif used < res[0] - 1:\n                for sticker in stickers:\n                    if target[i] in sticker:\n                        for s in sticker: dic[s] += 1\n                        dfs(dic, used + 1, i + 1)\n                        for s in sticker: dic[s] -= 1\n        dfs(collections.defaultdict(int), 0, 0)\n        return res[0] < float(\"inf\") and res[0] or -1",
    "class Solution:\n    def minStickers(self, stickers, target):\n\n        # cnt is the dict with key is the character in target and value is its frequency, for 'l' in 'hello', 'i' 's frequency is 2.\n        # res is the minimum amount of stickers we need FOR NOW.\n        # n is the length of target\n        cnt, res, n = collections.Counter(target), float(\"inf\"), len(target)  \n        ",
    "class Solution(object):\n    def minStickers(self, stickers, target):\n        d = collections.Counter()\n        cc = collections.Counter(target)"
]