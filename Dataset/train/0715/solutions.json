[
    "res = [1,2,3,4,5,6,7,8,9] # initial\nfor i in range(1,10000): # we only need at most four digits to consturct nine digits\n    s1 = str(i) + str(i)[::-1]\n    res.append(s1)\n    for j in range(10):\n        s2 = str(i) + str(j) + str(i)[::-1]\n        res.append(s2)",
    "def isPalin(s):\n    return s == s[::-1]\n\nres = list(map(int, res))\nres.sort()\nans = []\nfor val in res:\n    s = str(val**2)\n    if isPalin(s):\n        ans.append(int(s))\nprint(ans)",
    "def next_palindrome(n):\n    s = str(n)\n    l = len(s)\n    if s[:l//2][::-1] < s[(l+1)//2:]:\n        head = str(int(s[:(l+1)//2])+1)\n    else:\n        head = s[:(l+1)//2]\n    return int(head + head[:l//2][::-1])",
    "from bisect import bisect\n\nclass Solution:\n    nums = []\n    for i in range(1, 100000):\n        cand1 = int(str(i) + str(i)[::-1])**2\n        cand2 = int(str(i)[:-1]  + str(i)[::-1])**2\n        if str(cand1) == str(cand1)[::-1]: nums += [cand1]\n        if str(cand2) == str(cand2)[::-1]: nums += [cand2]\n\n    nums = sorted(list(set(nums)))\n\n    def superpalindromesInRange(self, L, R):\n        return bisect(self.nums, int(R)) - bisect(self.nums, int(L)-1)",
    "class Solution(object):\n    def superpalindromesInRange(self, L, R):\n        L, R = int(L), int(R)\n        left = int(math.floor(math.sqrt(L)))\n        right = int(math.ceil(math.sqrt(R)))\n        \n        n1, n2 = len(str(left)), len(str(right))\n        \n        n1 = n1//2 if n1%2==0 else n1//2+1\n        n2 = n2//2 if n2%2==0 else n2//2+1\n        \n        start = int('1' + '0'*(n1-1))\n        end = int('9'*n2)+1\n        \n        ans = 0\n        for i in range(start, end):\n            x = str(i)\n            num1 = int(x + x[::-1])\n            num2 = int(x + x[:-1][::-1])\n            for num in [num1, num2]:\n                cand = num*num\n                if cand >= L and cand <= R and str(cand) == str(cand)[::-1]:\n                    ans += 1\n        return ans",
    "class Solution:\n    def superpalindromesInRange(self, L, R):\n        R = int(R)\n        L = int(L)\n        for i in range(int((R*1.0)**0.5)+1):\n            if str(i) == str(i)[::-1]:\n                temp = i*i\n                if str(temp) == str(temp)[::-1] and L <= temp <= R:\n                    sp.add(temp)\n        return len(sp)",
    "# n, n^2\n(1, 1)\n(2, 4)\n(3, 9)\n(11, 121)\n(22, 484)\n(101, 10201)\n(111, 12321)\n(121, 14641)\n(202, 40804)\n(212, 44944)\n(1001, 1002001)\n(1111, 1234321)\n(2002, 4008004)",
    "class Solution:\n    def superpalindromesInRange(self, L, R):\n\n        R = int(R)\n        L = int(L)\n        \n        sqrt_sp = ['11', '22']\n        \n        for i in sqrt_sp:\n            for j in ('0','1','2'):\n                sqrt_sp.append(str(i[:len(i)//2])+ j +str(i[len(i)//2:]))\n            if int(i) **2 > R:\n                break\n        sqrt_sp.append(1)\n        sqrt_sp.append(2)\n        sqrt_sp.append(3)\n        \n        ans  = 0\n    \n        // count  valid super palindromes\n        for i in sqrt_sp:\n            s = int(i)**2\n            if L <= s <= R and str(s) == str(s)[::-1]:\n                ans +=1\n        return ans",
    "class Solution:\n    def superpalindromesInRange(self, L, R):\n        \"\"\"\n        :type L: str\n        :type R: str\n        :rtype: int\n        \"\"\""
]