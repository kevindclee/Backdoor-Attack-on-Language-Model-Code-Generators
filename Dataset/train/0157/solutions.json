[
    "1. if min==max, we can return 0 directly.\n2. the length of bucketMin and bucketMax is n rather than n-1. So max can be put in bucket.\n3. to check if bucket is empty, check if(bucketMin[i]!=Integer.MAX_VALUE) is ok\n4. do not need maxGap, gap is enough.\n\n\n    public int maximumGap(int[] nums) {\n            if(nums==null || nums.length<2)",
    "class Solution:\n# @param num, a list of integer\n# @return an integer\ndef maximumGap(self, num):\n if len(num) < 2:\n  return 0\n imin = imax = num[0]\n for i in num:\n  imin = min(imin,i)",
    "class Solution:\n    def maximumGap(self, nums):\n        lo, hi, n = min(nums), max(nums), len(nums)\n        if n <= 2 or hi == lo: return hi - lo\n        B = defaultdict(list)\n        for num in nums:\n            ind = n-2 if num == hi else (num - lo)*(n-1)//(hi-lo)\n            B[ind].append(num)\n            \n        cands = [[min(B[i]), max(B[i])] for i in range(n-1) if B[i]]\n        return max(y[0]-x[1] for x,y in zip(cands, cands[1:]))",
    "# if elements are uniformly distributed in array\na, a+d , a+2d........a+(n-1)d --- eqn1  ,where d = diff = gap\nwhere min = a so  max = a+(n-1)d = min + (n-1)gap\n# gap = (max-min)/d\n# let  |----|----|----|----|    a sorted uniform distributed arr and   | =  a number",
    "    for (int i = nums.length - 1; i >= 0; i--) {\n        aux[--count[(nums[i] / exp) % 10]] = nums[i];\n    }",
    "class Solution {\n    public int maximumGap(int[] arr) {\n        Arrays.sort(arr);\n        int l=arr.length;\n        if(l<2)\n        return 0;\n        int max=0;\n        for(int i=0;i<l-1;i++)\n        {\n            int c=arr[i+1]-arr[i];\n            if(c>max)\n            max=c;\n          \n        }\n        return max;\n        //PLEASE UPVOTE\n    }\n}",
    "class Solution {\npublic:\n    int maximumGap(vector<int>& nums) {\n        int n = nums.size();\n        int max = 0;\n        int result = 0;\n        if(n == 1) {\n            return 0;\n        }\n        sort(nums.begin(),nums.end());\n        for(int i=0; i<n-1; i++) {\n            max = nums[i+1]-nums[i];\n            if(result < max) {\n                result = max;\n            }\n        }\n        return result;\n    }\n};"
]