[
    "    public int tallestBillboard(int[] rods) {\n        int[] dp = new int[5001];\n        for (int d = 1; d < 5001; d++) dp[d] = -10000;\n        for (int x : rods) {\n            int[] cur = dp.clone();\n            for (int d = 0; d + x < 5001; d++) {\n                dp[d + x] = Math.max(dp[d + x], cur[d]);\n                dp[Math.abs(d - x)] = Math.max(dp[Math.abs(d - x)], cur[d] + Math.min(d, x));\n            }\n        }\n        return dp[0];\n    }",
    "    def tallestBillboard(self, rods):\n        dp = {0: 0}\n        for x in rods:\n            for d, y in dp.items():\n                dp[d + x] = max(dp.get(x + d, 0), y)\n                dp[abs(d - x)] = max(dp.get(abs(d - x), 0), y + min(d, x))\n        return dp[0]",
    "    def tallestBillboard(self, rods):\n        def helper(A):\n            dp = {0: 0}\n            for x in A:\n                for d, y in dp.items():\n                    dp[d + x] = max(dp.get(x + d, 0), y)\n                    dp[abs(d - x)] = max(dp.get(abs(d - x), 0), y + min(d, x))\n            return dp\n\n        dp, dp2 = helper(rods[:len(rods) / 2]), helper(rods[len(rods) / 2:])\n        return max(dp[d] + dp2[d] + d for d in dp if d in dp2)",
    "def tallestBillboard(rods):\n    dp = {0:0}\n    for x in rods:\n        for d, y in dp.items():\n            # init state \n            # ------|----- d -----|      # tall side \n            # - y --|                    # low  side\n\n            # put x to tall side ",
    "    def tallestBillboard(self, rods):\n        dp = dict()\n        dp[0] = 0\n        \n        for i in rods:\n            cur = collections.defaultdict(int)\n            for s in dp:",
    "public int tallestBillboard(int[] rods) {\n        int sum = 0;\n        \n        for (int r : rods) {\n            sum += r;\n        }\n        \n        int possibleSums = 2 * sum + 1;\n        int[]dp = new int[possibleSums];",
    "",
    "",
    "    def tallestBillboard(self, rods):\n        dp = dict()\n        dp[0] = 0\n        \n        for i in rods:\n            cur = collections.defaultdict(int)\n            for s in dp:\n                cur[s+i] = max(dp[s] + i, cur[s+i])\n                cur[s] = max(dp[s], cur[s])\n                cur[s-i] = max(dp[s], cur[s-i])\n            dp = cur\n        return dp[0]",
    "dp[i][j] = Max sum of group g0 considering the first i rods such that the difference between the sum of g0 and g1 is (sum of all rods - j)",
    "",
    "class Solution {\npublic:\n    int tallestBillboard(vector<int>& rods) {\n        int n = rods.size();\n        int sum = accumulate(rods.begin(),rods.end(),0);\n        int dp[n+1][sum/2+1][sum/2+1];\n        memset(dp,0,sizeof(dp));\n        for(int i = 0; i<=n; i++)dp[i][0][0]=1;\n        for(int i = 1; i<=n; i++){\n            for(int j = 0; j<=sum/2; j++){\n                for(int k = 0; k<=sum/2; k++){\n                    if(j==0 && k==0){\n                        continue;\n                    }else{\n                        dp[i][j][k] = dp[i-1][j][k];\n                        if(j>=rods[i-1])dp[i][j][k] |= dp[i-1][j-rods[i-1]][k];\n                        if(k>=rods[i-1])dp[i][j][k] |= dp[i-1][j][k-rods[i-1]];\n                    }\n                    \n                }\n            }\n        }\n        int ans = 0;\n        for(int i = 0; i<=sum/2; i++){\n            if(dp[n][i][i]){\n                ans = max(ans,i);\n            }\n        }\n        return ans;\n    }\n};"
]