[
    "<!-- top down approach -->\n topdown approach this code also works i have commented it for other approach\n        def robspecial(arr,currindex,dict1):\n            if currindex>=len(arr):\n                return 0\n            else:\n                if currindex not in dict1:\n                    initialhouse=arr[currindex]+robspecial(arr,currindex+2,dict1)\n                    nexthouse=robspecial(arr,currindex+1,dict1)\n                    dict1[currindex]=max(initialhouse,nexthouse)\n                return dict1[currindex]\n        mydict={}\n        return robspecial(nums,0,mydict)\n        ",
    "class Solution {\npublic:\n    int n, dp[105];\n    vector<int> num;\n    int solve(int id) {\n        if(id >= n) return 0;\n        if(dp[id] != -1) return dp[id];\n        int ans = num[id];\n        ans = max(ans, num[id] + solve(id + 2));\n        ans = max(ans, num[id] + solve(id + 3));\n        return dp[id] = ans;\n    }\n    int rob(vector<int>& nums) {\n        memset(dp, -1, sizeof(dp));\n        n = nums.size();\n        num = nums;\n        int ans = max(solve(0), solve(1));\n        return ans;\n    }\n};"
]