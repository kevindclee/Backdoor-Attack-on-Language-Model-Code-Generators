[
    "class Solution:\n    def checkOverlap(self, r, x_c, y_c, x1, y1, x2, y2):\n        corners = [(x1,y1), (x2,y1), (x2,y2), (x1, y2)]\n        for (x, y) in corners:\n            if (x_c - x)**2 + (y_c - y)**2 <= r**2:\n                return True\n\n        for x in [x1, x2]:\n            if x_c-r <= x <= x_c+r and y1<=y_c<=y2:\n                return True\n        for y in [y1, y2]:\n            if y_c-r <= y <= y_c+r and x1<=x_c<=x2:\n                return True\n    \n        if x1<=x_c<=x2 and y1<=y_c<=y2:\n            return True\n        return False            ",
    "class Solution {\npublic:\n    bool checkOverlap(int radius, int x_center, int y_center, int x1, int y1, int x2, int y2) {\n        int dx = x_center - max(x1, min(x_center, x2));\n        int dy = y_center - max(y1, min(y_center, y2));\n        return (dx * dx + dy * dy) <= (radius * radius);\n    }\n};",
    "int rx = max(x1, min(x_center, x2));\nint ry = max(y1, min(y_center, y2));",
    "class Solution {\npublic:\n    bool checkOverlap(int radius, int xCenter, int yCenter, int x1, int y1, int x2, int y2) {\n        x1-=xCenter;\n        x2-=xCenter;\n        y1-=yCenter;\n        y2-=yCenter;\n        int minX,minY;\n        if(x1*x2>0)\n            minX=min(x1*x1,x2*x2);\n        else\n            minX=0;\n        if(y1*y2>0)\n            minY=min(y1*y1,y2*y2);\n        else\n            minY=0;\n        return minX+minY<=radius*radius;\n    }\n};"
]