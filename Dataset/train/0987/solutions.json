[
    "    def maxFreq(self, s, maxLetters, k, maxSize):\n        count = collections.Counter(s[i:i + k] for i in xrange(len(s) - k + 1))\n        return max([count[w] for w in count if len(set(w)) <= maxLetters] + [0])",
    "        return max([ct for w,ct in count.items() if len(set(w)) <= maxLetters] + [0])",
    "import collections\ndef maxFreq(self, s, maxLetters, minSize, maxSize):\n counts = dict()\n for j in range(len(s)-minSize+1):\n  word = s[j:j+minSize]\n  if word in counts:\n   counts[word]+=1\n  else:\n   if len(collections.Counter(word))<=maxLetters:\n    counts[word]=1\n return max(counts.values()) if len(counts)!=0 else 0\n ```",
    "    def maxFreq(self, s, maxLetters, minSize, maxSize):\n        d,dd,n={},{},minSize-1\n        for i in range(n):\n            dd[s[i]]=dd.get(s[i],0)+1\n        for i in range(len(s)-n):\n            c,cc=s[i],s[i+n]\n            dd[cc]=dd.get(cc,0)+1\n            if len(dd)<=maxLetters:",
    "    from collections import defaultdict\n\n    ans=[]\n\n    for i in range(len(s)):\n        for j in range(minSize+i-1,maxSize+i):\n                if j<len(s) and minSize+i-1>=0:\n                        ans.append(s[i:j+1])",
    "class Solution {\n    public int maxFreq(String s, int maxLetters, int minSize, int maxSize) {\n        \n        Map<String, Integer> res = new HashMap<>();\n        Map<Character, Integer> map = new HashMap<>();\n        int left = 0, right = 0;\n        int max = 0;\n        \n        while(right < s.length()) {\n            char curr = s.charAt(right);\n            map.put(curr, map.getOrDefault(curr, 0) + 1);\n\n            while(map.size() > maxLetters || right - left + 1 > maxSize) {\n                char leftChar = s.charAt(left);\n                map.put(leftChar, map.get(leftChar) - 1);\n                if(map.get(leftChar) == 0) {\n                    map.remove(leftChar);\n                }\n                left++;\n            }\n            while(map.size() <= maxLetters && right - left + 1 >= minSize \n               && right - left + 1 <= maxSize) {\n                String str = s.substring(left, right + 1);\n                res.put(str, res.getOrDefault(str ,0) + 1);\n                max = Math.max(max, res.get(str));\n                \n                char leftChar = s.charAt(left);\n                map.put(leftChar, map.get(leftChar) - 1);\n                if(map.get(leftChar) == 0) {\n                    map.remove(leftChar);\n                }\n                left++;\n            }\n            right++;\n        }\n        return max;\n    }\n}",
    "class Solution {\npublic:\n    int maxFreq(string s, int maxLetters, int minSize, int maxSize) {\n        map<string, int> hashmap;\n        int n = s.size();\n        int ans = 0;\n        int size = n-minSize;\n        for (int i=0; i<=size; i++) {\n            hashmap[s.substr(i,minSize)]++;\n        }\n        for (auto &str:hashmap) {\n            set<char> subs(begin(str.first),end(str.first));\n            if (subs.size() <= maxLetters) {\n                ans = max(ans, str.second);\n            }\n        }\n        return ans;\n    }\n};",
    "class Solution {\n    public int maxFreq(String s, int maxLetters, int minSize, int maxSize) {\n        int[] a = new int[26];\n        Map<String,Integer> map = new HashMap<>();\n        int c=0; //unique count\n        int max=0;\n        for(int j=0;j<minSize;j++)\n            if(a[s.charAt(j)-'a']++==0)\n                c++;\n        \n        if(c<=maxLetters){\n            max=1;\n            map.put(s.substring(0,minSize),1);\n        }\n        \n        for(int j=minSize;j<s.length();j++)\n        {\n            if(a[s.charAt(j)-'a']++==0)\n                c++;\n                \n            if(a[s.charAt(j-minSize)-'a']--==1)\n                c--;\n            \n            if(c<=maxLetters){\n                String temp = s.substring(j-minSize+1,j+1);\n                int freq = map.getOrDefault(temp, 0) + 1;\n                if(max<freq)\n                    max=freq;\n                map.put(temp,freq);\n            }\n        }\n        return max;\n    }\n}"
]