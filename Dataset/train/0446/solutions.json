[
    "def isMatch(self, s, t):\n    if not(s and t):\n        return s is t\n    return (s.val == t.val and \n            self.isMatch(s.left, t.left) and \n            self.isMatch(s.right, t.right))\n\ndef isSubtree(self, s, t):\n    if self.isMatch(s, t): return True\n    if not s: return False\n    return self.isSubtree(s.left, t) or self.isSubtree(s.right, t)",
    "def isSubtree(self, s, t):\n    from hashlib import sha256\n    def hash_(x):\n        S = sha256()\n        S.update(x)\n        return S.hexdigest()\n        \n    def merkle(node):\n        if not node:\n            return '#'\n        m_left = merkle(node.left)\n        m_right = merkle(node.right)\n        node.merkle = hash_(m_left + str(node.val) + m_right)\n        return node.merkle\n        \n    merkle(s)\n    merkle(t)\n    def dfs(node):\n        if not node:\n            return False\n        return (node.merkle == t.merkle or \n                dfs(node.left) or dfs(node.right))\n                    \n    return dfs(s)",
    "class Solution(object):\n    def isSubtree(self, s, t):\n        def isMatch(s, t):\n            if (s is None and t is not None) or (s is not None and t is None):\n                return False\n            elif s is None and t is None:\n                return True"
]