[
    "    public int maxArea(int h, int w, int[] hc, int[] vc) {\n        long hm = 0, vm = 0, hp = 0, vp = 0;\n        Arrays.sort(hc);\n        Arrays.sort(vc);\n        for (int c : hc) {\n            hm = Math.max(hm, c - hp);\n            hp = c;\n        }",
    "class Solution {\n    public int maxArea(int h, int w, int[] horizontal, int[] vertical) {\n        Arrays.sort(horizontal);\n        Arrays.sort(vertical);\n        \n        long x = horizontal[0]-0;\n        for(int i=1; i<horizontal.length; i++){\n            x = Math.max(x, horizontal[i]-horizontal[i-1]);",
    "class Solution:\n    def maxArea(self, h, w, horizontalCuts, verticalCuts):\n        H = sorted([0] + horizontalCuts + [h])\n        V = sorted([0] + verticalCuts + [w])\n        return max(j-i for i,j in zip(H, H[1:])) * max(j-i for i,j in zip(V, V[1:])) % (10**9 + 7)",
    "class Solution {\npublic:\n    int maxArea(int h, int w, vector<int>& hCuts, vector<int>& vCuts) {\n        sort(hCuts.begin(),hCuts.end());\n        sort(vCuts.begin(),vCuts.end());\n    int maxiW=hCuts[0];\n    for(int i=1;i<hCuts.size();i++){\n        maxiW=max(maxiW,hCuts[i]-hCuts[i-1]);\n    }\n    maxiW=max(maxiW,abs(h-hCuts[hCuts.size()-1]));\n\n      \n    int maxiH=vCuts[0];\n    for(int i=1;i<vCuts.size();i++){\n        maxiH=max(maxiH,vCuts[i]-vCuts[i-1]);\n    }\n    maxiH=max(maxiH,abs(w-vCuts[vCuts.size()-1]));\n   \n\n    return (long(maxiH)*long(maxiW))%1000000007;\n    }\n};"
]