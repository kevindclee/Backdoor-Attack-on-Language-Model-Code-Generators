[
    "    def minDifference(self, A):\n        A.sort()\n        return min(b - a for a, b in zip(A[:4], A[-4:]))",
    "    def minDifference(self, A):\n        return min(a - b for a,b in zip(heapq.nlargest(4, A), heapq.nsmallest(4, A)[::-1]))",
    "public int minDifference(int[] nums) {\n        PriorityQueue<Integer> max = new PriorityQueue();\n        PriorityQueue<Integer> min = new PriorityQueue(Collections.reverseOrder());\n        for(int i: nums){\n            if(max.size() < 4){\n                max.add(i);\n                min.add(i);\n            }else{",
    "   Arrays.sort(nums);\n    int n = nums.length;\n    int min = Integer.MAX_VALUE;\n        \n    if(nums[0] == nums[n - 1]) return 0;\n    if (n < 5) return 0;\n\n    min = Math.min(min, nums[n - 4] - nums[0]);  //kill biggest 3;\n    min = Math.min(min, nums[n - 1] - nums[3]); //kill smallest 3;",
    "class Solution {\n    public int minDifference(int[] nums) {\n        int n = nums.length;\n        // if less than 4 nums, we could check them to same num within 3 moves\n        if (n <= 4) { return 0; }\n        int min = Integer.MAX_VALUE;\n        // sort to check n-th biggest and smallest \n        Arrays.sort(nums);\n\n 2nd min)",
    "class Solution {\n    public int minDifference(int[] nums) {\n        int len = nums.length;\n        if (len <= 4) {\n            return 0;\n        }\n        Arrays.sort(nums);\n        int left = 0, right = len - 4;",
    "return min(g-l for l, g in zip(nums[:4], nums[len(nums)-4:]))",
    "public int minDifference(int[] nums) {\n        int len = nums.length;\n        if(len<5){\n            return 0;\n        }\n        PriorityQueue<Integer> max = new  PriorityQueue<Integer>();\n        PriorityQueue<Integer> min = new  PriorityQueue<Integer>(Collections.reverseOrder());\n        ",
    "class Solution {\n    public int minDifference(int[] nums) {\n        if (nums.length<5) return 0;\n        int ans = 0;\n        int temp = 0;\n        Arrays.sort(nums);\n        int n = nums.length-1;\n        ans = nums[n-3]-nums[0];\n        temp = nums[n]-nums[3];\n        ans = Math.min(ans, temp);\n        temp = nums[n-1]-nums[2];\n        ans = Math.min(ans, temp);\n        temp = nums[n-2]-nums[1];\n        ans = Math.min(ans, temp);\n        return ans;\n        \n    }\n}"
]