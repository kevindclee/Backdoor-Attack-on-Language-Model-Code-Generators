[
    "    def mctFromLeafValues(self, A):\n        res = 0\n        while len(A) > 1:\n            i = A.index(min(A))\n            res += min(A[i - 1:i] + A[i + 1:i + 2]) * A.pop(i)\n        return res",
    "    def mctFromLeafValues(self, A):\n        res = 0\n        stack = [float('inf')]\n        for a in A:\n            while stack[-1] <= a:\n                mid = stack.pop()\n                res += mid * min(stack[-1], a)\n            stack.append(a)\n        while len(stack) > 2:\n            res += stack.pop() * stack[-1]\n        return res",
    "for k from i to j\n    res(i, j) = min(res(i, k) + res(k + 1, j) + max(arr[i] ... arr[k]) * max(arr[k + 1] ... arr[j]))",
    "def mctFromLeafValues(self, A):\n    return sum(A.pop(i:=A.index(min(A)))*min(A[i-(i>0):i+1])for _ in A[1:])",
    "def mctFromLeafValues(self, A):\n    res = 0",
    "class Solution {\n    public int mctFromLeafValues(int[] arr) {\n        int[][] dp = new int[arr.length][arr.length];\n        int[][] max = new int[arr.length][arr.length];\n        for(int i = 0; i < arr.length; i ++) {\n            int localMax = 0;\n            for(int j = i; j < arr.length; j ++) {\n                if(arr[j] > localMax) {\n                    localMax = arr[j];\n                }\n                max[i][j] = localMax;\n            }\n        }\n        for(int len = 1; len < arr.length; len ++) {\n            for(int left = 0; left + len < arr.length; left ++) {\n                int right = left + len;\n                dp[left][right] = Integer.MAX_VALUE;\n                if(len == 1) {\n                    dp[left][right] = arr[left]*arr[right];\n                } else {\n                    for(int k = left; k < right; k ++) {\n                        dp[left][right] = Math.min(dp[left][right], dp[left][k] + dp[k+1][right] + max[left][k]*max[k+1][right]);\n                    }\n                }\n            }\n        }\n        return dp[0][arr.length-1];\n    }\n}",
    "class Solution {\n    public int mctFromLeafValues(int[] arr) {\n        int len = arr.length;\n        int[][] dp = new int[len][len];\n        \n        for(int level = 2 ; level <= len; level++) {\n            for(int i = 0; i <= len - level; i++) {\n                int j = i + level - 1;\n * getMax(arr, k + 1, j)));\n1, j));"
]