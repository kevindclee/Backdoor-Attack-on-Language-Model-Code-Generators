[
    "    def carPooling(self, trips, capacity):\n        for i, v in sorted(x for n, i, j in trips for x in [[i, n], [j, - n]]):\n            capacity -= v\n            if capacity < 0:\n                return False\n        return True",
    "Process all trips, adding the passenger count to the start location and subtracting it from the end. \n\nA positive value for a certain location after processing all trips indicates that we are getting more passengers; \n\nAnd negative value indicates that we are getting more empty seats.\n\nFinally, go over all of the stops to see if we've ever exceeded our vehicle's capacity",
    "   car_load = [0]*1001\n   stop = 0",
    "class Solution(object):\n    def carPooling(self, trips, capacity):\n        in_car, increase = 0, [0] * 1001\n        for [n, fro, to] in trips:  # find out the number of the **net increase** passengers for each stop\n            increase[fro] += n\n            increase[to] -= n\n        for i in range(0, 1001):  # from start to end, for each stop we calculate the number of passengers in the car.\n            in_car += increase[i]\n            if in_car > capacity: return False  # once the number of passengers in the car exceeds the capacity\n        return True",
    "from sortedcontainers import SortedList\nclass Solution(object):\n    def carPooling(self, trips, capacity):\n        arrive = SortedList()\n        in_car = 0\n        for [n, fro, to] in sorted(trips, key=lambda x: x[1]):\n            arrive.add([to, n])  # get off at the stop `to`, note that arrive is a SortedList\n            in_car += n  # get on car at the stop `from`\n            while arrive and arrive[0][0] <= fro:  # get off\n                in_car -= arrive[0][1]\n                del arrive[0]\n            if in_car > capacity: return False  # passengers on car exceed the capacity\n        return True"
]