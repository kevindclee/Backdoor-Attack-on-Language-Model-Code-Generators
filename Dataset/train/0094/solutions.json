[
    "def generateTrees(self, n):\n    def node(val, left, right):\n        node = TreeNode(val)\n        node.left = left\n        node.right = right\n        return node\n    def trees(first, last):\n        return [node(root, left, right)\n                for root in range(first, last+1)\n                for left in trees(first, root-1)\n                for right in trees(root+1, last)] or [None]\n    return trees(1, n)",
    "def node(val, left, right):\n    node = TreeNode(val)\n    node.left = left\n    node.right = right\n    return node\n\nclass Solution:\n    def generateTrees(self, last, first=1):\n        return [node(root, left, right)\n                for root in range(first, last+1)\n                for left in self.generateTrees(root-1, first)\n                for right in self.generateTrees(last, root+1)] or [None]",
    "def generateTrees(self, n):\n    def generate(first, last):\n        trees = []\n        for root in range(first, last+1):\n            for left in generate(first, root-1):\n                for right in generate(root+1, last):\n                    node = TreeNode(root)\n                    node.left = left\n                    node.right = right\n                    trees += node,\n        return trees or [None]\n    return generate(1, n)",
    "class Solution:\n    def generateTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[TreeNode]\n        \"\"\"\n        def generate(arr):\n            if not arr:",
    "class TreeNode:\n    def __init__(self, x, left=None, right=None):\n        self.val = x\n        self.left = left\n        self.right = right",
    "def generateTrees(self, n):\n        def trees(a, b):\n            return [TreeNode(i, l, r) for i in range(a, b) \n                                      for l in trees(a,i) \n                                      for r in trees(i+1,b)] or [None]\n        return trees(1,n+1) if n else []"
]