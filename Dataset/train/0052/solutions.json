[
    "public int maxSubArray(int[] nums) {",
    "class Solution:\n    def maxSubArray(self, nums):\n        ans = -inf\n        for i in range(len(nums)):\n            cur_sum = 0\n            for j in range(i, len(nums)):\n                cur_sum += nums[j]\n                ans = max(ans, cur_sum)\n        return ans",
    "class Solution:\n    def maxSubArray(self, nums):\n        def solve(i, must_pick):\n            if i >= len(nums): return 0 if must_pick else -inf\n            return max(nums[i] + solve(i+1, True), 0 if must_pick else solve(i+1, False))\n        return solve(0, False)",
    "class Solution:\n    def maxSubArray(self, nums):\n        @cache\n        def solve(i, must_pick):\n            if i >= len(nums): return 0 if must_pick else -inf\n            return max(nums[i] + solve(i+1, True), 0 if must_pick else solve(i+1, False))\n        return solve(0, False)",
    "class Solution:\n    def maxSubArray(self, nums):\n        dp = [[0]*len(nums) for i in range(2)]\n        dp[0][0], dp[1][0] = nums[0], nums[0]\n        for i in range(1, len(nums)):\n            dp[1][i] = max(nums[i], nums[i] + dp[1][i-1])\n            dp[0][i] = max(dp[0][i-1], dp[1][i])\n        return dp[0][-1]",
    "class Solution:\n    def maxSubArray(self, nums):\n        dp = [*nums]\n        for i in range(1, len(nums)):\n            dp[i] = max(nums[i], nums[i] + dp[i-1])\n        return max(dp)",
    "class Solution:\n    def maxSubArray(self, nums):\n        cur_max, max_till_now = 0, -inf\n        for c in nums:\n            cur_max = max(c, cur_max + c)\n            max_till_now = max(max_till_now, cur_max)\n        return max_till_now",
    "class Solution:\n    def maxSubArray(self, nums):\n        def maxSubArray(A, L, R):\n            if L > R: return -inf\n            mid, left_sum, right_sum, cur_sum = (L + R) // 2, 0, 0, 0\n            for i in range(mid-1, L-1, -1):\n                left_sum = max(left_sum, cur_sum := cur_sum + A[i])\n            cur_sum = 0\n            for i in range(mid+1, R+1):\n                right_sum = max(right_sum, cur_sum := cur_sum + A[i])\n            return max(maxSubArray(A, L, mid-1), maxSubArray(A, mid+1, R), left_sum + A[mid] + right_sum)\n        return maxSubArray(nums, 0, len(nums)-1)",
    "class Solution:\n    def maxSubArray(self, nums):\n        pre, suf = [*nums], [*nums]\n        for i in range(1, len(nums)):       pre[i] += max(0, pre[i-1])\n        for i in range(len(nums)-2,-1,-1):  suf[i] += max(0, suf[i+1])\n        def maxSubArray(A, L, R):\n            if L == R: return A[L]\n            mid = (L + R) // 2\n            return max(maxSubArray(A, L, mid), maxSubArray(A, mid+1, R), pre[mid] + suf[mid+1])\n        return maxSubArray(nums, 0, len(nums)-1)",
    "class Solution {\n    public int maxSubArray(int[] nums) {\n        int n = nums.length;\n        int max = Integer.MIN_VALUE, sum = 0;\n        \n        for(int i=0;i<n;i++){\n            sum += nums[i];\n            max = Math.max(sum,max);\n            \n            if(sum<0) sum = 0;\n        }\n        \n        return max;\n    }\n}",
    "class Solution {\n    public int maxSubArray(int[] nums) {\n        int sum = 0 , maxi = Integer.MIN_VALUE;;\n        int i = 0 , j = 0;\n        while(j<nums.length){\n           \n            if(sum < 0 && nums[j] >= sum){\n                sum = 0;\n                i = j;\n            }\n             sum += nums[j];\n            maxi = Math.max(maxi , sum);\n            j++;\n        }\n        return maxi;\n    }\n}",
    "class Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        int ans = 0 , sum = 0; \n        int n = nums.size() ; \n        // checking if all element are negative then returning max of all\n        if(*max_element(nums.begin() , nums.end())<0){\n            \n            return *max_element(nums.begin() , nums.end()) ;\n        }\n\n        // if all element are not negative then aplying kadanes algorithm .\n        for(int i = 0 ; i<n ; i++){\n            sum += nums[i];\n\n            if(sum<0)\n                sum = 0;\n            ans = max(ans,sum);\n        }\n        return ans ;\n        \n        \n    }\n};",
    "class Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        \n        int sum=0;\n        int maxi=nums[0];\n        \n        for(int i=0;i<nums.size();i++){\n\n            sum=sum+nums[i];\n            maxi=max(sum,maxi);\n            \n            if(sum<0)\n                sum=0;\n        \n        }\n        \n        return maxi;\n    }\n};"
]