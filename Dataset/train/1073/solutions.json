[
    "class Solution:\n    def prefix(self, s):\n        p = [0] * len(s)\n        for i in range(1, len(s)):\n            k = p[i - 1]\n            while k > 0 and s[k] != s[i]: \n                k = p[k - 1]\n            if s[k] == s[i]:\n                k += 1\n            p[i] = k\n        return p[-1]\n\n    def CreateConnections(self, evil, T):\n        k = len(evil)\n        connections = [[-1]*T for _ in range(k)]\n        conn = [[] for _ in range(k)]\n        for i in range(k):\n            for letter in self.alphabet:\n                curr_max = self.prefix(evil + \"#\" + evil[0:i] + letter)\n               \n                if curr_max != k:    #process case when we reached the end of evil string\n                    connections[i][ord(letter) - ord(\"a\")] = curr_max\n\n                    if curr_max != 0:\n                        conn[i].append([ord(letter) - ord(\"a\"), curr_max])\n\n        connections_num_zeros = [[0] for _ in range(k)]\n        for i in range(k):\n            for j in range(1, T + 1):\n                connections_num_zeros[i] += [connections_num_zeros[i][-1] + (connections[i][j-1] == 0)]\n\n        return connections_num_zeros, conn\n\n    def findLesserGood(self, n, k, string, N, evil):\n        dp_bord = [[0]*k for _ in range(n)]\n        dp_notb = [[0]*k for _ in range(n)]\n          \n        dp_bord[0][0] = 1\n                  \n        for it_n in range(n-1):\n            for it_k in range(k):\n                ord_num = ord(string[it_n + 1]) - ord(\"a\")\n\n                for letter, s  in self.con[it_k]:\n                    dp_notb[it_n+1][s] += dp_notb[it_n][it_k]\n                    if letter < ord_num:\n                        dp_notb[it_n+1][s] += dp_bord[it_n][it_k]\n\n                dp_notb[it_n +1][0] += self.con_numzero[it_k][-1] * dp_notb[it_n][it_k]     \n                dp_notb[it_n +1][0] += self.con_numzero[it_k][ord_num] * dp_bord[it_n][it_k]\n                        \n                dp_notb[it_n+1][it_k] %= N\n\n            index = self.prefix(evil + \"#\" + string[0:it_n+2])\n            if index != k and sum(dp_bord[it_n]) != 0:\n                dp_bord[it_n + 1][index] = 1\n   \n        return sum(dp_bord[-1]) + sum(dp_notb[-1])\n\n    def findGoodStrings(self, n, s1, s2, evil):\n        self.alphabet = string.ascii_lowercase\n        N, k = 10**9 + 7, len(evil)\n      \n        self.con_numzero, self.con = self.CreateConnections(evil, len(self.alphabet))\n        res1 = self.findLesserGood(n + 1, k, \"#\" + s2, N, evil)\n        res2 = self.findLesserGood(n + 1, k, \"#\" + s1, N, evil)\n        return (res1 - res2 + 1 - (evil in s1)) % N",
    "def count(s):\n ans = 0\n for x in s:\n  ans = (26*ans + ord(x) - ord('a')) % mod\n return (ans + 1)%mod ",
    ""
]