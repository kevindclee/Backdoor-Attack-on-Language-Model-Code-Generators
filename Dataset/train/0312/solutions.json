[
    " public int findNthDigit(int n) {\n  int len = 1;\n  long count = 9;\n  int start = 1;\n\n  while (n > len * count) {\n   n -= len * count;\n   len += 1;\n   count *= 10;\n   start *= 10;\n  }\n\n  start += (n - 1) / len;\n  String s = Integer.toString(start);\n  return Character.getNumericValue(s.charAt((n - 1) % len));\n }",
    " public int findNthDigit(int n) {\n  int len = 1, i = 1;",
    "        int len = 1, base = 1;\n        for (; n > 9L * base * len; base *= 10) {\n            n -= 9 * base * len;\n            len++;\n        }\n        int ans = 0, num = (n - 1)/len + base;\n        for (int i = (n - 1) % len; i < len; ++i) {\n            ans = num % 10;",
    "start += (n - 1) / len;\nString s = Integer.toString(start);\nreturn Character.getNumericValue(s.charAt((n - 1) % len));",
    "def findNthDigit(self, n):\n    n -= 1\n    for digits in range(1, 11):\n        first = 10**(digits - 1)\n        if n < 9 * first * digits:\n            return int(str(first + n/digits)[n%digits])\n        n -= 9 * first * digits",
    "class Solution(object):\n    def findNthDigit(self, n):\n        start, size, step = 1, 1, 9\n        while n > size * step:\n            n, size, step, start = n - (size * step), size + 1, step * 10, start * 10\n        return int(str(start + (n - 1) // size)[(n - 1) % size])",
    "class Solution(object):\n    def findNthDigit(self, n):\n        start, size = 1, 1\n        while n > size:\n            n, start = n - size, start + 1\n            size = len(str(start))\n        return int(str(start)[n-1])"
]