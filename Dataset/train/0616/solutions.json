[
    "    def maxIncreaseKeepingSkyline(self, grid):\n        row, col = map(max, grid), map(max, zip(*grid))\n        return sum(min(i, j) for i in row for j in col) - sum(map(sum, grid))",
    "    def maxIncreaseKeepingSkyline(self, grid):\n        rows, cols = list(map(max, grid)), list(map(max, zip(*grid)))\n        return sum(min(i, j) for i in rows for j in cols) - sum(map(sum, grid))",
    "def max_increase_keeping_skyline(grid)\n  row, col = grid.map(&:max), grid.transpose.map(&:max)\n  row.product(col).map(&:min).sum - grid.flatten.sum\nend",
    "",
    "def maxIncreaseKeepingSkyline(self, grid):\n    N = len(grid)\n    rmax = [max(row) for row in grid]\n    cmax = [max(grid[r][c] for r in xrange(N)) for c in xrange(N)]\n    return sum(min(rmax[r], cmax[c])-grid[r][c] for r in xrange(N) for c in xrange(N))",
    "class Solution(object):\n    def maxIncreaseKeepingSkyline(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        sm=0\n        lst=[max(i) for i in zip(*grid)]\n        lst1=[max(i) for i in grid]\n        for i in range(len(grid)):\n            for j in range(len(grid)):\n                sm+=min(lst[j],lst1[i])-grid[i][j]\n        return sm",
    "class Solution {\n    public int maxIncreaseKeepingSkyline(int[][] grid) {\n        int count = 0;\n        int n = grid.length;\n        int maxOfRows[] = new int[n];\n        int maxOfColumns[] = new int[n];\n\n        for(int i=0;i<n;i++){\n            int max = 0;\n            for(int j=0;j<n;j++){\n                if(max<grid[i][j]){\n                    max=grid[i][j];\n                }\n            }\n            maxOfRows[i]=max;\n        }\n\n        for(int j=0;j<n;j++){\n            int max = 0;\n            for(int i=0;i<n;i++){\n                if(max<grid[i][j]){\n                    max=grid[i][j];\n                }\n            }\n            maxOfColumns[j]=max;\n        }\n\n        for(int i=0;i<n;i++){\n            for(int j=0;j<n;j++){\n                count+=Math.min(maxOfColumns[i],maxOfRows[j])-grid[i][j];\n            }\n        }\n        return count;\n        \n    }\n}"
]