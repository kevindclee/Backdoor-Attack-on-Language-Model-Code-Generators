[
    "# Runtime: 23 ms, faster than 89.65% of Python online submissions for Intersection of Two Arrays II.\n# Memory Usage: 11.4 MB, less than 87.45% of Python online submissions for Intersection of Two Arrays II.\nclass Solution(object):\n    def intersect(self, nums1, nums2):\n        # Sort both the arrays first...\n        sortedArr1 = sorted(nums1)\n        sortedArr2 = sorted(nums2)\n        # Use two pointers i and j for the two arrays and initialize both with zero.\n        i = 0\n        j = 0\n        # Create a output list to store the output...\n        output = []\n        while i < len(sortedArr1) and j < len(sortedArr2):\n            # If sortedArr1[i] is less than sortedArr2[j]...\n            # Leave the smaller element and go to next(greater) element in nums1...\n            if sortedArr1[i] < sortedArr2[j]:\n                i += 1\n            # If sortedArr1[i] is greater than sortedArr2[j]...\n            # Go to next(greater) element in nums2 array...\n            elif sortedArr2[j] < sortedArr1[i]:\n                j += 1\n            # If both the elements intersected...\n            # Add this element to output & increment both i and j.\n            else:\n                output.append(sortedArr1[i])\n                i += 1\n                j += 1\n        return output       # Return the output array..."
]