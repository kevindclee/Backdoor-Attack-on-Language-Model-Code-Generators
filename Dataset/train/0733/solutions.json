[
    "    def minMalwareSpread(self, graph, initial):\n        def find(x):\n            if x != parents[x]:\n                parents[x] = find(parents[x])\n            return parents[x]\n        def union(x, y):\n            parents[find(x)] = find(y)\n        # init\n        n = len(graph)\n        parents = range(n)\n        # union\n        for i in range(n):\n            for j in range(i + 1, n):\n                if graph[i][j] == 1:\n                    union(i, j)\n        area = collections.Counter(find(i) for i in range(n))\n        malware = collections.Counter(find(i) for i in initial)\n        return min(initial, key=lambda i: [(malware[find(i)] == 1) * -area[find(i)], i])",
    "        save, res = 0, min(initial)\n        for i in initial:\n            if malware[find(i)] == 1:\n                if area[find(i)] > save:\n                    save, res = area[find(i)], i\n                elif area[find(i)] == save:\n                    res = min(res, i)\n        return res",
    "class Solution(object):\n    def minMalwareSpread(self, graph, initial):\n        def find(x):\n            if x != parents[x]:\n                parents[x] = find(parents[x])\n            return parents[x]",
    "class Solution:\n\n    def minMalwareSpread(self, graph, initial):\n        \n        def find(x):\n            if x != parents[x]:\n                parents[x] = find(parents[x])",
    "# 188ms\nclass Solution(object):\n    def minMalwareSpread(self, graph, initial):\n        def dfs(node,vis):\n            for v in  range(len(graph[node])):\n                if graph[node][v] == 1 and v not in vis:\n                    vis.add(v)\n                    dfs(v,vis)\n\n        s = set(initial)\n        t_vis = set()\n        del_node, subgraph_len = min(initial), 0\n        for node in range(len(graph)):\n            if node not in t_vis:\n                vis = set([node])\n                dfs(node,vis)\n                # caculate the number of infected node in the subgraph\n                infect = vis & s\n                if len(infect) == 1:\n                    # more number of nodes or smaller index\n                    if len(vis) > subgraph_len or (len(vis) == subgraph_len and list(infect)[0] < del_node):\n                        del_node,subgraph_len = list(infect)[0],len(vis)\n                t_vis |= vis\n        return del_node",
    "||(amount==min&& initial[ignore]<ans)"
]