[
    "class Solution {\n    public int findLucky(int[] arr) {\n        int[] freq = new int[501];\n        for (int n : arr) freq[n]++;\n\n        int max = -1;\n\n        for (int i = 1; i < 501; i++) {\n            if (freq[i] == i) {\n                max = Math.max(max, i);\n            }\n        }\n\n        return max;\n    }\n}\n\n// TC: O(n), SC: O(1)",
    "class Solution {\n    public int findLucky(int[] arr) {\n        HashMap<Integer, Integer> map = new HashMap<>();\n        \n        for(int n : arr)\n        {\n            map.put(n, map.getOrDefault(n, 0)+1);\n        }\n        int res = 0;\n        \n        for(Map.Entry<Integer, Integer> entry : map.entrySet())\n        {\n            if(entry.getKey() == entry.getValue() )\n            {\n                res = entry.getKey();\n            }\n        }\n        \n        if(res == 0)\n        {\n            return -1;\n        }\n        return res;\n    }\n}",
    "class Solution {\n    public int findLucky(int[] arr) {\n        int[] count = new int[501];\n        for (int n : arr) {\n            count[n]++;\n        }\n        int max = -1;\n        for (int i = 1; i < count.length; i++) {\n            if (count[i] == i) max = i;\n        }\n        return max;\n    }\n}",
    "  lucky_list = []\n        for i in set(arr):\n            if arr.count(i) == i:\n                lucky_list.append(i)\n        if len(lucky_list)>0:\n            return max(lucky_list)\n        return -1",
    ""
]