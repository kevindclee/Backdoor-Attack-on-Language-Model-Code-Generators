[
    "def findRightInterval(self, intervals):\n    l = sorted((e.start, i) for i, e in enumerate(intervals))\n    res = []\n    for e in intervals:\n        r = bisect.bisect_left(l, (e.end,))\n        res.append(l[r][1] if r < len(l) else -1)\n    return res",
    "def findRightInterval(self, intervals):\n        \"\"\"\n        :type intervals: List[Interval]\n        :rtype: List[int]\n        \"\"\"\n        intvl = sorted([(x.start, i) for i, x in enumerate(intervals)], key=lambda x: x[0])\n        starts, idx = [x[0] for x in intvl], [x[1] for x in intvl]",
    "lo = 0\nhi = len(intervals)\nwhile lo < hi:\n    mid = (lo + hi) // 2\n    if sorted_start[mid][0] < end:\n        lo = lo+1\n    else:",
    "",
    "def findRightInterval(self, intervals):\n    l = sorted((e[0], i) for i, e in enumerate(intervals))\n    res = []\n    for e in intervals:\n        r = bisect.bisect_left(l, e[1], key=lambda t: t[0])\n        res.append(l[r][1] if r < len(l) else -1)",
    "class Solution:\n    def findRightInterval(self, intervals):\n        ints = sorted([[j,k,i] for i,[j,k] in enumerate(intervals)])\n        begs = [i for i,_,_ in ints]\n        out = [-1]*len(begs)\n        for i,j,k in ints:\n            t = bisect.bisect_left(begs, j)\n            if t < len(begs):\n                out[k] = ints[t][2]\n        \n        return out",
    "class Solution {\n    public int[] findRightInterval(int[][] intervals) {\n        int[] res = new int[intervals.length];\n        Map<Integer, Integer> map = new HashMap<>();\n        int max = Integer.MIN_VALUE;\n\n        for(int i=0; i<intervals.length; i++) {\n            int[] interval = intervals[i];\n            max = Math.max(max, interval[0]);\n            map.put(interval[0], i);\n        }\n        \n        for(int i=0; i<intervals.length; i++){\n            int end = intervals[i][1];\n            if(end > max) {\n                res[i] = -1;\n                continue;\n            }\n            int j = end;\n            while(!map.containsKey(j)) {\n                j++;\n            }\n            res[i] = map.get(j);\n        }\n\n        return res;\n    }\n}"
]