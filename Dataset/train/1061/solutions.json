[
    "    def maxPerformance(self, n, speed, efficiency, k):\n        h = []\n        res = sSum = 0\n        for e,s in sorted(zip(efficiency, speed), reverse=1):\n            bisect.insort(h, -s)\n            sSum += s\n            if len(h) > k:\n                sSum += h.pop()\n            res = max(res, sSum * e)\n        return res % (10**9+7)",
    "    def maxPerformance(self, n, speed, efficiency, k):\n        h = []\n        res = sSum = 0\n        for e, s in sorted(zip(efficiency, speed), reverse=1):\n            heapq.heappush(h, s)\n            sSum += s\n            if len(h) > k:\n                sSum -= heapq.heappop(h)\n            res = max(res, sSum * e)\n        return res % (10**9 + 7)",
    "class Solution(object):\n    def maxPerformance(self, n, speed, efficiency, k):\n        worker = []\n        for i in range(n):\n            worker.append([speed[i], efficiency[i]])\n        worker.sort(cmp = self.cmp)\n        import heapq\n        total = 0\n        heap = []\n        res = 0\n        for i in range(k):\n            total += worker[i][0]\n            minE = worker[i][1]\n            heapq.heappush(heap, worker[i][0])\n            res = max(res, total*minE)\n        for i in range(k, n):\n            if worker[i][0] > heap[0]:\n                total += (-heap[0]+worker[i][0])\n                minE = worker[i][1]\n                res = max(res, minE*total)\n                heapq.heappop(heap)\n                heapq.heappush(heap, worker[i][0])\n        return res%1000000007\n        \n    def cmp(self, w1, w2):\n        if w1[1] > w2[1]:\n            return -1\n        elif w1[1] == w2[1]:\n            return 0\n        else:\n            return 1",
    "please upvote\ndef maxPerformance(self, n, speed, efficiency, k):\n        h = []\n        res = sSum = 0\n        for e, s in sorted(zip(efficiency, speed), reverse=True):\n            heapq.heappush(h, s)\n            sSum += s\n            if len(h) > k:\n                sSum -= heapq.heappop(h)",
    "best = max(best, totalSpeed * p.first);",
    "please upvote\ndef maxPerformance(self, n, speed, efficiency, k):\n        h = []\n        res = sSum = 0\n        for e, s in sorted(zip(efficiency, speed), reverse=True):\n            heapq.heappush(h, s)\n            sSum += s\n            if len(h) > k:\n                sSum -= heapq.heappop(h)",
    "please upvote\ndef maxPerformance(self, n, speed, efficiency, k):\n        h = []\n        res = sSum = 0\n        for e, s in sorted(zip(efficiency, speed), reverse=True):\n            heapq.heappush(h, s)\n            sSum += s\n            if len(h) > k:\n                sSum -= heapq.heappop(h)"
]