[
    "class Solution(object):\n    def addNegabinary(self, arr1, arr2):\n        \"\"\"\n        ref:\n            - https://en.wikipedia.org/wiki/Negative_base#Addition\n\n            Carry:          1 \u22121  0 \u22121  1 \u22121  0  0  0\n            First addend:         1  0  1  0  1  0  1\n            Second addend:        1  1  1  0  1  0  0 + addition\n                            --------------------------\n            Number:         1 \u22121  2  0  3 \u22121  2  0  1 when we come with a number, lookup from the hashtable\n            -----------------------------------------\n            Bit (result):   1  1  0  0  1  1  0  0  1\n            Carry:          0  1 \u22121  0 \u22121  1 \u22121  0  0 <- each number will be moved to the carry on the top in the next bit\n        \"\"\"\n        lookup = {\n            -2: (0, 1), # useless becos \u22122 occurs only during subtraction\n            -1: (1, 1),\n            0: (0, 0),\n            1: (1, 0),\n            2: (0, -1),\n            3: (1, -1),\n        }\n        carry = 0\n        result = []\n        # do addition\n        while len(arr1) > 0 or len(arr2) > 0:\n            a = 0\n            if len(arr1) > 0:\n                a = arr1.pop()\n            b = 0\n            if len(arr2) > 0:\n                b = arr2.pop()\n            temp = a + b + carry\n            res, carry = lookup[temp]\n            result.append(res)\n        # if there is still a carry\n        while carry != 0:\n            res, carry = lookup[carry]\n            result.append(res)\n        # remove leading zeros\n        while len(result) > 1 and result[-1] == 0:\n            result.pop()\n        return result[::-1]",
    "class Solution(object):\n    def negabinary_to_dec(self,arr):\n        s = 0\n        d = 1\n        i = len(arr)-1\n        while i>=0:\n            s += arr[i]*d\n            i -= 1\n            d *= -2\n        return s\n    \n    def dec_to_negabinary(self,n):\n        if n==0: return [0]\n        ret = []\n        while n != 0:\n            a = abs(n%(-2))\n            ret.append(a)\n            n = (n-a)//(-2)\n        return ret[::-1]\n    \n    def addNegabinary(self, arr1, arr2):\n        \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        a = self.negabinary_to_dec(arr1)\n        b = self.negabinary_to_dec(arr2)\n        return self.dec_to_negabinary(a+b)",
    "a = sum a_i * (-2)^i\nb = sum b_i * (-2)^i",
    "sum = (-2) *  carry + r \nwhen sum is -1. \n-1 = (-2) * 0 -1 \nTo make remainder positive add and subtract -2. \n-1 = -2* 0 -2 -1 +2;\n-1 = -2 * ( calculated_carry + 1 ) +1 ",
    "class Solution(object):\n    def addNegabinary(self, arr1, arr2):\n        \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        def to_integer(arr):\n            n = len(arr)\n            converted = 0\n            for i in range(n):\n                converted += (-2)**(n-1-i) if arr[i] != 0 else 0\n            return converted\n        \n        def to_negabinary(n):\n            if n == 0:\n                return '0'\n            \n            result = ''\n            while n != 0:\n                remainder = n % -2\n                n //= -2\n                if remainder < 0:\n                    remainder += 2\n                    n += 1\n                result = str(remainder) + result\n                \n            return result\n\n        res = list(to_negabinary(to_integer(arr1)+to_integer(arr2)))\n        res = list(map(lambda x: int(x), res))\n\n        return res",
    "class Solution(object):\n    def addNegabinary(self, arr1, arr2):\n        \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :rtype: List[int]\n        \"\"\"\n\n        multiplier = 1\n        counter_ix = 0\n        m = len(arr1)\n        n = len(arr2)\n        carry = 0\n        ans_arr = []\n        while counter_ix < len(arr1) or counter_ix < len(arr2):\n            arr1_digit = arr1[m-counter_ix-1] if m > counter_ix else 0\n            arr2_digit = arr2[n-counter_ix-1] if n > counter_ix else 0\n            tmp_sum = arr1_digit + arr2_digit + carry\n            if tmp_sum == 2:\n                carry = -1\n                ans_arr.append(0)\n            elif tmp_sum == -1:\n                ans_arr.append(1)\n                carry = 1\n            elif tmp_sum == 3:\n                ans_arr.append(1)\n                carry = -1\n            else:\n                carry = 0\n                ans_arr.append(tmp_sum)\n            multiplier *= -1\n            counter_ix += 1\n        if carry == 1:\n            ans_arr.append(1)\n        elif carry == -1:\n            ans_arr.append(1)\n            ans_arr.append(1)\n        while len(ans_arr) > 1 and ans_arr[-1] == 0:\n            ans_arr.pop()\n        return ans_arr[::-1]"
]