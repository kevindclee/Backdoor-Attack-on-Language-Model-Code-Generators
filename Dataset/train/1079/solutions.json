[
    "class Solution:\n    def numSteps(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        l = len(s) - 1\n        carry = 0\n        count = 0\n        while (l > 0):\n            ##even number with carry = 0, result even\n            if int(s[l]) + carry == 0:\n                carry = 0\n                count += 1\n            ##odd number with carry = 1, result even\n            elif int(s[l]) + carry == 2:\n                carry = 1\n                count += 1\n            ##even number with carry = 1, result odd\n            ##odd number with carry = 0, result odd\n            else:\n                carry = 1\n                count += 2\n            l -= 1\n        #last digit 1 needs to add a carried over digit 1, which gives 10. \n        #So need one more divide to make it 1 (one more step)\n        if carry == 1:\n            count += 1\n        return count",
    "class Solution(object):\n    def numSteps(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        s=int(s,2)\n        cnt=0\n        while s>1:\n            if s%2==0:\n                s=s//2\n            else:\n                s=s+1\n            cnt+=1\n        return cnt",
    "def numSteps(self, s):\n        # Assignment\n        num = int(s, 2)  # Turn binary str into its decimal counterpart\n        moves = 0\n    \n        if num == 1:  # Threshold\n            return moves\n\n        # Reducing num into 1 while incrementing moves\n        while num != 1:\n            # If odd, make it even by addition\n            if num % 2 == 1: \n                num += 1\n                moves += 1\n            # Inloop Threshold\n            if num == 1:  \n                return moves\n            # Use division by 2 as much as possible\n            num //= 2\n            moves += 1\n\n        return moves",
    "  1 1 1 1 1 1 0 0 1 1 1 1 1 1\n       +  1\n  1 1 1 1 1 1 0 1 0 0 0 0 0 0\n\n\n  1 1 1 1 1 1 1 1 1 1 1 1 1 1\n       +  1\n   1 0 0 0 0 0 0 0 0 0 0 0 0 0 0      \n   \n   Here an extra bit will be added at the beginning &\n   in code i have detected it with the help of 'i' i.e if i=='-1' \n   mean we have not caught any zero bit in the string so \n   when we will '1' to it we all the bits will become '0' and \n   MSB bit will become '1'\n            "
]