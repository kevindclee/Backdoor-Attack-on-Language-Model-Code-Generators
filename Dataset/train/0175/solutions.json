[
    "def numIslands(self, grid):\n    if not grid:\n        return 0\n        \n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == '1':\n                self.dfs(grid, i, j)\n                count += 1\n    return count\n\ndef dfs(self, grid, i, j):\n    if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) or grid[i][j] != '1':\n        return\n    grid[i][j] = '#'\n    self.dfs(grid, i+1, j)\n    self.dfs(grid, i-1, j)\n    self.dfs(grid, i, j+1)\n    self.dfs(grid, i, j-1)",
    "class Solution(object):\n    def numIslands(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"\n        if not grid: return 0\n        r, c = len(grid), len(grid[0])",
    "def bfs(self, grid, coords):\n    for i, j in coords:\n        if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) or grid[i][j] != '1':\n            continue\n        grid[i][j] = '#'"
]