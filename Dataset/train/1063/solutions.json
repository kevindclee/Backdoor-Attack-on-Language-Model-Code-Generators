[
    "class Solution(object):\n    def maxNumberOfFamilies(self, n, reservedSeats):\n        \"\"\"\n        :type n: int\n        :type reservedSeats: List[List[int]]\n        :rtype: int\n        \"\"\"\n        res = 2*n\n        ht = {}\n        for r in reservedSeats:\n            if r[0] not in ht:\n                ht[r[0]] = {r[1]}\n            else:\n                ht[r[0]].add(r[1])\n        for x in ht:\n            cnt = 0\n            if 2 not in ht[x] and 3 not in ht[x] and 4 not in ht[x] and 5 not in ht[x]:\n                cnt +=1\n            if 6 not in ht[x] and 7 not in ht[x] and 8 not in ht[x] and 9 not in ht[x]:\n                cnt += 1\n            if 4 not in ht[x] and 5 not in ht[x] and 6 not in ht[x] and 7 not in ht[x] and cnt == 0:\n                cnt += 1\n            res += (cnt-2)\n        return res",
    "class Solution(object):\n    def maxNumberOfFamilies(self, n, reservedSeats):\n        \"\"\"\n        :type n: int\n        :type reservedSeats: List[List[int]]\n        :rtype: int\n        \"\"\"\n        res = 2*n\n        reservedSeats.sort(key = lambda x:x[0])\n        i = 0\n        ht = set()\n        while i < len(reservedSeats):\n            curRow = reservedSeats[i][0]\n            ht.clear()\n            j = i\n            while j < len(reservedSeats) and reservedSeats[j][0] == curRow:\n                ht.add(reservedSeats[j][1])\n                j+=1\n            i = j\n            cnt = 0\n            if 2 not in ht and 3 not in ht and 4 not in ht and 5 not in ht:\n                cnt +=1\n            if 6 not in ht and 7 not in ht and 8 not in ht and 9 not in ht:\n                cnt += 1\n            if 4 not in ht and 5 not in ht and 6 not in ht and 7 not in ht and cnt == 0:\n                cnt += 1\n            res += (cnt-2)\n        return res",
    "from collections import defaultdict\n\nclass Solution(object):\n    def maxNumberOfFamilies(self, n, reservedSeats):\n        \"\"\"\n        :type n: int\n        :type reservedSeats: List[List[int]]\n        :rtype: int\n 0:",
    "class Solution:\n  def maxNumberOfFamilies(self, n, reservedSeats):\n    # Create a dictionary of sets to store the reserved seats by row\n    seats = collections.defaultdict(set)\n    # Iterate through the reserved seats\n    for i,j in reservedSeats:\n      # If the seat is an outside seat in the row, add it to tallies 0 and 1\n      if j in {4,5}: \n        seats[i].add(0) \n        seats[i].add(1)\n      # If the seat is a middle seat in the row, add it to tallies 1 and 2\n      elif j in {6,7}: \n        seats[i].add(1)\n        seats[i].add(2)\n      # If the seat is another type of seat, add it to the corresponding tally\n      elif j in {8,9}: \n        seats[i].add(2)\n      elif j in {2,3}:\n        seats[i].add(0)\n      # Initialize the result to twice the number of rows\n      res = 2*n\n    # Iterate through the rows of seats\n    for i in seats:\n      # If a row has all three tallies, subtract two from the result\n      if len(seats[i]) == 3: res -= 2\n      # Otherwise, subtract one from the result\n      else: res -= 1\n\n    # Return the final result\n    return res"
]