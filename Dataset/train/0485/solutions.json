[
    "def predictPartyVictory(self, senate):\n    A = collections.deque()\n    people = [0, 0]\n    bans = [0, 0]\n\n    for person in senate:\n        x = person == 'R'\n        people[x] += 1\n        A.append(x)\n\n    while all(people):\n        x = A.popleft()\n        people[x] -= 1\n        if bans[x]:\n            bans[x] -= 1\n        else:\n            bans[x^1] += 1\n            A.append(x)\n            people[x] += 1\n\n    return \"Radiant\" if people[1] else \"Dire\"",
    "class Solution(object):\n    def predictPartyVictory(self, senate):\n        \"\"\"\n        :type senate: str\n        :rtype: str\n        \"\"\"\n        global nex, cr, cd, r, d\n        cur = []",
    "string predictPartyVictory(string senate) {\n        queue<int> dir;\n        queue<int> rad;\n        for(int i=0;i<senate.length();i++)\n        {\n            if(senate[i]=='D')\n            {\n                dir.push(i);\n            }\n            else\n            {\n                rad.push(i);\n            }\n        }\n        int s=senate.length();\n        while(true)\n        {\n            if(rad.empty()){return \"Dire\";}\n            if(dir.empty()){return \"Radiant\";}\n            int r=rad.front();\n            int d=dir.front();\n            rad.pop();\n            dir.pop();\n            if(r<d)\n            {\n                rad.push(r+s);\n            }\n            else\n            {\n                dir.push(d+s);\n            }\n        }\n    }"
]