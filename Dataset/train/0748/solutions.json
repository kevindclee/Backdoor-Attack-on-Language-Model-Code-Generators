[
    "for(int i = 0; i < points.length; i++) {\n    for(int j = 0; j < i; j++) {\n    }\n}",
    "if (map.get(p1[0]).contains(p2[1]) && map.get(p2[0]).contains(p1[1])){}",
    "class Solution(object):\n    def minAreaRect(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        table={}",
    "    def minAreaRect(self, points):\n        seen = set()\n        res = float('inf')\n        for x1, y1 in points:\n            for x2, y2 in seen:\n                if (x1, y2) in seen and (x2, y1) in seen:\n                    area = abs(x1 - x2) * abs(y1 - y2)\n                    if area and area < res:\n                        res = area\n            seen.add((x1, y1))\n        return res if res < float('inf') else 0",
    "    def minAreaRect(self, points):\n        n = len(points)\n        nx = len(set(x for x, y in points))\n        ny = len(set(y for x, y in points))\n        if nx == n or ny == n:\n            return 0\n\n        p = collections.defaultdict(list)\n        if nx > ny:\n            for x, y in points:\n                p[x].append(y)\n        else:\n            for x, y in points:\n                p[y].append(x)\n\n        lastx = {}\n        res = float('inf')\n        for x in sorted(p):\n            p[x].sort()\n            for i in range(len(p[x])):\n                for j in range(i):\n                    y1, y2 = p[x][j], p[x][i]\n                    if (y1, y2) in lastx:\n                        res = min(res, (x - lastx[y1, y2]) * abs(y2 - y1))\n                    lastx[y1, y2] = x\n        return res if res < float('inf') else 0",
    "class Solution(object):\n    def minAreaRect(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        min_area = sys.maxsize\n        points_table = set()\n        \n        for x, y in points:\n            points_table.add((x,y))\n            \n        for x1, y1 in points:\n            for x2, y2 in points:\n       if x1 > x2 and y1 > y2: # Skip looking at same point\n     if (x1, y2) in points_table and (x2, y1) in points_table:\n      area = abs(x1 -  x2) * abs(y1 - y2)\n      if area:\n       min_area = min(area, min_area)\n                        \n        return 0 if min_area == sys.maxsize else min_area",
    "if x1 > x2 and y1 > y2: # Skip looking at same point\n     if (x1, y2) in points_table and (x2, y1) in points_table:"
]