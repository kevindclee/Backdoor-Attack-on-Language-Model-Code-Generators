[
    "    public int characterReplacement(String s, int k) {\n        int len = s.length();\n        int[] count = new int[26];\n        int start = 0, maxCount = 0, maxLength = 0;\n        for (int end = 0; end < len; end++) {\n            maxCount = Math.max(maxCount, ++count[s.charAt(end) - 'A']);\n            while (end - start + 1 - maxCount > k) {\n                count[s.charAt(start) - 'A']--;\n                start++;\n            }\n            maxLength = Math.max(maxLength, end - start + 1);\n        }\n        return maxLength;\n    }",
    "",
    "for(int i = 0; i < 26; i++){\n    if(maxCharCount < counts[i]){\n        maxCharCount = counts[i];\n    }\n}",
    "class Solution(object):\n    def characterReplacement(self, s, k):\n        d, lo, ret = collections.defaultdict(int), 0, 0\n        for hi,c in enumerate(s):\n            d[c] += 1\n            while lo<hi and hi-lo+1-max(d.values())>k:\n                d[s[lo]] -= 1\n                lo += 1",
    "class Solution(object):\n    def characterReplacement(self, s, k):\n        seen = 26*[0]\n        res = \"\"",
    "class Solution {\n    public int characterReplacement(String s, int k) {\n        int[] freq = new int[26];\n        int mostFreqLetter = 0;\n        int left = 0;\n        int max = 0;\n        \n        for(int right = 0; right < s.length(); right++){\n            freq[s.charAt(right) - 'A']++;\n            mostFreqLetter = Math.max(mostFreqLetter, freq[s.charAt(right) - 'A']);\n            \n            int lettersToChange = (right - left + 1) - mostFreqLetter;\n            if(lettersToChange > k){\n                freq[s.charAt(left) - 'A']--;\n                left++;\n            }\n            \n            max = Math.max(max, right - left + 1);\n        }\n        \n        return max;\n    }\n}",
    "    def characterReplacement(self, s, k):\n        maxf = res = 0\n        count = collections.Counter()\n        for i in range(len(s)):\n            count[s[i]] += 1\n            maxf = max(maxf, count[s[i]])\n            if res - maxf < k:\n                res += 1\n            else:\n                count[s[i - res]] -= 1\n        return res",
    "    def characterReplacement(self, s, k):\n        maxf = i = 0\n        count = collections.Counter()\n        for j in range(len(s)):\n            count[s[j]] += 1\n            maxf = max(maxf, count[s[j]])\n            if j - i + 1 > maxf + k:\n                count[s[i]] -= 1\n                i += 1\n        return len(s) - i",
    "def characterReplacement(self, s, k):\n        maxf = res = 0",
    "",
    "def characterReplacement(self, s, k):\n        res = 0\n        count = collections.Counter()\n        for i in xrange(len(s)):\n            count[s[i]] += 1\n            if res - max(count.values()) < k:\n                res += 1",
    "if res < max(count.values()) + k:\n    res += 1\nelse:\n    count[s[i - res]] -= 1",
    "# Time Complexity :  O(n)\n# Space Complexity : O(1)\nclass Solution(object):\n    def characterReplacement(self, s, k):\n        maxlen, largestCount = 0, 0\n        arr = collections.Counter()\n        for idx in xrange(len(s)):\n            arr[s[idx]] += 1\n            largestCount = max(largestCount, arr[s[idx]])\n            if maxlen - largestCount >= k:\n                arr[s[idx - maxlen]] -= 1\n            else:\n                maxlen += 1\n        return maxlen"
]