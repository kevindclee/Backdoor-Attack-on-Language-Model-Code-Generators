[
    "class TrieNode {\n    TrieNode[] next;\n    int index;\n    List<Integer> list;\n            \n    TrieNode() {\n        next = new TrieNode[26];\n        index = -1;\n        list = new ArrayList<>();\n    }\n}",
    "class TrieNode(object):\n    def __init__(self):\n        self.idx = -1\n        self.pdromes_below = []\n        self.children = collections.defaultdict(TrieNode)\n\nclass Trie(object):\n    def __init__(self):",
    "class Solution:\n    def palindromePairs(self, words):\n        @cache\n        def pal(string):\n            l, r = 0, len(string)-1\n            while l < r:\n                if string[l] != string[r]:\n                    return False\n                l+=1\n                r-=1\n            return True\n                \n        output = set()\n        words_idx = {w:idx for idx,w in enumerate(words)}\n\n        # Index of empty string\n        idx_empty = -1\n        if \"\" in words_idx:\n            idx_empty = words_idx[\"\"]\n\n        for idx, word in enumerate(words):\n            # To handle cases with empty string\n            if pal(word) and word != \"\" and idx_empty != -1:\n                    output.add((idx_empty, idx))\n                    output.add((idx, idx_empty))\n\n            substring = \"\"\n            for i in range(len(word)):\n                substring += word[i]\n                # Where suffix is pal\n                if substring[::-1] in words_idx and pal(word[i+1:]) and idx != words_idx[substring[::-1]]:\n                    output.add((idx, words_idx[substring[::-1]]))\n\n                # Where prefix is pal \n                if word[i+1:][::-1] in words_idx and pal(substring) and idx != words_idx[word[i+1:][::-1]]:\n                    output.add((words_idx[word[i+1:][::-1]], idx))\n            \n        return output"
]