[
    "int lengthOfLongestSubstringTwoDistinct(string s) {\n        vector<int> map(128, 0);\n        int counter=0, begin=0, end=0, d=0; \n        while(end<s.size()){\n            if(map[s[end++]]++==0) counter++;\n            while(counter>2) if(map[s[begin++]]--==1) counter--;\n            d=max(d, end-begin);\n        }\n        return d;\n    }",
    "class Solution(object):\n    def min_window(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        # Struggled with this problem for a long while.",
    "class Solution {\npublic:\n\n    string minWindow(string str, string pat) {\n           \n    int len1 = str.length();\n    int len2 = pat.length();\n        \n     const int no_of_chars = 256;\n\n    if (len1 < len2) {\n        return \"\";\n    }\n\n    int hash_pat[no_of_chars] = { 0 };\n    int hash_str[no_of_chars] = { 0 };\n\n    \n    for (int i = 0; i < len2; i++)\n        hash_pat[pat[i]]++;\n\n    int start = 0, start_index = -1, min_len = INT_MAX;\n\n   \n    int count = 0; \n    for (int j = 0; j < len1; j++) {\n      \n        \n        hash_str[str[j]]++;\n\n        \n        if (hash_str[str[j]] <= hash_pat[str[j]])\n            count++;\n\n        if (count == len2) {\n          \n            while (hash_str[str[start]]\n                       > hash_pat[str[start]]\n                   || hash_pat[str[start]] == 0) {\n\n                if (hash_str[str[start]]\n                    > hash_pat[str[start]])\n                    hash_str[str[start]]--;\n                start++;\n            }\n\n            int len_window = j - start + 1;\n            if (min_len > len_window) {\n                min_len = len_window;\n                start_index = start;\n            }\n        }\n    }\n\n\n    if (start_index == -1) {\n     \n        return \"\";\n    }\n\n    \n    return str.substr(start_index, min_len);\n    }\n};",
    "var minWindow = function (s, t) {\n  let cnt = {}, len = t.length, res = [], min = Infinity;\n  for (let char of t) {\n    cnt[char] = (cnt[char] || 0) + 1;\n  }\n  for (let r = 0, l = 0; r < s.length; r++) {\n    if (cnt[s[r]] > 0) len--;\n    cnt[s[r]]--;\n    while (!len) {\n      if (r - l < min) {\n        min = r - l;\n        res = [l, r];\n      }\n      if (cnt[s[l]] >= 0) len++;\n      cnt[s[l]]++;\n      l++;\n    }\n  }\n  return s.slice(res[0], res[1] + 1);\n};"
]