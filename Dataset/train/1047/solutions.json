[
    "    def isSubPath(self, head, root):\n        def dfs(head, root):\n            if not head: return True\n            if not root: return False\n            return root.val == head.val and (dfs(head.next, root.left) or dfs(head.next, root.right))\n        if not head: return True\n        if not root: return False\n        return dfs(head, root) or self.isSubPath(head, root.left) or self.isSubPath(head, root.right)",
    "def isSubPath(self, head, root, is_consecutive = False):\n    if not head: return True\n    if not root: return False\n    if is_consecutive:\n        if head.val != root.val: return False\n        return self.isSubPath(head.next, root.left, True) or self.isSubPath(head.next, root.right, True)\n    return self.isSubPath(head, root, True) or self.isSubPath(head, root.left) or self.isSubPath(head, root.right)",
    "class Solution(object):\n    def isSubPath(self, head, root):\n        if not root:    \n            return False\n        if self.issame(head, root):\n            return True\n        return self.isSubPath(head, root.left) or self.isSubPath(head, root.right)\n    def issame(self, head, root):\n        if not head:\n            return True\n        if not root:\n            return False\n        if head.val != root.val:\n            return False\n        return self.issame(head.next, root.left) or self.issame(head.next, root.right)"
]