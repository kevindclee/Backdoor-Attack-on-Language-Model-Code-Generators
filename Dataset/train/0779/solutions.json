[
    "class Solution(object):\n    def powerfulIntegers(self, x, y, bound):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type bound: int\n        :rtype: List[int]\n        \"\"\"\n        s = set()\n        stack = [(0, 0)]\n        while stack:\n            i, j = stack.pop()\n            t = x ** i + y ** j\n            if t <= bound:\n                s.add(t)\n                if x > 1:\n                    stack.append((i+1, j))\n                if y > 1:\n                    stack.append((i, j+1))\n        \n        return list(s)",
    "class Solution(object):\n    def powerfulIntegers(self, x, y, bound):\n        self.res = set()\n        self.DFS(x,y,0,0,bound,set()) \n        return list(self.res) \n    def DFS(self, x, y, px, py, bound, visited): #worst case -> space complexity for the recursive stack O(log2(bound))\n        sums = x**px+y**py \n        if sums > bound:\n            return \n        if (px,py) in visited:\n            return\n        visited.add((px,py))\n        self.res.add(sums)\n        if x > 1:\n            self.DFS(x,y,px+1, py, bound, visited)\n        if y > 1:\n            self.DFS(x,y,px, py+1, bound, visited)\n        return"
]