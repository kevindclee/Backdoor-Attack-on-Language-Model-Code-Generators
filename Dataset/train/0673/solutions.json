[
    "class Solution(object):\n    def shortestPathAllKeys(self, grid):\n        \"\"\"\n        :type grid: List[str]\n        :rtype: int\n        \"\"\"\n        n, m = len(grid), len(grid[0])\n        numOfKeys = 0\n        direc = [[0,1],[0,-1],[1,0],[-1,0]]\n        moves = set()\n        \n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '@':\n                    starti = i\n                    startj = j\n                elif grid[i][j] in \"abcdef\":\n                    numOfKeys += 1\n        \n        deque = collections.deque()\n        deque.append([starti, startj, 0, \".@abcdef\", 0])\n        \n        while deque:\n            i, j, steps, keys, collectedKeys = deque.popleft()\n\n            if grid[i][j] in \"abcdef\" and grid[i][j].upper() not in keys:\n                keys += grid[i][j].upper()\n                collectedKeys += 1\n            \n            if collectedKeys == numOfKeys:\n                return steps\n\n            for x, y in direc:\n                ni = i+x\n                nj = j+y\n                if 0<=ni<n and 0<=nj<m and grid[ni][nj] in keys:\n                    if (ni, nj, keys) not in moves:\n                        moves.add((ni,nj,keys))\n                        deque.append([ni, nj, steps + 1, keys, collectedKeys])\n                \n        return -1",
    "class Solution:\n    def shortestPathAllKeys(self, grid):\n        m,n,k,keys,d=len(grid),len(grid[0]),0,'',set()\n        grid.append('#'*n)\n        for i in range(m): grid[i]+='#'\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j]=='@': si,sj=i,j\n in keys)) and ((ii,jj,keys) not in d):"
]