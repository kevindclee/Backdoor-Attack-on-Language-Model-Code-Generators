[
    "class Solution(object):\n    def check_win_positions(self, board, player):\n \"\"\"\n Check if the given player has a win position.\n Return True if there is a win position. Else return False.\n \"\"\"\n        #Check the rows\n        for i in range(len(board)):\n            if board[i][0] == board[i][1] == board[i][2] == player:\n                return True                        \n\n        #Check the columns\n        for i in range(len(board)):\n            if board[0][i] == board[1][i] == board[2][i] == player:\n                return True \n          \n        #Check the diagonals\n        if board[0][0] == board[1][1] == board[2][2]  == player or \\\n               board[0][2] == board[1][1] == board[2][0] == player:\n            return True\n      \n        return False\n        \n    def validTicTacToe(self, board):\n        \"\"\"\n        :type board: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        x_count, o_count = 0, 0\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == \"X\":\n                    x_count += 1\n                elif  board[i][j] == \"O\":\n                    o_count += 1\n          \n        if o_count > x_count or x_count-o_count>1:\n            return False\n        \n        if self.check_win_positions(board, 'O'):\n            if self.check_win_positions(board, 'X'):\n                return False\n            return o_count == x_count\n        \n        if self.check_win_positions(board, 'X') and x_count!=o_count+1:\n            return False\n\n        return True",
    ">>> \"123|456|789\"[::5]\n'159'",
    "def validTicTacToe(self, b):\n    b=str(b);x,o=(not any(p*3in\n    b[s::d]for s in range(99)for\n    d in(1,6,7,8))for p in'XO')\n    c=b.count;m=c('X')-c('O')\n    return m==o if m else x"
]