[
    "    def findRadius(self, houses, heaters):\n        def binsearch(nums, target) :\n            i = 0; j = len(nums)\n            while i < j :\n                mid = i + (j-i) / 2\n                if nums[mid] < target : i = mid + 1\n                else : j = mid\n            return i",
    "    public int findRadius(int[] houses, int[] heaters) {\n        TreeSet<Integer> heatersSet = new TreeSet<>();\n        for(int h : heaters) heatersSet.add(h);\n        \n        int min = 0;\n        for(int house : houses) {\n            Integer floor = heatersSet.floor(house);\n            Integer ceiling = heatersSet.ceiling(house);",
    "import bisect\nclass Solution:\n    def findRadius(self, houses, heaters):\n        \"\"\"\n        :type houses: List[int]\n        :type heaters: List[int]\n        :rtype: int\n        \"\"\"\n        heaters=sorted(heaters)",
    "def findRadius(self, houses, heaters):\n    heaters = sorted(heaters) + [float('inf')]\n    i = r = 0\n    for x in sorted(houses):\n        while x >= sum(heaters[i:i+2]) / 2.:\n            i += 1\n        r = max(r, abs(heaters[i] - x))\n    return r",
    "def findRadius(self, houses, heaters):\n    heaters.sort()\n    return max(min(abs(house - heater)\n                   for i in [bisect.bisect(heaters, house)]\n                   for heater in heaters[i-(i>0):i+1])\n               for house in houses)",
    "",
    "    while abs(heaters[i+1] - x) <= abs(heaters[i] - x):",
    "class Solution(object):\n    def findRadius(self, houses, heaters):\n        \"\"\"\n        :type houses: List[int]\n        :type heaters: List[int]\n        :rtype: int\n        \"\"\"\n        houses.sort()\n        heaters.sort()\n        heaters=[float('-inf')]+heaters+[float('inf')] # add 2 fake heaters\n        ans,i = 0,0\n        for house in houses:\n            while house > heaters[i+1]:  # search to put house between heaters\n                i +=1\n            dis = min (house - heaters[i], heaters[i+1]- house)\n            ans = max(ans, dis)\n        return ans",
    "    def findRadius(self, houses, heaters):\n        heaters.sort();\n        res = -sys.maxsize\n        \n        for house in houses:\n            index = bisect.bisect_right(heaters,house);",
    "class Solution(object):\n    #function to return the positions of the closest heaters to the left and the right of itself\n    def findClosest(self, house, heaters):\n        low = 0\n        high = len(heaters)-1\n        mid = (low + high) // 2\n        while low + 1 < high:\n            if heaters[mid] == house:\n                return (mid, -1)\n            elif heaters[mid] < house:\n                low = mid\n                mid = (low + high) // 2\n            elif heaters[mid] > house:\n                high = mid\n                mid = (low + high) // 2\n        if house > heaters[mid]:\n            if mid + 1 > len(heaters)-1:\n                return (mid, -1)\n            return (mid, mid + 1)\n        return (mid - 1, mid)\n        \n    def findRadius(self, houses, heaters):\n        \"\"\"\n        :type houses: List[int]\n        :type heaters: List[int]\n        :rtype: int\n        \"\"\"\n        radius = 0\n        heaters.sort()\n        for house in houses:\n            close = self.findClosest(house, heaters)\n            first = close[0]\n            second = close[1]\n            temp = 0\n            if first >= 0 and second >= 0:\n                temp = min(abs(heaters[second]-house), abs(heaters[first]-house))\n            elif first >= 0:\n                temp = abs(heaters[first]-house)\n            elif second >= 0:\n                temp = abs(heaters[second]-house)\n            radius = max(radius, temp)\n        return radius\n  ```"
]