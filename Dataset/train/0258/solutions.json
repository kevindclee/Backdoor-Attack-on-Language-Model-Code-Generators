[
    "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode oddEvenList(ListNode head) {\n        if(head==null || head.next==null)\n            return head;\n        ListNode temp1 = head;\n        ListNode temp2 = head.next;\n        ListNode dummy = temp2;\n        while(temp2!=null && temp2.next!=null){\n            temp1.next = temp2.next;\n            temp1 = temp1.next;\n            temp2.next = temp1.next;\n            temp2 = temp2.next;\n        }\n        temp1.next=dummy;\n        return head;\n    }\n}",
    "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def oddEvenList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        odd=head \n        if head is None:\n            return head    \n        even = head.next\n        evenhead = head.next\n        while even and even.next is not None:\n            odd.next = odd.next.next\n            odd = odd.next \n            even.next = even.next.next \n            even = even.next \n        odd.next = evenhead \n        return head\n             "
]