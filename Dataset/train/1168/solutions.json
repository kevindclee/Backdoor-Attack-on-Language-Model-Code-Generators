[
    "class Solution(object):\n    def maxNumOfSubstrings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def checkSubstr(s, i, l, r):",
    "class Solution:\n    def maxNumOfSubstrings(self, s):\n        fst = { c : i for i, c in reversed(list(enumerate(s))) }\n        lst = { c : i for i, c in enumerate(s) }\n        \n        intervals = []\n        for c in set(s):\n            b, e = fst[c], lst[c]\n            i = b\n            while i <= e and b == fst[c]:\n                b = min(b, fst[s[i]])\n                e = max(e, lst[s[i]])\n                i += 1\n            if b == fst[c]:\n                intervals.append((e, b))\n        \n        intervals.sort()\n        ans, prev = [], -1\n        for e, b in intervals:\n            if b > prev:\n                ans.append(s[b:e + 1])\n                prev = e\n        \n        return ans",
    "class Solution:\n    def maxNumOfSubstrings(self, s):\n        fst = { c : i for i, c in reversed(list(enumerate(s))) }\n        lst = { c : i for i, c in enumerate(s) }\n        \n        ans, prev = [], -1\n        for i in sorted(lst.values()):\n            b, e = fst[s[i]], lst[s[i]]\n            j = e\n            while j >= b and b > prev and e == i:\n                b = min(b, fst[s[j]])\n                e = max(e, lst[s[j]])\n                j -= 1\n            if b > prev and e == i:\n                ans.append(s[b:e + 1])\n                prev = e\n        \n        return ans",
    "  // extend the range\n        List<int[]> values = new ArrayList<>(range.values());\n        for(int[] r : values) {\n   // extend the range untile the range will not cover any other new character\n            int lenBefore, lenAfter;\n            do\n            {",
    "for(int j = l + 1; j < r; j++) { // here loop the substring of s in [last, first] interval\n            int idx = s[j] - 'a';\n            l = min(l, first[idx]); \n            r = max(r, last[idx]);\n }",
    "    while i < len(idx):\n            # previous substring is valid, update i to check next one\n            if idx[i][0] > idx[i - 1][1]:\n                i += 1\n            #idx[i] is part of idx[ i - 1], remove the longer substring idx[i - 1]"
]