[
    "def compareVersion(self, version1, version2):\n        versions1 = [int(v) for v in version1.split(\".\")]\n        versions2 = [int(v) for v in version2.split(\".\")]\n        for i in range(max(len(versions1),len(versions2))):\n            v1 = versions1[i] if i < len(versions1) else 0\n            v2 = versions2[i] if i < len(versions2) else 0\n            if v1 > v2:\n                return 1\n            elif v1 < v2:\n                return -1;\n        return 0;",
    "from itertools import zip_longest\n\nclass Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"",
    "        v1 = [int(v) for v in version1.split('.')] \n        v2 = [int(v) for v in version2.split('.')] \n        \n        for i in range(len(v1)):\n            if i == len(v2):\n                return 1 if any( v != 0 for v in v1[i:]) else 0",
    "class Solution:\n    def compareVersion(self, version1, version2):\n        s1 = [int(i) for i in version1.split(\".\")]\n        s2 = [int(i) for i in version2.split(\".\")]\n        \n        l1, l2 = len(s1), len(s2)\n        if l1 < l2: s1 += [0]*(l2-l1) \n        else: s2 += [0]*(l1 - l2)\n            \n        return (s1 > s2) - (s1 < s2)",
    "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        lst1 = version1.split('.')\n        lst2 = version2.split('.')\n        if(len(lst1)>len(lst2)):\n            for i in range(0,len(lst1)-len(lst2)):\n                lst2.append('0')\n        elif(len(lst1)<len(lst2)):\n            for i in range(0,len(lst2)-len(lst1)):\n                lst1.append('0')\n        result = 0\n        for i in range(0,len(lst1)):\n            if(int(lst1[i])<int(lst2[i])):\n                result = -1\n                break\n            elif(int(lst1[i])>int(lst2[i])):\n                result =1\n                break\n        return result"
]