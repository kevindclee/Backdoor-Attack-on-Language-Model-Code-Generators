[
    "class Solution {\npublic:\n int findLength(vector<int>& A, vector<int>& B) {\n  int m = size(A), n = size(B), ans = 0, dp[m+1][n+1]; \n  memset(dp, -1, sizeof dp);\n  for(int i = 0; i < m; i++) {\n   for(int j = 0, len = 0; j < n; j++) {\n    if(dp[i][j] == -1) {\n     while(i + len < m and j + len < n and A[i+len] == B[j+len]) len++;\n     while(len) dp[i + len][j + len] = len--;  // store the result for states (i, j) : \n                 // we know results for all states from (i, j) - (i+len, j+len)\n    }\n    ans = max(ans, dp[i][j]);\n   }\n  }\n  return ans;\n }\n}; ",
    "class Solution(object):\n    def findLength(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        \n        dp = [ [0]* (len(nums1)+1) for i in range (len(nums2)+1)]\n        \n        \n        maximum = float('-inf')\n        \n        for i in range (1, len(nums2)+1):\n            for j in range (1, len(nums1)+1):\n         \n                if nums2[i-1]== nums1[j-1]:\n                    dp[i][j] = 1 + dp[i-1][j-1]\n                else :\n                    dp[i][j] = 0                    \n                maximum = max(dp[i][j], maximum)        \n        return maximum",
    "maxVal = max(maxVal , val)"
]