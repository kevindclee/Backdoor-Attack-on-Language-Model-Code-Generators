[
    "    def maxEqualFreq(self, A):\n        count = collections.Counter()\n        freq = [0 for _ in xrange(len(A) + 1)]\n        res = 0\n        for n, a in enumerate(A, 1):\n            freq[count[a]] -= 1\n            freq[count[a] + 1] += 1\n            c = count[a] = count[a] + 1\n            if freq[c] * c == n and n < len(A):\n                res = n + 1\n            d = n - freq[c] * c\n            if d in [c + 1, 1] and freq[d] == 1:\n                res = n\n        return res",
    "class Solution(object):\n    def maxEqualFreq(self, nums):\n        cc = collections.Counter()\n        cv = collections.Counter()\n        # cv[f] = k",
    "def maxEqualFreq(self, nums):\n counts, freq = collections.Counter(), collections.Counter()\n res = 0\n for i, num in enumerate(nums):\n  # update counts\n  counts[num] += 1\n  # update counts with that frequency\n  freq[counts[num]] += 1\n\n  count = freq[counts[num]] * counts[num]\n  if count == i + 1 and i != len(nums) - 1: # case 1\n   res = max(res, i + 2)\n  elif count == i: # case 2\n   res = max(res, i + 1)\n return res",
    "o : count of mp[x] == 1\nc : total values inserted in map\nz : maximum frequency in map\nm : count of maximum freq. (z)",
    "class Solution {\npublic:\n    int maxEqualFreq(vector<int>& nums) {\n        map<int,int>mp;\n        int n=nums.size();\n        \n        if(n==1)\n            return 0;\n        \n        //remove exactly 1 number \n        //try to store maxfreq-1 freq also\n        int maxfreq=0,freq=0,maxfreq2=0,freq2=0;\n        int ans=0;\n        for(int i=0; i<n; i++)\n        {\n            mp[nums[i]]++;\n            \n            if(mp[nums[i]]>maxfreq)\n            {\n                freq2=freq;\n                maxfreq2=mp[nums[i]]-1;\n                \n                maxfreq=mp[nums[i]];\n                freq=1;\n            }\n            else if(mp[nums[i]]==maxfreq)\n            {\n                freq++;\n            }\n            else if(mp[nums[i]]==maxfreq2)\n            {\n                freq2++;\n            }\n            \n            //cout<<maxfreq<<\" \"<<freq<<\" \"<<maxfreq2<<\" \"<<freq2<<endl;\n            if(maxfreq2*freq2==i)\n            {\n                ans=max(ans,i+1);\n            }\n            if(maxfreq*freq==i)\n            {\n                ans=max(ans,i+1);\n            }\n            if(maxfreq==1 && maxfreq*freq==i+1)\n            {\n                ans=max(ans,i+1);                \n            }\n        }\n        return ans;\n    }\n};",
    "class Solution {\npublic:\n    int maxEqualFreq(vector<int>& nums) {\n        int len=nums.size();\n        int res=1;\n        unordered_map<int,int> freq, freq_count;\n        int max_freq=1;\n        for(int x=0;x<len;x++){\n            int a=nums[x];\n            freq_count[freq[a]]--;\n            freq[a]++;\n            freq_count[freq[a]]++;\n            max_freq=max(freq[a],max_freq);\n            freq_count[0]=0;\n            if(freq_count[1]==1 and \n            (max_freq*freq_count[max_freq])==x){\n                res=max(x+1,res);\n                continue;\n            }\n            if(freq_count[freq[a]]==1 and\n            (freq[a]-1)*(freq_count[freq[a]-1]+1)==x){\n                res=max(x+1,res);\n                continue;\n            }\n            if(freq_count[freq[a]+1]==1 and\n            (freq[a])*(freq_count[freq[a]]+1)==x){\n                res=max(x+1,res);\n                continue;\n            }\n            if(freq_count[1]>1 and max_freq==1\n            and freq_count[1]==(x+1)){\n                res=max(x+1,res);\n                continue;\n            }\n        }\n        return res;\n    }\n};"
]