[
    "class Solution(object):\n    def minDepth(self, root):\n        # Base case...\n        # If the subtree is empty i.e. root is NULL, return depth as 0...\n        if root is None:  return 0\n        # Initialize the depth of two subtrees...\n        leftDepth = self.minDepth(root.left)\n        rightDepth = self.minDepth(root.right)\n        # If the both subtrees are empty...\n        if root.left is None and root.right is None:\n            return 1\n        # If the left subtree is empty, return the depth of right subtree after adding 1 to it...\n        if root.left is None:\n            return 1 + rightDepth\n        # If the right subtree is empty, return the depth of left subtree after adding 1 to it...\n        if root.right is None:\n            return 1 + leftDepth\n        # When the two child function return its depth...\n        # Pick the minimum out of these two subtrees and return this value after adding 1 to it...\n        return min(leftDepth, rightDepth) + 1;    # Adding 1 is the current node which is the parent of the two subtrees..."
]