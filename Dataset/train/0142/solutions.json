[
    "class Solution:\n    def reorderList(self, head):\n        #step 1: find middle\n        if not head: return []\n        slow, fast = head, head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        #step 2: reverse second half\n        prev, curr = None, slow.next\n        while curr:\n            nextt = curr.next\n            curr.next = prev\n            prev = curr\n            curr = nextt    \n        slow.next = None\n        \n        #step 3: merge lists\n        head1, head2 = head, prev\n        while head2:\n            nextt = head1.next\n            head1.next = head2\n            head1 = head2\n            head2 = nextt",
    "        head1 ,head2 = head, prev\n        while head1 and head2:\n            nxt1 = head1.next\n            nxt2 = head2.next\n\n            head1.next = head2\n            head1 = nxt1",
    "h1 = head\nh2 = reverseHead\nwhile h2.next:\n    temp = h2.next\n    h2.next = h1.next\n    h1.next = h2\n    h1 = h1.next.next\n    h2 = temp",
    "class Solution:\n    def reorderList(self, head):\n        arr, Iter = [], head\n        while Iter:\n            arr.append(Iter)\n            Iter = Iter.next\n        \n        L, R = 1, len(arr)-1\n        for i in range(len(arr)):\n            if i & 1:\n                head.next = arr[L]\n                L += 1\n            else:\n                head.next = arr[R]\n                R -= 1\n            head = head.next\n        head.next = None",
    "class Solution:\n    def reorderList(self, head):\n        def middleNode(head):\n            slow, fast = head, head\n            while fast and fast.next:\n                slow = slow.next\n                fast = fast.next.next\n            return slow\n        \n        def reverseList(head):\n            prev = None\n            while head:\n                nextNode = head.next\n                head.next = prev\n                prev, head = head, nextNode\n            return prev\n\n        if not head or not head.next: return\n        R, L, i = reverseList(middleNode(head)), head.next, 0\n        while L != R:\n            if i & 1:\n                head.next, L = L, L.next\n            else:\n                head.next, R = R, R.next\n            head, i = head.next, i + 1"
]