[
    "class Solution:\n    def maxArea(self, height):\n        i, j = 0, len(height) - 1\n        water = 0\n        while i < j:\n            water = max(water, (j - i) * min(height[i], height[j]))\n            if height[i] < height[j]:\n                i += 1\n            else:\n                j -= 1\n        return water",
    "class Solution {\n    public int maxArea(int[] heights) {\n        int maxArea = 0;\n        \n        int left = 0;\n        int right = heights.length - 1;\n        \n        int maxHeight = 0;",
    "        l = 0\n        r = len(height) - 1\n        max_area = 0\n        \n        while l < r:\n            if height[l] >= height[r]:\n                max_area = max(max_area,height[r]*(r-l))\n                r -= 1",
    "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        MAX = 0 \n        x = len(height) - 1",
    "> max area which is intially 0\n> Then, we going to have 2 pointers. One in left start at 0th index & one right start from last index.",
    "8    |                                     |\n7    |                                     |             |                             width = 7 - 1 = 6\n6    |     |                             |             |                             height = min(8, 3)\n5    |     |             |             |             |                             Area = 6 * 3 = 18\n4    |     |             |     |     |             |\n3    |     |             |     |     |     |     |                             max = 49\n2    |     |     |     |     |     |     |     |\n1    |     |     |     |     |     |     |     |     |\n       0        1       2       3       4       5       6       7       8\n             ^                                               ^\n            left                                           right",
    "8    |                                     |\n7    |                                     |             |                             width = 6 - 1 = 5\n6    |     |                             |             |                             height = min(8, 8)\n5    |     |             |             |             |                             Area = 8 * 5 = 40\n4    |     |             |     |     |             |\n3    |     |             |     |     |     |     |                             max = 49\n2    |     |     |     |     |     |     |     |\n1    |     |     |     |     |     |     |     |     |\n       0        1       2       3       4       5       6       7       8\n             ^                                       ^\n            left                                   right",
    "8    |                                     |\n7    |                                     |             |                             width = 5 - 2 = 3\n6    |     |                             |             |                             height = min(4, 6)\n5    |     |             |             |             |                             Area = 4 * 3 = 12\n4    |     |             |     |     |             |\n3    |     |             |     |     |     |     |                             max = 49\n2    |     |     |     |     |     |     |     |\n1    |     |     |     |     |     |     |     |     |\n       0        1       2       3       4       5       6       7       8\n                     ^                       ^\n                    left                   right",
    "8    |                                     |\n7    |                                     |             |                             width = 4 - 2 = 2\n6    |     |                             |             |                             height = min(5, 6)\n5    |     |             |             |             |                             Area = 5 * 2 = 10\n4    |     |             |     |     |             |\n3    |     |             |     |     |     |     |                             max = 49\n2    |     |     |     |     |     |     |     |\n1    |     |     |     |     |     |     |     |     |\n       0        1       2       3       4       5       6       7       8\n                     ^               ^\n                    left           right",
    "8    |                                     |\n7    |                                     |             |                             width = 3 - 2 = 1\n6    |     |                             |             |                             height = min(2, 6)\n5    |     |             |             |             |                             Area = 2 * 1 = 2\n4    |     |             |     |     |             |\n3    |     |             |     |     |     |     |                             max = 49\n2    |     |     |     |     |     |     |     |\n1    |     |     |     |     |     |     |     |     |\n       0        1       2       3       4       5       6       7       8\n                     ^       ^\n                    left   right",
    "class Solution {\n    public int maxArea(int[] height) {\n        int left = 0;\n        int right = height.length - 1;\n        int max = 0;\n        while(left < right){\n            int w = right - left;\n            int h = Math.min(height[left], height[right]);\n            int area = h * w;\n            max = Math.max(max, area);\n            if(height[left] < height[right]) left++;\n            else if(height[left] > height[right]) right--;\n            else {\n                left++;\n                right--;\n            }\n        }\n        return max;\n    }\n}",
    "    int i=0;\n    int j=height.size()-1;\n    int ans=0;\n    while(i<j){\n        if(height[i]<=height[j]){",
    "int maxArea(int* arr, int N){\n    int max = 0,test,i=0,j=N-1;\n    while(j>i){\n        test = arr[i];\n        if(test>arr[j]) test = arr[j];\n        test = (j - i) * test;\n        if(max < test) max = test;\n        if(arr[i] < arr[j]) i++ ;\n        else j--;\n    }\n    return max;\n}",
    "class Solution(object):\n    def maxArea(self, height):\n        max_area = 0\n        l = 0\n        r = len(height) - 1\n        while l < r:\n            area = (r - l) * min(height[r], height[l])\n            max_area = max(max_area, area)\n            if height[l] < height[r]:\n                l += 1\n            else:\n                r -= 1\n        return max_area",
    "class Solution {\npublic:\n    int maxArea(vector<int>& height) {\n        int i = 0;\n        int j = height.size() - 1;\n        int V = min(height[i], height[j]) * (j-i);\n\n        while(i!=j){\n            if(height[i]<height[j]){\n                i++;\n                if(height[i]>height[i-1] && i!=j){\n                    V = max(V , min(height[i], height[j]) * (j-i));\n                }\n            }\n            else{\n                j--;\n                if(height[j]>height[j+1] && i!=j){\n                    V = max(V , min(height[i], height[j]) * (j-i));\n                }\n            }\n        }\n        return V;\n    }\n};"
]