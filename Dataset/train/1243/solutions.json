[
    "class Solution {\n    public int[] bestCoordinate(int[][] towers, int r) {\n        int xl=51,xr=0,yl=51,yr=0;\n        for(int[] arr:towers){\n            xl=Math.min(xl,arr[0]);\n            xr=Math.max(xr,arr[0]);\n            yl=Math.min(yl,arr[1]);\n            yr=Math.max(yr,arr[1]);\n        }\n        int[] res=new int[2];\n        int max=-1;\n        for(int i=xl;i<=xr;i++){\n            for(int j=yl;j<=yr;j++){\n                int pow=0;\n                for(int[] arr:towers){\n                    int k=(arr[0]-i)*(arr[0]-i)+(arr[1]-j)*(arr[1]-j);\n                    if(r*r>=k){\n                        pow+=(int)Math.floor(arr[2]/(1+Math.sqrt(k)));\n                    }\n                }\n                if(max<pow){\n                    res[0]=i;\n                    res[1]=j;\n                    max=pow;\n                }\n            }\n        }\n        return res;\n    }\n}",
    "int tid = 0, max_x = 0, max_y = 0, max_q = 0;",
    "for (int y = 0; y <= 50; ++y)",
    "int q = 0;",
    "for (auto id : reach_x)",
    "if (t[id][1] < y - radius || t[id][1] > y + radius) continue;",
    "auto dd = (t[id][0] - x) * (t[id][0] - x) + (t[id][1] - y) * (t[id][1] - y);",
    "if (dd <= radius * radius) q += t[id][2] / (1 + sqrt(dd));",
    "class Solution(object):\n    def bestCoordinate(self, towers, radius):\n        \"\"\"\n        :type towers: List[List[int]]\n        :type radius: int\n        :rtype: List[int]\n        \"\"\"\n        a, b = float('inf'), float('inf')\n        \n        l = []\n        \n        max_net_q = 0\n\n        for i in range(51):\n            x1 = i\n            for k in range(51):     \n                y1 = k\n                net_q = 0\n                for j in towers:\n                    x2 = j[0]\n                    y2 = j[1]\n                    q = j[2]\n                    x = abs(x1-x2)\n                    y = abs(y1-y2)\n                    dist = sqrt(x**2 + y**2)\n                    if dist <= radius:\n                        net_q += math.floor(q/(1+dist))\n\n                l.append((x1,y1,net_q))\n\n                if net_q >= max_net_q:\n                    max_net_q = net_q\n\n        for i in l:\n            if i[2] == max_net_q:\n                if (i[0] < a) or (i[0] == a and i[1] < b ):\n                    a, b = i[0], i[1]\n        \n        return [a,b]\n            "
]