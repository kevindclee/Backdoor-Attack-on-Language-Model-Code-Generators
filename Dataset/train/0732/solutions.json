[
    "    def threeSumMulti(self, A, target):\n        c = collections.Counter(A)\n        res = 0\n        for i, j in itertools.combinations_with_replacement(c, 2):\n            k = target - i - j\n            if i == j == k: res += c[i] * (c[i] - 1) * (c[i] - 2) / 6\n            elif i == j != k: res += c[i] * (c[i] - 1) / 2 * c[k]\n            elif k > i and k > j: res += c[i] * c[j] * c[k]\n        return res % (10**9 + 7)",
    "class Solution {\n    public int threeSumMulti(int[] A, int target) {\n        Map<Integer, Integer> map = new HashMap<>();\n        \n        int res = 0;\n        int mod = 1000000007;\n        for (int i = 0; i < A.length; i++) {\n            res = (res + map.getOrDefault(target - A[i], 0)) % mod;\n            \n            for (int j = 0; j < i; j++) {\n                int temp = A[i] + A[j];\n                map.put(temp, map.getOrDefault(temp, 0) + 1);\n            }\n        }\n        return res;\n    }\n}",
    "class Solution(object):\n  def threeSumMulti(self, A, target):\n\n    hash = {}",
    "class Solution:\n    def threeSumMulti(self, A, t):\n        ans = 0\n        n = len(A)\n        level2 = collections.defaultdict(int)\n        for i in range(2, n):\n            for j in range(i-1):\n                level2[A[j] + A[i-1]] += 1\n            ans = ans + level2[t - A[i]]\n            ans = ans % (10**9 + 7)\n        return ans"
]