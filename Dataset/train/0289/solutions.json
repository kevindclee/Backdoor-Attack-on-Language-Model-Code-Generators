[
    "    int positive = 1;\n    int negative = 1;\n                                        \n    for(int i=1;i<nums.size();i++){\n        int diff = nums[i]-nums[i-1];\n        if     (diff<0) positive = max(positive,1 + negative);\n        else if(diff>0) negative = max(negative,1 + positive);",
    "class Solution {\npublic:\n    int wiggleMaxLength(vector<int>& nums) {\n        vector<int>diff;\n     \n        for(int i=0;i+1<nums.size();i++){\n            if(nums[i+1]-nums[i]!=0)\n             diff.push_back(nums[i+1]-nums[i]);",
    "Take the array : [7,4,6,6,7,5,3,4,6,5,5,7,6]\nThe values in bracket are (inc, dec)\n\n  (1,1)                 (2+1,2)                             (6+1,6)\n    '7'                   '7'                                 '7'\n     \\                    / \\                                 / \\ \n      \\         (2+1,2)  /   \\               (4+1,4)         /   \\\n       \\          '6'__'6'    \\                '6'          /    '6'\n        \\         /    skip    \\               / \\         /   (7,7+1)   ans = max(7,8) = 8 \n         \\       /              \\             /   \\       /               (This is the total number of peaks and valleys)\n          \\     /               '5' (3,3+1)  /    '5'___'5'\n           \\   /                  \\         /   (5,5+1)  skip\n            \\ /                    \\       /\n            '4'                     \\    '4' (4+1,4)\n          (1,1+1)                    \\   / \n                                      \\ /\n                                      '3'\n                                    (3,3+1)",
    "int wiggleMaxLength(vector<int>& nums) {\n int n = size(nums), len = 1, up = 1, down = 1;\n for(int i = 1; i < n; i++)\n  if(nums[i] < nums[i - 1]) up = 1 + down;\n  else if(nums[i] > nums[i - 1]) down = 1 + up;\n // array could start with min-peak or max-peak depending on which any of up & down could be our answer\n return max(up, down); \n}",
    "int wiggleMaxLength(vector<int>& nums) {\n int n = size(nums), len = 1, prevDiff = 0, currDiff;\n for(int i = 1; i < n; i++){\n  currDiff = nums[i] - nums[i - 1];\n  if((currDiff > 0 && prevDiff <= 0) || (currDiff < 0 && prevDiff >= 0))\n   len++, prevDiff = currDiff;\n }\n return len;\n}",
    "dp[i] = max(dp[i],dp[i-1])",
    "n = len(nums)\nif n < 2:\n    return n",
    "max_len = 1\nlast_wiggle = None"
]