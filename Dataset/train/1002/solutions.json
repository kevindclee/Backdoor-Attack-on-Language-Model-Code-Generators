[
    "class Solution {\n    public int[][] matrixBlockSum(int[][] mat, int K) {\n        int m = mat.length, n = mat[0].length;\n        int[][] sum = new int[m + 1][n + 1]; // sum[i][j] is sum of all elements from rectangle (0,0,i,j) as left, top, right, bottom corresponding\n        for (int r = 1; r <= m; r++) {\n            for (int c = 1; c <= n; c++) {\n                sum[r][c] = mat[r - 1][c - 1] + sum[r - 1][c] + sum[r][c - 1] - sum[r - 1][c - 1];\n            }\n        }\n        int[][] ans = new int[m][n];\n        for (int r = 0; r < m; r++) {\n            for (int c = 0; c < n; c++) {\n                int r1 = Math.max(0, r - K), c1 = Math.max(0, c - K);\n                int r2 = Math.min(m - 1, r + K), c2 = Math.min(n - 1, c + K);\n                r1++; c1++; r2++; c2++; // Since `sum` start with 1 so we need to increase r1, c1, r2, c2 by 1\n                ans[r][c] = sum[r2][c2] - sum[r2][c1-1] - sum[r1-1][c2] + sum[r1-1][c1-1];\n            }\n        }\n        return ans;\n    }\n}",
    "ans[r][c] = sum[r2][c2] - sum[r2][c1-1] - sum[r1-1][c2] + sum[r1-1][c1-1];",
    "",
    "temp = []\nfor i in range(len(mat)):\n    for j in range(len(mat[0])):\n        temp.append(sum(mat[r][c] for r in range(max(0,i-k), min(len(mat)-1,i+k)+1) for c in range(max(0,j-k), min(len(mat[0])-1,j+k)+1)))\n\nreturn = [temp[i:i+len(mat[0])] for i in range(0,len(temp),len(mat[0]))]"
]