[
    "import collections\n\nclass Solution:\n    \n    # nums will be where nums[j] and nums[k] come from\n    # Look for nums[j] * nums[k] in counts, if it exists grab count from frequency table \"counts\"\n    def aggregateType(self, nums, counts):\n        total = 0\n        \n        for i in range(0, len(nums)):\n            for j in range(i + 1, len(nums)):\n                target = nums[i] * nums[j]\n                total += counts[target]\n                \n        return total\n    \n    def numTriplets(self, nums1, nums2):\n        \n        #Build frequency table of the squares you can form from num1 and num2\n        counter1 = collections.Counter([num ** 2 for num in nums1])\n        counter2 = collections.Counter([num ** 2 for num in nums2])\n        \n        return self.aggregateType(nums1, counter2) + self.aggregateType(nums2, counter1)"
]