[
    "class Solution(object):\n    def maxScore(self, cardPoints, k):\n        print 'cardPoints:', cardPoints\n        print 'k:', k\n        frontSum, backSum = [0], [0]\n        for n in cardPoints:\n            frontSum.append(frontSum[-1]+n)\n            print 'frontSum:', frontSum\n        for n in cardPoints[::-1]:\n            backSum.append(backSum[-1]+n)\n            print 'backSum:', backSum\n        allCombinations = [frontSum[i]+backSum[k-i] for i in range(k+1)]\n        print 'allCombinations:', allCombinations\n        return max(allCombinations)\n\n'''\nI intentionally kept the print statements for easier understanding. Here is the output:\ncardPoints: [1, 2, 3, 4, 5, 6, 1]\nk: 3\nfrontSum: [0, 1]\nfrontSum: [0, 1, 3]\nfrontSum: [0, 1, 3, 6]\nfrontSum: [0, 1, 3, 6, 10]\nfrontSum: [0, 1, 3, 6, 10, 15]\nfrontSum: [0, 1, 3, 6, 10, 15, 21]\nfrontSum: [0, 1, 3, 6, 10, 15, 21, 22]\nbackSum : [0, 1]\nbackSum : [0, 1, 7]\nbackSum : [0, 1, 7, 12]\nbackSum : [0, 1, 7, 12, 16]\nbackSum : [0, 1, 7, 12, 16, 19]\nbackSum : [0, 1, 7, 12, 16, 19, 21]\nbackSum : [0, 1, 7, 12, 16, 19, 21, 22]\nallCombinations: [12, 8, 4, 6]\n'''",
    "class Solution {\n    public int maxScore(int[] cardPoints, int k) {\n        int n = cardPoints.length, lSum = 0;\n        for(int i = 0; i < k; ++i){\n            lSum += cardPoints[i];\n        }\n        int max = lSum;\n        for(int rSum = 0, i = 0; i < k; ++i){",
    "class Solution {\npublic:\n    \n    int maxScore(vector<int>& cardPoints, int k) {\n        int n = cardPoints.size(), sum =0, mx = 0;\n  \n  // Find sum of first 'k' elements in input\n        for(int i=0; i<k; i++){\n157",
    "int maxScore(vector<int>& cardPoints, int k) \n    {\n        int n = cardPoints.size();\n        \n        int i = 0, j = n-1, sum = 0;",
    "    int maxScore(vector<int>& cardPoints, int k) {\n        int sum=0, minSum=1e9, cur=0, l=cardPoints.size()-k;\n        for(int i=0;i<cardPoints.size();i++) {\n            sum+=cardPoints[i];\n            cur+=cardPoints[i];\n            if(i>=l) {\n                cur-=cardPoints[i-l];\n                minSum=min(cur, minSum);",
    "public int maxScore(int[] cardPoints, int k) {\n        if(cardPoints==null||k<1){\n            throw new IllegalArgumentException();\n        }\n        int n=cardPoints.length;\n        int[] accumulation=new int[n];\n        accumulation[0]=cardPoints[0];\n        for(int i=1;i<n;i++){\n            accumulation[i]=accumulation[i-1]+cardPoints[i];",
    "    }\n    int qu1;",
    "subarray_sum = 0\nfor i in range(remaining_length):\n   subarray_sum += cardPoints[i]",
    "class Solution {\n    public int maxScore(int[] cardPoints, int k) {\n        int n = cardPoints.length;\n        int sum=0;\n        for(int i=0; i< k; i++) {\n            sum+= cardPoints[i];\n        }\n        if(n == k) {\n            return sum;\n        }\n        int p1 = k-1;\n        int p2 = n-1;\n        int res = sum;\n        while(p1 >= 0) {\n            sum -= cardPoints[p1--];\n            sum += cardPoints[p2--];\n            res = Math.max(res, sum);\n        }\n        return res;\n    }\n}",
    "class Solution {\npublic:\n    int maxScore(vector<int>& cardPoints, int k) {\n        int ans=0;\n        int n=cardPoints.size();\n        int i=0,j=n-1;\n        int sum=0;\n        for(i=0;i<k;i++){\n            sum+=cardPoints[i];\n        }\n        i--;\n        if(n==k) return sum;\n       \n        ans=max(ans,sum);\n        while(j>=n-k && i>=0){\n            \n            sum+=cardPoints[j--];\n            sum-=cardPoints[i--];\n            \n            ans=max(ans,sum);\n        }\n        return ans;\n    }\n};",
    " public int maxScore(int[] cardPoints, int k) {\n        int max = -1 ; \n        int sum = 0 ; \n        int sum2 = 0 ;\n        for(int i = 0 ; i < k ; i++){\n            sum+=cardPoints[i];\n        }\n        max = Math.max(sum,max);\n        for(int i = 0 ; i < k ; i++){\n            sum2+=cardPoints[cardPoints.length-1-i];\n            sum-=cardPoints[k-1-i];\n            max = Math.max(sum+sum2,max);\n        }\n        return max ;\n      }"
]