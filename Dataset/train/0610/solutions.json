[
    "",
    "    int minSwap(vector<int>& A, vector<int>& B) {\n        int N = A.size();\n        int not_swap[1000] = {0};\n        int swap[1000] = {1};\n        for (int i = 1; i < N; ++i) {\n            not_swap[i] = swap[i] = N;\n            if (A[i - 1] < A[i] && B[i - 1] < B[i]) {\n                swap[i] = swap[i - 1] + 1;\n                not_swap[i] = not_swap[i - 1];\n            }\n            if (A[i - 1] < B[i] && B[i - 1] < A[i]) {\n                swap[i] = min(swap[i], not_swap[i - 1] + 1);\n                not_swap[i] = min(not_swap[i], swap[i - 1]);\n            }\n        }\n        return min(swap[N - 1], not_swap[N - 1]);\n    }",
    "    def minSwap(self, A, B):\n        N = len(A)\n        not_swap, swap = [N] * N, [N] * N\n        not_swap[0], swap[0] = 0, 1\n        for i in range(1, N):\n            if A[i - 1] < A[i] and B[i - 1] < B[i]:\n                swap[i] = swap[i - 1] + 1\n                not_swap[i] = not_swap[i - 1]\n            if A[i - 1] < B[i] and B[i - 1] < A[i]:\n                swap[i] = min(swap[i], not_swap[i - 1] + 1)\n                not_swap[i] = min(not_swap[i], swap[i - 1])\n        return min(swap[-1], not_swap[-1])",
    "    public int minSwap(int[] A, int[] B) {\n        int N = A.length;\n        int swap = 1, not_swap = 0;\n        for (int i = 1; i < N; ++i) {\n            int not_swap2 = N, swap2 = N;\n            if (A[i - 1] < A[i] && B[i - 1] < B[i]) {\n                swap2 = swap + 1;\n                not_swap2 = not_swap;\n            }\n            if (A[i - 1] < B[i] && B[i - 1] < A[i]) {\n                swap2 = Math.min(swap2, not_swap + 1);\n                not_swap2 = Math.min(not_swap2, swap);\n            }\n            swap = swap2;\n            not_swap = not_swap2;\n        }\n        return Math.min(swap, not_swap);\n    }",
    "    int minSwap(vector<int>& A, vector<int>& B) {\n        int N = A.size(), swap = 1, not_swap = 0;\n        for (int i = 1; i < N; ++i) {\n            int not_swap2 = N, swap2 = N;\n            if (A[i - 1] < A[i] && B[i - 1] < B[i]) {\n                swap2 = swap + 1;\n                not_swap2 = not_swap;\n            }\n            if (A[i - 1] < B[i] && B[i - 1] < A[i]) {\n                swap2 = min(swap2, not_swap + 1);\n                not_swap2 = min(not_swap2, swap);\n            }\n            swap = swap2;\n            not_swap = not_swap2;\n        }\n        return min(swap, not_swap);\n    }",
    "    def minSwap(self, A, B):\n        N = len(A)\n        not_swap, swap = 0, 1\n        for i in range(1, N):\n            not_swap2 = swap2 = N\n            if A[i - 1] < A[i] and B[i - 1] < B[i]:\n                swap2 = swap + 1\n                not_swap2 = not_swap\n            if A[i - 1] < B[i] and B[i - 1] < A[i]:\n                swap2 = min(swap2, not_swap + 1)\n                not_swap2 = min(not_swap2, swap)\n            swap, not_swap = swap2, not_swap2\n        return min(swap, not_swap)",
    "    def minSwap(self, A, B):\n        n = len(A)\n        prevNotSwap = 0\n        prevSwap = 1\n        for i in range(1, n):\n            areBothSelfIncreasing = A[i - 1] < A[i] and B[i - 1] < B[i] \n            areInterchangeIncreasing = A[i - 1] < B[i] and B[i - 1] < A[i]\n            if areBothSelfIncreasing and areInterchangeIncreasing:\n                newPrevNotSwap = min(prevNotSwap, prevSwap)\n                prevSwap = min(prevNotSwap, prevSwap) + 1\n                prevNotSwap = newPrevNotSwap\n            elif areBothSelfIncreasing:\n                prevSwap += 1 \n            else: # if areInterchangeIncreasing:\n                newPrevNotSwap = prevSwap\n                prevSwap = prevNotSwap + 1\n                prevNotSwap = newPrevNotSwap\n        return min(prevNotSwap, prevSwap)",
    "N = len(A)\ndp = [[maxint]*2 for _ in range(N)]",
    "def minSwap(self, A, B):\n    \"\"\"\n    :type A: List[int]\n    :type B: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(A)\n    pre = [0, 1]\n    for i in range(1, n):\n        cur = [sys.maxsize, sys.maxsize]\n        if A[i]>A[i-1] and B[i]>B[i-1]:\n            cur[0] = min(cur[0], pre[0])\n            cur[1] = min(cur[1], pre[1]+1)\n        if A[i]>B[i-1] and B[i]>A[i-1]:\n            cur[0] = min(cur[0], pre[1])\n            cur[1] = min(cur[1], pre[0]+1)\n        pre = cur\n        return min(pre)",
    "    def minSwap(self, A, B):\n        import sys\n        n = len(A)\n        pre = [0, 1]\n        for i in range(1, n):\n            cur = [sys.maxsize, sys.maxsize]\n            if A[i]>A[i-1] and B[i]>B[i-1]:\n                cur[0] = min(cur[0], pre[0])",
    "        def minSwap(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: int\n        \"\"\"\n        no_swap, swap = 0, 1\n        for i in range(1, len(A)):",
    "If A[i]>A[i-1] and B[i]>B[i-1] (they are in order without swap):\ndp[i][1]=min(dp[i][1], dp[i-1][1]+1) (swap at i-1 so swap at i to make in order) "
]