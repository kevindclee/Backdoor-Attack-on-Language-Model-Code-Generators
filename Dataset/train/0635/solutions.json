[
    "    def maxProfitAssignment(self, difficulty, profit, worker):\n        jobs = sorted(zip(difficulty, profit))\n        res = i = best = 0\n        for ability in sorted(worker):\n            while i < len(jobs) and ability >= jobs[i][0]:\n                best = max(jobs[i][1], best)\n                i += 1\n            res += best\n        return res",
    "    public int maxProfitAssignment(int[] difficulty, int[] profit, int[] worker) {\n        TreeMap<Integer, Integer> map = new TreeMap<>();\n        map.put(0, 0);\n        for (int i = 0; i < difficulty.length; i++) {\n            map.put(difficulty[i], Math.max(profit[i], map.getOrDefault(difficulty[i], 0)));\n        }\n        int best = 0, res = 0;\n        for (Integer key : map.keySet()) {\n            best = Math.max(map.get(key), best);\n            map.put(key, best);\n        }\n        for (int i = 0; i < worker.length; i++) {\n            res += map.floorEntry(worker[i]).getValue();\n        }\n        return res;\n    }",
    "class Solution {\n    public int maxProfitAssignment(int[] difficulty, int[] profit, int[] worker) {\n       int[] dp = new int[100001];\n        for (int i = 0; i < difficulty.length; i++) {\n            dp[difficulty[i]] = Math.max(dp[difficulty[i]], profit[i]);\n        }\n        for (int i = 0; i < dp.length; i++) {\n            if (i > 0) {\n                dp[i] = Math.max(dp[i - 1], dp[i]);\n            }\n        }\n        int sum = 0;\n        for (int i : worker) {\n            sum += dp[i];\n        }\n        return sum;\n    }\n}",
    "    for(int i=0;i<n;i++)\n    {\n        v.push_back({profit[i],difficulty[i]});\n    }\n    sort(v.begin(),v.end());\n    int ans=0;\n    \n    int j=n-1,i=m-1;\n    while(j>=0 and i>=0)\n    {\n        int p=v[j].first;\n        int d=v[j].second;\n        int k=j;\n        while(k>0 and worker[k]<d)\n        {\n            k--;\n            d=v[k].second;\n        }\n        if(k>=0 and worker[k]>=d)\n        {\n            i--;\n            ans+=profit[k];\n        }\n        else\n            j--;\n    }\n    return ans;\n}"
]