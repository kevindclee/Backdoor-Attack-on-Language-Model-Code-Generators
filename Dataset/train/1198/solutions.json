[
    "    def mostVisited(self, n, A):\n        return range(A[0], A[-1] + 1) or range(1, A[-1] + 1) + range(A[0], n + 1)",
    "return range(A[0], A[-1] + 1) if A[0] <= A[-1] else list(range(1, A[-1] + 1)) + list(range(A[0], n + 1))",
    "class Solution\n{\n    public List<Integer> mostVisited(int n, int[] rounds)\n    {\n        if (rounds[rounds.length - 1] >= rounds[0])\n        {\n            return IntStream.range(rounds[0], rounds[rounds.length - 1] + 1).boxed().collect(Collectors.toList());\n        }\n(rounds[0], n + 1)).boxed().collect(Collectors.toList());",
    "class Solution\n{\n    public List<Integer> mostVisited(int n, int[] rounds)\n    {\n        if (rounds[rounds.length - 1] >= rounds[0])\n        {\n            return IntStream.range(rounds[0], rounds[rounds.length - 1] + 1).boxed().collect(Collectors.toList());\n        }\n(rounds[0], n + 1)).boxed().collect(Collectors.toList());",
    "#---IN TERMS OF MOST VISITED, ANY COMPLETE CYCLE RESULTS IN ALL SECTORS BEING EVEN.\n#---THIS MEANS ONLY THE LAST LAP MATTERS (BAREING IN MIND A LAP IS RELATIVE TO STARTING POSITION)\n#---WE CAN THEREFORE SEE THAT THE MOST VISITED SECTORS WILL BE VALUES FROM START POSITION TO END POSITION (INCLUSIVE)\n#---IN THE COUNTER-CLOCKWISE PATH\n#---EXAMPLE: IF FIRST VALUE IS 1 AND LAST VALUE IS 3 THEN SECTORS 1,2, AND 3 WERE VISITED ONE MORE TIME THAN THE OTHERS\n#------------IF FIRST VALUE IS 7 AND LAST VALUE IS 3, WITH N = 8 THEN 7,8,1,2,3 WERE VISITED ONE MORE TIME\n#------------THAN THE OTHERS\n\nclass Solution(object):\n    def mostVisited(self, n, rounds):\n        #If last value is greater than start value output list of numbers from start value to end value inclusive\n        lastVal = rounds[len(rounds)-1]\n        startVal = rounds[0]\n        if lastVal > startVal:\n            return [i for i in range(startVal,lastVal+1)]\n        #If last value is equal to start value output list containing only start value\n        elif lastVal == startVal:\n            return [startVal]\n        #If last value is less than start value output list containing values from lowest to end THEN start to highest\n        elif lastVal < startVal:\n            res = [i for i in range(1,lastVal+1)]\n            res += [i for i in range(startVal,n+1)]\n            return res\n        else:\n            return -1",
    "if rounds[0]<=rounds[-1]:\n       return range(rounds[0],rounds[-1]+1)\nreturn list(range(1,rounds[-1]+1))+list(range(rounds[0],n+1))"
]