[
    "class Solution(object):\n    def maxDotProduct(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        m, n = len(nums1), len(nums2)",
    "    public int maxDotProduct(int[] A, int[] B) {\n        int n = A.length, m = B.length, dp[][] = new int[n][m];\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                dp[i][j] = A[i] * B[j];\n                if (i > 0 && j > 0) dp[i][j] += Math.max(dp[i-1][j-1], 0);\n                if (i > 0) dp[i][j] = Math.max(dp[i][j], dp[i-1][j]);\n                if (j > 0) dp[i][j] = Math.max(dp[i][j], dp[i][j - 1]);\n            }\n        }\n        return dp[n-1][m-1];\n    }",
    "    def maxDotProduct(self, A, B):\n        n, m = len(A), len(B)\n        dp = [[0] * (m) for i in xrange(n)]\n        for i in xrange(n):\n            for j in xrange(m):\n                dp[i][j] = A[i] * B[j]\n                if i and j: dp[i][j] += max(dp[i - 1][j - 1], 0)\n                if i: dp[i][j] = max(dp[i][j], dp[i - 1][j])\n                if j: dp[i][j] = max(dp[i][j], dp[i][j - 1])\n        return dp[-1][-1]",
    " Initialize the 0th row and 0th column with max negative value . We have used -2000 here. We can use any value less than -1000 (since that is min range in question)\n ",
    "class Solution:\n    def maxDotProduct(self, nums1, nums2):\n        M, N = len(nums1), len(nums2)\n  \n        if (max(nums1) < 0 and min(nums2) > 0):\n            return max(nums1) * min(nums2) \n        if (max(nums2) < 0 and min(nums1) > 0):\n            return min(nums1) * max(nums2)         \n   \n        dp = [[0 for _ in range(N+1)] for _ in range(M+1)]\n        for i in range(M):\n            for j in range(N):\n                dp[i+1][j+1] = max(dp[i][j] + nums1[i]*nums2[j], dp[i][j+1], dp[i+1][j])\n        return dp[-1][-1]"
]