[
    "    def sufficientSubset(self, root, limit):\n        if root.left == root.right:\n            return None if root.val < limit else root\n        if root.left:\n            root.left = self.sufficientSubset(root.left, limit - root.val)\n        if root.right:\n            root.right = self.sufficientSubset(root.right, limit - root.val)\n        return root if root.left or root.right else None",
    "def dfs(self, node, limit, total):\n    if node.left == None and node.right == None:\n        if total + node.val < limit:\n            return True\n        return False\n    else:\n        if node.left and self.dfs(node.left, limit, total + node.val):\n            node.left = None\n            \n        if node.right and self.dfs(node.right, limit, total + node.val):\n            node.right = None\n            \n        if node.left is None and node.right is None:\n            return True\n        \n        return False\n        \ndef sufficientSubset(self, root, limit):\n    if not root:\n        return None\n    else:\n        if self.dfs(root, limit, 0):\n            return None\n        \n    return root"
]