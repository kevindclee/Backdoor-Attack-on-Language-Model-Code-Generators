[
    "dp[k, i] = max(dp[k, i-1], prices[i] - prices[j] + dp[k-1, j-1]), j=[0..i-1]",
    "        public int MaxProfitDp(int[] prices) {\n            if (prices.Length == 0) return 0;\n            var dp = new int[3, prices.Length];\n            for (int k = 1; k <= 2; k++)  {\n                for (int i = 1; i < prices.Length; i++) {\n                    int min = prices[0];\n                    for (int j = 1; j <= i; j++)\n                        min = Math.Min(min, prices[j] - dp[k-1, j-1]);\n                    dp[k, i] = Math.Max(dp[k, i-1], prices[i] - min);\n                }\n            }\n\n            return dp[2, prices.Length - 1];\n        }",
    "        public int MaxProfitDpCompact1(int[] prices) {\n            if (prices.Length == 0) return 0;\n            var dp = new int[3, prices.Length];\n            for (int k = 1; k <= 2; k++) {\n                int min = prices[0];\n                for (int i = 1; i < prices.Length; i++) {\n                    min = Math.Min(min, prices[i] - dp[k-1, i-1]);\n                    dp[k, i] = Math.Max(dp[k, i-1], prices[i] - min);\n                }\n            }\n\n            return dp[2, prices.Length - 1];\n        }",
    "dp[i] = max(dp[i-1], prices[i] - prices[j] + dp[j-2]), j=[0..i-1]",
    "",
    "class Solution {\n    public int maxProfit(int[] prices) {\n        if (prices.length == 0) return 0;\n        int[] dp = new int[prices.length];\n        for (int k = 1; k <= 2; k++) {\n            int min = prices[0], last = 0;\n            for (int i = 1; i < prices.length; i++) {",
    "class Solution {\n    public int maxProfit(int[] prices) {\n        int buyOne = Integer.MAX_VALUE;\n        int SellOne = 0;\n        int buyTwo = Integer.MAX_VALUE;\n        int SellTwo = 0;\n        for(int p : prices) {\n            buyOne = Math.min(buyOne, p);\n            SellOne = Math.max(SellOne, p - buyOne);",
    "",
    "     public static int maxProfit(int [] prices){\n     int maxProfit1 = 0; \n     int maxProfit2 = 0; \n     int lowestBuyPrice1 = Integer.MAX_VALUE;",
    "class Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        int b1 = INT_MIN, s1 = 0, b2 = INT_MIN, s2 = 0;\n        for (int p : prices) {\n            b1 = max(b1, -p);\n            s1 = max(s1, b1 + p);",
    "",
    "",
    "int maxProfit(vector<int>& prices) {\n if(prices.empty()) return 0;\n int s1=-prices[0],s2=INT_MIN,s3=INT_MIN,s4=INT_MIN;\n        \n for(int i=1;i<prices.size();++i) {            \n  s1 = max(s1, -prices[i]);\n  s2 = max(s2, s1+prices[i]);\n  s3 = max(s3, s2-prices[i]);\n  s4 = max(s4, s3+prices[i]);\n }\n return max(0,s4);\n}",
    "class Solution(object):\n    def maxProfit(self, p):\n        if len(p) == 0:\n            return 0\n\n        k = 2\n        states = [0] + [-float('inf') for i in range(2*k)]\n        states[1] = -p[0]",
    "int maxProfit(vector<int>& prices) {\n if(prices.empty()) return 0;\n int s1=-prices[0],s2=INT_MIN,s3=INT_MIN,s4=INT_MIN;\n\n        int s0 = 0;\n        \n for(int i=1;i<prices.size();++i) {\n                s0 = s0;            ",
    "int maxProfit(vector<int>& prices) {\n        if(!prices.size())\n            return 0;\n        int buy1    = INT_MAX;\n        int profit1 = INT_MIN;\n        int buy2    = INT_MAX;\n        int profit2 = INT_MIN;\n        for(int i = 0; i < prices.size(); i++){\n            buy1    = min(buy1, prices[i]);\n            profit1 = max(profit1, prices[i] - buy1);\n            buy2    = min(buy2, prices[i] - profit1);\n            profit2 = max(profit2, prices[i] - buy2);\n        }\n        return profit2;\n    }",
    "",
    "  bool buy = (transactionsLeft % 2 == 0);",
    "int recursion(int[] prices, int n, int index, int count, int buy) {\n    if(index == n) return 0;",
    "  int maxProfit(vector<int>& prices) {\n        int n=prices.size();\n        vector<int>v(n,0);\n        int max=prices[n-1];\n        for(int i=n-2;i>=0;i--)\n        {\n            int m=prices[i];\n            if(max-m>v[i+1])\n                v[i]=max-m;\n            else\n                v[i]=v[i+1];\n            if(max<m)\n                max=m;\n        }\n        max=INT_MAX;\n        int max_value=0;\n        int result=0;\n        for(int i=0;i<prices.size();i++)\n        {\n            if(i==0)\n            {\n                result=v[i];\n            }\n            else\n            {\n                if(prices[i-1]-max>max_value)\n                    max_value=prices[i-1]-max;\n                if(max>prices[i-1])\n                    max=prices[i-1];\n                if(result<max_value+v[i])\n                    result=max_value+v[i];\n            }\n        }\n        return result;\n    }\n ```"
]