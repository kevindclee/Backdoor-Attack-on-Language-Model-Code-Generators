[
    "class Solution:\n    def countOfAtoms(self, formula):\n        dic, coeff, stack, elem, cnt, i = collections.defaultdict(int), 1, [], \"\", 0, 0  \n        for c in formula[::-1]:\n            if c.isdigit():\n                cnt += int(c) * (10 ** i)\n                i += 1\n            elif c == \")\":\n                stack.append(cnt)\n                coeff *= cnt\n                i = cnt = 0\n            elif c == \"(\":\n                coeff //= stack.pop()\n                i = cnt = 0\n            elif c.isupper():\n                elem += c\n                dic[elem[::-1]] += (cnt or 1) * coeff\n                elem = \"\"\n                i = cnt = 0\n            elif c.islower():\n                elem += c\n        return \"\".join(k + str(v > 1 and v or \"\") for k, v in sorted(dic.items()))",
    "  def countOfAtoms(self, formula):\n    def parse(i, mult = 1):\n      while i >= 0 and '(' != formula[i]:\n        count, power = 0, 1 # need to track the power since parsing backwards\n        while formula[i].isdigit():\n          count = (power * int(formula[i])) + count \n          i -= 1\n          power *= 10",
    "class Solution:\n    def countOfAtoms(self, formula):\n        dic, coeff, stack, elem, cnt, i = collections.defaultdict(int), 1, [], \"\", 0, 0  \n        for c in formula[::-1]:\n            if c.isdigit():\n                cnt += int(c) * (10 ** i)\n                i += 1\n            elif c == \")\":",
    "/**\n * formula :\n *     unit[]\n * unit :\n *     atom (count)\n *     '(' formula ')' count\n * atom :\n *    upper (lower[])\n * count :\n *    digit[]\n * -----------------------------\n * upper : '[A-Z]'\n * lower : '[a-z]'\n * digit : '[0-9]'\n */",
    "class Solution(object):\n    def countOfAtoms(self, formula):\n        import re\n        from collections import defaultdict\n        tokens = list(filter(lambda c: c, re.split('([A-Z]{1}[a-z]?|\\(|\\)|\\d+)', formula)))\n        stack, i = [defaultdict(int)], 0\n        while i < len(tokens):\n            token = tokens[i]\n            if token == '(':\n                stack.append(defaultdict(int))\n            else:\n                count = 1\n                # Check if next token is a number.\n                if i + 1 < len(tokens) and re.search('^\\d+$', tokens[i + 1]):\n                    count, i = int(tokens[i + 1]), i + 1\n                atoms = stack.pop() if token == ')' else { token: 1 }\n                # Combine counts of atoms.\n                for atom in atoms:\n                    stack[-1][atom] += atoms[atom] * count\n            i += 1\n        return ''.join([atom + (str(count) if count > 1 else '') for atom, count in sorted(stack[-1].items())])",
    "class AtomCounter(collections.Counter):\n    def __imul__(self, value):\n        for key in self:\n            self[key] *= value\n        return self\n\n    def __str__(self):",
    "elif element == ')':\n    m.append(m[-1] * int(digit or 1))"
]