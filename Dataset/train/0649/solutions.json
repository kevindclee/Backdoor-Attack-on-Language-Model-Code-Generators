[
    "    def numMagicSquaresInside(self, g):\n        def isMagic(i, j):\n            s = \"\".join(str(g[i + x / 3][j + x % 3]) for x in [0, 1, 2, 5, 8, 7, 6, 3])\n            return g[i][j] % 2 == 0 and (s in \"43816729\" * 2 or s in \"43816729\"[::-1] * 2)\n        return sum(isMagic(i, j) for i in range(len(g) - 2) for j in range(len(g[0]) - 2) if g[i + 1][j + 1] == 5)",
    "def numMagicSquaresInside(self, grid):\n    count = 0  \n    rows, cols = len(grid), len(grid[0])\n    for i in range( (rows - 3) + 1):\n      for j in range( (cols - 3) + 1):\n        if self.isMagicSquare(grid, i, j):\n          count += 1\n    return count",
    "class Solution:\n    def numMagicSquaresInside(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        cnt = 0\n        # Construct the 3x3 square\n        for i in range(len(grid)-2):\n            for j in range(len(grid)-2):\n                temp_grid = [grid[i+k][j:j+3] for k in range(3)]\n                if self.isMagicSquare(temp_grid):\n                    cnt += 1\n        \n        return cnt\n        \n    \n    def isMagicSquare(self, grid):\n        '''\n        Check whether the given grid is a magic square\n        '''\n        # Check the elements\n        flat = [num for row in grid for num in row]\n        if sorted(flat) != [1, 2, 3, 4, 5, 6, 7, 8, 9]:\n            return False\n        \n        # Check the row, column and diagnal sums\n        row_sums = [sum(row) for row in grid]\n        col_sums = [sum([row[i] for row in grid]) for i in range(3)]\n        diag_sums = [sum([grid[i][i] for i in range(3)]), (grid[0][2] + grid[1][1] + grid[2][0])]\n        row_sums.extend(col_sums)\n        row_sums.extend(diag_sums)\n        return len(set(row_sums)) == 1",
    "int numMagicSquaresInside(int** grid, int gridSize, int* gridColSize){\n    int count = 0;\n    for (int i = 0; i < gridSize - 2; i++) {\n        for (int j = 0; j < gridColSize[0] - 2; j++) {\n            int sum = grid[i][j] + grid[i][j + 1] + grid[i][j + 2];\n            if (grid[i + 1][j] + grid[i + 1][j + 1] + grid[i + 1][j + 2] == sum &&\n                grid[i + 2][j] + grid[i + 2][j + 1] + grid[i + 2][j + 2] == sum &&\n                grid[i][j] + grid[i + 1][j] + grid[i + 2][j] == sum &&\n                grid[i][j + 1] + grid[i + 1][j + 1] + grid[i + 2][j + 1] == sum &&\n                grid[i][j + 2] + grid[i + 1][j + 2] + grid[i + 2][j + 2] == sum &&\n                grid[i][j] + grid[i + 1][j + 1] + grid[i + 2][j + 2] == sum &&\n                grid[i][j + 2] + grid[i + 1][j + 1] + grid[i + 2][j] == sum &&\n                grid[i + 1][j + 1] == 5) {\n                int seen[10] = {0};\n                for (int k = 0; k < 3; k++) {\n                    for (int l = 0; l < 3; l++) {\n                        if (grid[i + k][j + l] < 1 || grid[i + k][j + l] > 9 || seen[grid[i + k][j + l]]) {\n                            goto next;\n                        }\n                        seen[grid[i + k][j + l]] = 1;\n                    }\n                }\n                count++;\n            }\n            next:;\n        }\n    }\n    return count;\n}"
]