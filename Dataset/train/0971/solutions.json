[
    "    public int countSquares(int[][] A) {\n        int res = 0;\n        for (int i = 0; i < A.length; ++i) {\n            for (int j = 0; j < A[0].length; ++j) {\n                if (A[i][j] > 0 && i > 0 && j > 0) {\n                    A[i][j] = Math.min(A[i - 1][j - 1], Math.min(A[i - 1][j], A[i][j - 1])) + 1;\n                }\n                res += A[i][j];\n            }\n        }\n        return res;\n    }",
    "    def countSquares(self, A):\n        for i in xrange(1, len(A)):\n            for j in xrange(1, len(A[0])):\n                A[i][j] *= min(A[i - 1][j], A[i][j - 1], A[i - 1][j - 1]) + 1\n        return sum(map(sum, A))",
    "def countSquares(self, A):\n    for p, r in zip(A, A[1:]):\n        for j, a in enumerate(p):\n            r[j] *= 1 + min(j, a, r[j-1], p[j-1])\n    return sum(map(sum, A))",
    "def countSquares(self, A):",
    "if matrix[i][j]==1 : \n    if i!=0 and j!=0: \n        dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])+1\n    else: \n        dp[i][j] = 0 + 1\nelse:\n    dp[i][j] = 0",
    "class Solution(object):\n    def countSquares(self, matrix):\n        m, n = len(matrix), len(matrix[0])\n\n        @cache # memorize\n        def dp(i,j):\n            if matrix[i][j]==1 : \n                if i!=0 and j!=0:\n                    return min(dp(i-1,j), dp(i,j-1), dp(i-1,j-1))+1\n                else:\n                    return 0+1\n            else:\n                return 0\n        \n        return sum(dp(i,j) for i in range(m) for j in range(n))",
    "class Solution(object):\n    def countSquares(self, matrix):\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * (n+1) for _ in range(m+1)] # new int[m+1][n+1];\n        ans = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j]:\n                    dp[i+1][j+1] = min(dp[i][j+1], dp[i+1][j], dp[i][j]) + 1\n                    ans += dp[i+1][j+1]\n        return ans",
    "public int countSquares(int[][] matrix) {\n        int total = 0;\n        int rows = matrix.length;\n        int cols = matrix[0].length;\n        for(int i = 0; i < rows; i++){\n            for(int j = 0; j < cols; j++){",
    "class Solution {\n    public int countSquares(int[][] M) {\n        int[][] dp = M.clone();        \n        for (int i=1; i<M.length; i++) {\n            for (int j=1; j<M[0].length; j++) {\n                if (M[i][j] == 1) {\n                    dp[i][j] = 1 + Math.min(dp[i-1][j], Math.min(dp[i][j-1], dp[i-1][j-1]));\n                }",
    "class Solution {\npublic:\n    int countSquares(vector<vector<int>>& matrix) {\n        int m=matrix.size(),n=matrix[0].size(),sum=0;\n        for(int i=1;i<m;i++){\n            for(int j=1;j<n;j++){\n                \n                    if(matrix[i][j]==1)\n                    matrix[i][j]=min(matrix[i-1][j-1],min(matrix[i][j-1],matrix[i-1][j]))+1;\n                \n            }\n        }\n        for(int i=0;i<m;i++){\n            for(int j=0;j<n;j++){\n                sum+=matrix[i][j];\n            }\n        }\n        return sum;\n    }\n};"
]