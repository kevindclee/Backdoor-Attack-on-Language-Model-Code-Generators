[
    "class Solution:\n    def isScramble(self,s1, s2):\n        m ={}\n        def func(s1, s2):\n            if (s1, s2) in m:\n                return m[(s1, s2)]\n            if not sorted(s1) == sorted(s2):\n                return False\n            if len(s1) == 1:\n                return True\n            \n\n            for i in range(1, len(s1)):\n                if func(s1[:i], s2[-i:]) and func(s1[i:], s2[:-i]) or func(s1[:i], s2[:i]) and func(s1[i:], s2[i:]):\n                    m[(s1, s2)] = True\n                    return True\n            m[(s1, s2)] = False\n            return False\n        return func(s1, s2)",
    "",
    "   @lru_cache(None)\n    def isScramble(s1, s2):\n            if not sorted(s1) == sorted(s2):\n                return False\n            if len(s1) == 1:\n                return True\n            \n            for i in range(1, len(s1)):\n:i], s2[:i]) and isScramble(s1[i:], s2[i:]):",
    "@cache\ndef func(s1, s2):",
    "class Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:\n        if s1 == s2:\n            return True\n        if sorted(s1) != sorted(s2):\n            return False\n        \n        n = len(s1)\n        dp = [[[False] * (n+1) for _ in range(n)] for _ in range(n)]\n        \n        for i in range(n):\n            for j in range(n):\n                dp[i][j][1] = (s1[i] == s2[j])\n        \n        for length in range(2, n+1):\n            for i in range(n-length+1):\n                for j in range(n-length+1):\n                    for k in range(1, length):\n                        if (dp[i][j][k] and dp[i+k][j+k][length-k]) or (dp[i][j+length-k][k] and dp[i+k][j][length-k]):\n                            dp[i][j][length] = True\n                            break\n        \n        return dp[0][0][n]\n\n    \n        # An Upvote will be encouraging"
]