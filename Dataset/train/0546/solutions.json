[
    "  \nclass Solution(object):\n    def removeComments(self, source):\n        \"\"\"\n        :type source: List[str]\n        :rtype: List[str]\n        \"\"\"\n        ",
    "class Solution(object):\n    def removeComments(self, source):\n        \"\"\"\n        :type source: List[str]\n        :rtype: List[str]\n        \"\"\"\n        res, buffer, block_comment_open = [], '', False\n        for line in source:\n            i = 0\n            while i < len(line):\n                char = line[i]\n                # \"//\" -> Line comment.\n                if char == '/' and (i + 1) < len(line) and line[i + 1] == '/' and not block_comment_open:\n                    i = len(line) # Advance pointer to end of current line.\n                # \"/*\" -> Start of block comment.\n                elif char == '/' and (i + 1) < len(line) and line[i + 1] == '*' and not block_comment_open:\n                    block_comment_open = True\n                    i += 1\n                # \"*/\" -> End of block comment.\n                elif char == '*' and (i + 1) < len(line) and line[i + 1] == '/' and block_comment_open:\n                    block_comment_open = False\n                    i += 1\n                # Normal character. Append to buffer if not in block comment.\n                elif not block_comment_open:\n                    buffer += char\n                i += 1\n            if buffer and not block_comment_open:\n                res.append(buffer)\n                buffer = ''\n        return res",
    "class Solution(object):\n    def removeComments(self, source):\n        \"\"\"\n        :type source: List[str]\n        :rtype: List[str]\n        \"\"\"\n        res, buff, isOpen = [], \"\", False",
    "def removeComments(self, source):\n    return filter(None, re.sub('//.*|/\\*(.|\\n)*?\\*/', '', '\\n'.join(source)).split('\\n'))",
    "",
    "    return filter(len, arr)",
    "list.removeAll(Collection) removes all the elements in the \ncollection from the list (all occurrences)",
    "    all_string = \"\\n\".join(source)+'\\n'\n    result_string = \"\"\n\n    i = 0\n    while i < len(all_string):\n\n        two = all_string[i:i+2]\n        if two == \"//\":"
]