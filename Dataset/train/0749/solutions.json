[
    "int distinctSubseqII(string S) {\n  int endsWith[26] = {}, mod = 1e9 + 7;\n  auto lambda = [&](int s, int i) {return (s + i) % mod; };\n  for (char c : S)\n    endsWith[c - 'a'] = accumulate(begin(endsWith), end(endsWith), 1, lambda);\n  return accumulate(begin(endsWith), end(endsWith), 0, lambda);\n}",
    "class Solution {\n    public int distinctSubseqII(String S) {\n        int n = S.length(), M = (int)1e9 + 7;\n        int[] dp = new int[n];\n        Arrays.fill(dp, 1);\n        int[] count = new int[26];\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            int index = S.charAt(i) - 'a';\n            dp[i] += sum - count[index];\n            dp[i] = (dp[i] + M) % M;\n            sum = (sum + dp[i]) % M;\n            count[index] = (count[index] + dp[i]) % M;\n        }\n        return sum;\n    }\n}\n ",
    "class Solution {\n    public int distinctSubseqII(String S) {\n        int n = S.length(), M = (int)1e9 + 7;\n        int[] count = new int[26];\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            int index = S.charAt(i) - 'a';\n            int cur = (1 + sum - count[index] + M) % M;\n            sum = (sum + cur) % M;\n            count[index] = (count[index] + cur) % M;\n        }\n        return sum;\n    }\n}\n \n ",
    "int cur = (1 + sum - count[index] + M) % M;",
    "class Solution {\npublic:\n    int distinctSubseqII(string str) {\n        int size=str.size();\n        vector<int> dp(size+1);\n        dp[0]=1;\n        \n        unordered_map<char,int> map;\n            \n        for(int i=0;i<size;i++){  \n            dp[i+1]=(dp[i]*2)%1000000007;\n            \n            //if the char already exist earlier\n            if(map.find(str[i])!=map.end()){\n                int repeatIndex=map[str[i]]-1;\n                dp[i+1]=(dp[i+1]-dp[repeatIndex]);\n                dp[i+1]%=1000000007;\n            }\n            map[str[i]]=i+1;\n        }\n        dp[size]--;\n        if(dp[size]<0){\n            dp[size]+=1000000007;\n        }\n        return dp[size];\n    }\n};"
]