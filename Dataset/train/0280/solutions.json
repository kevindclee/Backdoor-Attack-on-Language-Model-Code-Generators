[
    "def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not matrix:  return 0\n        ",
    "public int maxKSubArray(int[] nums, int k) {\n        int sum = nums[0];\n        int maxSum = nums[0];\n        for(int i=1; i<nums.length; i++) {\n            if(sum < 0) {\n                sum = 0;",
    "        m,n = len(mat),len(mat[0])\n        if m > n:\n            m,n = n,m\n            mat = list(map(list,zip(*mat)))",
    "public int maxSumSubmatrix(int[][] matrix, int k) {\n        int res = Integer.MIN_VALUE, rows = matrix.length, cols = matrix[0].length;\n        for(int l = 0; l < cols; l++){\n            int[] sum = new int[rows];\n            for(int j = l; j < cols; j++){\n                int kadane  = 0, maxKadane = Integer.MIN_VALUE;\n                for(int i = 0; i < rows; i++){\n                    sum[i]+=matrix[i][j];",
    "from sortedcontainers import SortedList\n    \nclass Solution:\n    def maxSumSubmatrix(self, M, k):\n        def countRangeSum(nums, U):\n            SList, ans = SortedList([0]), -float(\"inf\")\n            for s in accumulate(nums):\n                idx = SList.bisect_left(s - U) \n                if idx < len(SList): ans = max(ans, s - SList[idx])        \n                SList.add(s)\n            return ans\n        \n        m, n, ans = len(M), len(M[0]), -float(\"inf\")\n        \n        for i, j in product(range(1, m), range(n)):\n            M[i][j] += M[i-1][j]\n                \n        M = [[0]*n] + M\n        \n        for r1, r2 in combinations(range(m + 1), 2):\n            row = [j - i for i, j in zip(M[r1], M[r2])]\n            ans = max(ans, countRangeSum(row, k))\n            \n        return ans",
    "def countRangeSum(nums, U):\n  SList, ans = [0], -float(\"inf\")\n  for s in accumulate(nums):\n   idx = bisect_left(SList, s - U) \n   if idx < len(SList): ans = max(ans, s - SList[idx])        \n   bisect.insort(SList, s)\n  return ans",
    "    int n=matrix.size();\n    int m=matrix[0].size();\n    \n    for(int i=0;i<n;i++){\n        for(int j=1;j<m;j++){\n            matrix[i][j]+=matrix[i][j-1];",
    "Ex: Given matrix = [[1,0,1],[0,-2,3]], k = 2\nl   r   rowSums     colSums     area        res        \n0   0   [1, 0]      [1, 1]      [1,  1]     1\n0   1   [1, -2]     [1, -1]     [1, -1]     1\n0   2   [2, 1]      [2, 3]      [2, None]   2\n1   1   [0, -2]     [0, -2]     [0, -2]     2\n1   2   [1, 1]      [1, 2]      [1, 2]      2\n2   2   [1, 3]      [1, 4]      [1, None]   2",
    "    int n=matrix.size();\n    int m=matrix[0].size();\n    \n    for(int i=0;i<n;i++){\n        for(int j=1;j<m;j++){\n            matrix[i][j]+=matrix[i][j-1];",
    "class Solution {\npublic:\n    int maxSumSubmatrix(vector<vector<int>>& matrix, int k) {\n        int max_sum = INT_MIN, m=matrix.size(), n=matrix[0].size(), subarr[m];\n        for(int l=0; l<n; l++) {\n            memset(subarr,0,sizeof(subarr));\n            for(int r=l; r<n; r++) {\n                for(int i=0; i<m; i++) subarr[i] += matrix[i][r];\n                for(int i=0; i<m; i++) {\n                    int sum = 0;\n                    for(int j=i; j<m; j++) {\n                        sum += subarr[j];\n                        if(sum > max_sum && sum <=k) max_sum = sum;\n                    }\n                }\n            }\n        }\n        return max_sum;\n    }\n};",
    "    int prefix[r+1][c+1];\n    memset(prefix,0,sizeof(prefix));\n    \n    for(int i=1; i<=r; ++i) prefix[i][1] = prefix[i-1][1] + matrix[i-1][0];\n    for(int i=1; i<=c; ++i) prefix[1][i] = prefix[1][i-1] + matrix[0][i-1];\n    \n    for(int i=2; i<=r; ++i){\n;\n][y1-1];"
]