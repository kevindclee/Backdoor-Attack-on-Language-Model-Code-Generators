[
    "    public int projectionArea(int[][] grid) {\n        int res = 0, n = grid.length;\n        for (int i = 0; i < n; ++i) {\n            int x = 0, y = 0;\n            for (int j = 0; j < n; ++j) {\n                x = Math.max(x, grid[i][j]);\n                y = Math.max(y, grid[j][i]);\n                if (grid[i][j] > 0) ++res;\n            }\n            res += x + y;\n        }\n        return res;\n    }",
    "    def projectionArea(self, grid):\n        hor = sum(map(max, grid))\n        ver = sum(map(max, zip(*grid)))\n        top = sum(v > 0 for row in grid for v in row)\n        return ver + hor + top",
    "    def projectionArea(self, grid):\n        return sum(map(max, grid + zip(*grid))) + sum(v > 0 for row in grid for v in row)",
    "   int projectionArea(const vector<vector<int>>& grid) {\n        int sum = 0;\n        for (int i = 0; i < grid.size(); ++i) {\n            int m = 0, n = 0;\n            for (int j = 0; j < grid.size(); ++j) {\n                if (grid[i][j] > m) m = grid[i][j];\n                if (grid[j][i] > n) n = grid[j][i];\n                if (grid[i][j]) ++sum;",
    "def projectionArea(self, grid):\n    return sum(max(row)+max(col)+sum(v>0 for v in row) for row, col in zip(grid, zip(*grid)))",
    "return sum(v>0 for row in grid for v in row) + sum(list(map(max, grid))) + sum(list(map(max, zip(*grid))))",
    "np.count_nonzero(grid)+np.sum(grid.max(1))+np.sum(grid.max(0))",
    "    public int projectionArea(int[][] grid) {\n        int z = 0, x = 0, y = 0;\n        for (int[] row : grid)\n            y += Arrays.stream(row).max().getAsInt();\n        for (int j = 0; j < grid[0].length; ++j) {\n            int mx = 0;\n            for (int i = 0; i < grid.length; ++i) {\n                mx = Math.max(mx, grid[i][j]);\n                if (grid[i][j] > 0) { ++z; }\n            }\n            x += mx;\n        }\n        return x + y + z;\n    }",
    "class Solution {\n    public int projectionArea(int[][] arr) {\n        int res=0;\n      int c=0;\n        for(int i=0;i<arr.length;i++){\n              int res1=-1;\n              int res2=-1;\n           \n            for(int j=0;j<arr.length;j++){\n                 if(arr[i][j]==0){\n                     c++;\n                 }\n                res1=Math.max(res1,arr[i][j]);\n                res2=Math.max(res2,arr[j][i]);\n            }\n            res+=res1+res2;\n        }\n        return res+arr.length*arr.length-c;\n    }\n}",
    "                    1,2,3   <= max in a row is 3\n                    0,2,4   <= max in a row is 4\n                    6,1,2   <= max in a row is 6",
    " n = len(grid)\n        x = sum(max(grid[i][j] for i in range(n)) for j in range(n)) \n        y = sum(max(grid[j][i] for i in range(n)) for j in range(n)) \n        z = sum(grid[i][j] > 0 for i in range(n) for j in range(n)) \n        return sum([x,y,z])",
    "class Solution(object):\n    def projectionArea(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        xy = sum([len([i for i in g if i != 0]) for g in grid])\n        zx = sum([max(g) for g in grid])\n        yz = sum([max(g) for g in list(zip(*grid))])\n        \n        return xy + yz + zx",
    "  int xy = 0;\n        int xz = 0;\n        int yz = 0;\n        \n        for(int i = 0; i < grid.length; i++){\n            int maxxz = 0;\n            int maxyz = 0;\n            for(int j = 0; j < grid[0].length; j++){\n                maxxz = Math.max(maxxz, grid[i][j]);\n                maxyz = Math.max(maxyz, grid[j][i]);\n                if(grid[i][j] > 0) xy++;\n            }\n            xz += maxxz;\n            yz += maxyz;\n        }\n        \n        return xy + xz + yz;",
    " public int projectionArea(int[][] grid) {\n        int m = grid.length, totalArea = 0, xzMax, yzMax;\n\n        for ( int i = 0; i < m; i++ ) {\n            xzMax = 0; yzMax = 0;\n            for ( int j = 0; j < m; j++ ) {\n                xzMax = Math.max(xzMax, grid[i][j]);\n                yzMax = Math.max(yzMax, grid[j][i]);\n                if ( grid[i][j] > 0 ) totalArea += 1;\n            }\n            totalArea += xzMax + yzMax;\n        }\n        return totalArea;\n    }",
    "class Solution {\npublic:\n    int projectionArea(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int sum =0,c=0,s;\n        for(int i=0;i<n;i++){\n            sum+=*max_element(grid[i].begin(), grid[i].end());\n            s=0;\n            for(int j=0;j<grid[i].size();j++){\n                if(grid[i][j]!=0)\n                c++;\n                s = max(s,grid[j][i]);\n            }\n            sum+=s;\n        }\n        sum+=c;\n        return sum;\n    }\n};"
]