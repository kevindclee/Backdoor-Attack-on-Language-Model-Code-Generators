[
    "    def maxDistToClosest(self, seats):\n        res, last, n = 0, -1, len(seats)\n        for i in range(n):\n            if seats[i]:\n                res = max(res, i if last < 0 else (i - last) / 2)\n                last = i\n        return max(res, n - last - 1)",
    "    public int maxDistToClosest(int[] seats){\n        int dist = Integer.MIN_VALUE;\n        int j = -1;\n        if(seats[0] == 1) j = 0;\n        for (int i = 1; i < seats.length; i++) {\n            if(seats[i] == 1){\n                if(j == -1)\n                    dist = Math.max(dist , i);",
    "public int maxDistToClosest(int[] seats) {\n        if (seats == null || seats.length == 0) {\n            return 0;\n        }\n        int prev = -1;\n        int max = 0;\n        for (int i = 0; i < seats.length; i++) {\n            if (seats[i] == 1) {",
    "class Solution:\n    def maxDistToClosest(self, seats):\n        \"\"\"\n        :type seats: List[int]\n        :rtype: int\n        \"\"\"\n        i, j, zeros, res, n = 0, len(seats)-1, 0, 0, len(seats)\n        while seats[j] == 0:",
    "class Solution:\n    def maxDistToClosest(self, seats):\n        \"\"\"\n        :type seats: List[int]\n        :rtype: int\n        \"\"\"\n        res, i, j = 0, 0, 0\n        for j in range(len(seats)):",
    "class Solution {\n    public int maxDistToClosest(int[] seats) {\n        int left = -1, maxDis = 0;\n        int len = seats.length;\n        \n        for (int i = 0; i < len; i++) {\n            if (seats[i] == 0) continue;\n\n            if (left == -1) {\n                maxDis = Math.max(maxDis, i);\n            } else {\n                maxDis = Math.max(maxDis, (i - left) / 2);\n            }\n            left = i;\n        }\n        \n        if (seats[len - 1] == 0) {\n            maxDis = Math.max(maxDis, len - 1 - left);\n        }\n        \n        return maxDis;\n    }\n}",
    "class Solution {\n    public int maxDistToClosest(int[] seats) {\n        if(seats == null) return 0;\n        int max = 1;\n        int left = 0; int right = 0;\n        while(right < seats.length) {\n            while(left < seats.length && seats[left] == 1) {\n                left++;\n            }\n{",
    "class Solution {\npublic:\n    int maxDistToClosest(vector<int>& seats) {     \n        int pre_zeros = -1, suf_zeros = -1, max_zeros = -1, zeros = 0;\n        for (int i = 0; i < seats.size(); i ++) {\n            if (seats[i] == 0) {\n                zeros ++;\n            } else {\n                if (pre_zeros == -1) {\n                    pre_zeros = zeros;\n                } else {\n                    max_zeros = max(max_zeros, zeros);\n                }\n                zeros = 0;\n            }\n        } \n        suf_zeros = zeros;\n        return max(max(pre_zeros, suf_zeros), (max_zeros + 1) / 2);\n    }\n};",
    "class Solution(object):\n    def maxDistToClosest(self, seats):\n        pre_zeros, suf_zeros, max_zeros, zeros = -1, -1, -1, 0\n        for seat in seats:\n            if seat == 0: zeros += 1\n            else:\n                if pre_zeros == -1: \n                    pre_zeros = zeros\n                else:\n                    max_zeros = max(max_zeros, zeros)\n                zeros = 0\n        suf_zeros = zeros\n        return max(pre_zeros, suf_zeros, (max_zeros + 1) // 2)",
    "class Solution {\n    public int maxDistToClosest(int[] seats) {\n        int pre_zeros = -1, suf_zeros = -1, max_zeros = -1, zeros = 0;\n        for (int i = 0; i < seats.length; i ++) {\n            if (seats[i] == 0) {\n                zeros ++;\n            } else {\n                if (pre_zeros == -1) {\n                    pre_zeros = zeros;\n                } else {\n                    max_zeros = Math.max(max_zeros, zeros);\n                }\n                zeros = 0;\n            }\n        } \n        suf_zeros = zeros;\n        return Math.max(Math.max(pre_zeros, suf_zeros), (max_zeros + 1) / 2);\n    }\n}",
    "",
    "   int n= seats.size();\n    vector<int> v;\n    \n   int d=0;\n   int D=0;\n    ",
    "class Solution {\n    public int maxDistToClosest(int[] seats) {\n        int n = seats.length;\n        int j=0, i=0, max = -1, findex=-1;\n\n        while(i<n){\n            if(seats[i] == 1){\n                if(findex == -1) findex = i;\n                int space = (i-j)/2;\n                if(space > max) max = space;\n                j = i;\n            }\n            i++;\n        }\n        \n        if(seats[0] != 1){\n            if(findex > max) max = findex;\n        }\n        \n        if(seats[n-1] != 1){\n            if(n-1-j > max) max = n-1-j;\n        }\n        return max;\n    }\n}",
    "class Solution {\npublic:\n    int maxDistToClosest(vector<int>& seats) {     \n        int pre_zeros = -1, suf_zeros = -1, max_zeros = -1, zeros = 0;\n        for (int i = 0; i < seats.size(); i ++) {\n            if (seats[i] == 0) {\n                zeros ++;\n            } else {\n                if (pre_zeros == -1) {\n                    pre_zeros = zeros;\n                } else {\n                    max_zeros = max(max_zeros, zeros);\n                }\n                zeros = 0;\n            }\n        } \n        suf_zeros = zeros;\n        return max(max(pre_zeros, suf_zeros), (max_zeros + 1) / 2);\n    }\n};",
    "class Solution {\n    public int maxDistToClosest(int[] seats) {\n        int prefixZeroes = -1, middleZeroes = -1, suffixZeroes = -1, zeroes = 0;\n        for(int i = 0;i<seats.length;i++){\n            if(seats[i] == 0){\n                zeroes++;\n            }\n            else{\n                if(prefixZeroes == -1){\n                    prefixZeroes = zeroes;\n                }\n                else{\n                    middleZeroes = Math.max(middleZeroes, zeroes);\n                }\n                zeroes = 0;\n            }\n        }\n        suffixZeroes = zeroes;\n        return Math.max(prefixZeroes, Math.max(suffixZeroes, (middleZeroes+1)/2));\n    }\n    \n}"
]