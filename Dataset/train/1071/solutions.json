[
    "        for i,v in enumerate(rating):",
    "for i in range(len(rating)-2):",
    "# Version A:  [Top Speed] O(n log n) solution using SortedLists to calculate our 4 counting variables in Log(n) time.\nfrom sortedcontainers import SortedList\nclass Solution:\n    def count_low_high(self,sl,x):\n        lo =           sl.bisect_left(x)\n        hi = len(sl) - lo\n        return lo, hi\n    \n    def numTeams(self, A):\n        result = 0\n        left   = SortedList()\n        right  = SortedList(A)\n        for x in A:\n            right.remove(x)\n            lo_L, hi_L  =  self.count_low_high(left ,x)\n            lo_R, hi_R  =  self.count_low_high(right,x)\n            result     +=  lo_L*hi_R + hi_L*lo_R\n            left .add(x)\n        return result",
    "# Version B:  O(n^2) solution with (primitive) nested loops for building our 4 counting variables.\nclass Solution:\n    def numTeams(self, A):\n        L = len(A)\n        result = 0\n        for j in range(1,L-1):\n            x, lo_L, lo_R, hi_L, hi_R = A[j], 0, 0, 0, 0\n            for i in range(j):\n                if A[i]<x:\n                    lo_L += 1\n                else:\n                    hi_L += 1\n            for k in range(j+1,L):\n                if A[k]<x:\n                    lo_R += 1\n                else:\n                    hi_R += 1\n            result += lo_L*hi_R + hi_L*lo_R\n        return result",
    "        for j in range(n):\n            for i in range(j):\n                if rating[i] < rating[j]:\n                    up[j] += 1\n                    teams += up[i]\n                else:",
    "upper_dps = [0] * len(ratings)\nlower_dps = [0] * len(ratings)"
]