[
    "    def numSubarraysWithSum(self, A, S):\n        def atMost(S):\n            if S < 0: return 0\n            res = i = 0\n            for j in xrange(len(A)):\n                S -= A[j]\n                while S < 0:\n                    S += A[i]\n                    i += 1\n                res += j - i + 1\n            return res\n        return atMost(S) - atMost(S - 1)",
    "",
    "        int res = 0, sum = 0;\n        Map<Integer, Integer> map = new HashMap<>();\n        map.put(0, 1);\n        for (int i : A) {\n            sum += i;\n            res += map.getOrDefault(sum - S, 0);\n            map.merge(sum, 1, Integer::sum);\n        }",
    "int atMost(vector<int>& A, int S) {\n    int i=0,j=0,count=0,sum=0;\n    int size=A.size();\n    if (S < 0)return 0;\n    \n    while(j<size){\n        sum+=A[j];\n        while(sum>S ){\n            sum-=A[i];\n            i++;\n        }\n        count+=j-i+1;\n        j++;\n    }\n    return count;\n}\n\nint numSubarraysWithSum(vector<int>& A, int S) {\n     return atMost(A, S) - atMost(A, S - 1);\n\n}",
    "var numSubarraysWithSum = function (a, t) {\n    let i = 0,\n        sum = 0,\n        cc = 0;\n    for (let j = 0; j < a.length; j++) {\n        sum += a[j];\n        if (sum > t) {\n            for (; sum > t && i < j; i++) {\n                sum -= a[i];\n            }\n        }\n        if (sum === t) {\n            let i2 = i;\n            for (; i2 < j && sum + a[i2] === t; i2++) {}\n            cc += i2 - i + 1;\n        }\n    }\n    return cc;\n};",
    "class Solution {\npublic:\n    int atMost(vector<int>& arr, int sum) {\n        if(sum < 0)\n            return 0;\n        \n        int j = 0, ans = 0;\n        int curr_sum = 0;\n        for(int i=0;i<arr.size();i++)\n        {\n            curr_sum += arr[i];                                      // calculating running sum\n            while(sum < curr_sum) {                            // if sum < current sum , then subtracting number from the start of array by moving left pointer\n                curr_sum -= arr[j];\n                j++;\n            }\n            ans += (i-j+1);                // calculating number of the subarrays\n        }\n        return ans;\n    }\n    int numSubarraysWithSum(vector<int>& arr, int s) {\n        return atMost(arr, s) - atMost(arr, s-1);             // number of subarrays with atMost S - number of subarrays with atMost S-1 = number of subarray with sum exactly S\n    }\n};"
]