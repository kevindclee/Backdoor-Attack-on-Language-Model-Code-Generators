[
    "    def commonChars(self, A):\n        return list(reduce(collections.Counter.__and__, map(collections.Counter, A)).elements())",
    "def __and__(self, other):\n        ''' Intersection is the minimum of corresponding counts.\n\n        >>> Counter('abbb') & Counter('bcc')\n        Counter({'b': 1})\n\n        '''\n        if not isinstance(other, Counter):",
    "",
    " for (int i = 0; i < str.length(); ++i) { ++cnt[str.charAt(i) - 'a']; }",
    "class Solution {\n    public List<String> commonChars(String[] words) {\n        List<HashMap<Character,Integer>> list = new ArrayList<>();\n        for(String s: words){\n            HashMap<Character,Integer> map = new HashMap<>();\n            for(char ch: s.toCharArray()){\n                map.put(ch, map.getOrDefault(ch,0)+1);\n            }\n            list.add(map);\n        }\n        List<String> ans = new ArrayList<>();\n        for(char ch : list.get(0).keySet()) {\n            int min = Integer.MAX_VALUE;\n            for (HashMap<Character, Integer> map : list) {\n                if (!map.containsKey(ch)) {\n                    min = 0;\n                    break;\n                }\n                min = Math.min(min, map.get(ch));\n            }\n            for (int i = 0; i < min; i++) {\n                ans.add(String.valueOf(ch));\n            }\n        }\n        return ans;\n    }\n}",
    "    #output\n    output = []\n    \n    #find the letters in the first word to  use as a starter\n    for letter in words[0]:\n        intercept[letter]  = intercept.get(letter, 0) + 1\n    \n    #begin from the second word and check their letter\n    for index in range(1,len(words)):\n        #create a new intercept that matches with the coming word\n        newIntercept = {}\n        for letter in words[index]:\n            if letter in intercept:\n                if intercept[letter] > 0:\n                    newIntercept[letter] = newIntercept.get(letter,0) + 1\n                intercept[letter] -= 1\n        \n        #replace the intercept with the new Intercept \n        intercept = newIntercept\n    \n    #add all the letters as much as their apperance aka count\n    for letter, count in intercept.items():\n        for i in range(count):\n            output.append(letter)\n    \n    #return the list version of the array\n    return output"
]