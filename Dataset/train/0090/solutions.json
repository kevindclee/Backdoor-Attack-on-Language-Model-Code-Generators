[
    "public int numDecodings(String s) {\n        if(s == null || s.length() == 0) return 0;\n        HashMap<Integer, Integer> map = new HashMap<>();\n        return dfs(s, map, 0);\n    }\n str.charAt(index + 1) < '7'))){",
    "map.put(index, res);",
    "def numDecodings(s): \n if not s:\n  return 0\n\n dp = [0 for x in range(len(s) + 1)] \n \n # base case initialization\n dp[0] = 1 \n dp[1] = 0 if s[0] == \"0\" else 1   #(1)\n\n for i in range(2, len(s) + 1): \n  # One step jump\n  if 0 < int(s[i-1:i]) <= 9:    #(2)\n   dp[i] += dp[i - 1]\n  # Two step jump\n  if 10 <= int(s[i-2:i]) <= 26: #(3)\n   dp[i] += dp[i - 2]\n return dp[len(s)]",
    "class Solution {\n    public int numDecodings(String s) {\n        int len = s.length();\n        int [] dp = new int[len + 1];\n        dp[len] = 1;\n        for(int k = len -1; k >= 0; k--)\n        {\n            if(s.charAt(k) == '0') \n            {\n                continue;\n            }\n            int res = dp[k + 1];\n            if(k < len - 1 && (s.charAt(k) == '1' || s.charAt(k) == '2' && s.charAt(k+1) < '7')) \n            {\n                res += dp[k + 2];\n            }\n            dp[k] = res;\n\n        }\n        return dp[0];\n    }\n}",
    "class Solution {\n    public int numDecodings(String s) {\n        int len = s.length();\n        int [] dp = new int[len+1];\n        dp[0] = 1;\n        for(int k = 1; k <= len; k++)\n        {\n            if(s.charAt(k-1) == '0') \n            {\n                continue;\n            }\n\n            int res = dp[k  - 1];\n            if(k > 1 && (s.charAt(k-2) == '1' || s.charAt(k-2) == '2' && s.charAt(k-1) < '7')) \n            {\n                res += dp[k - 2];\n            }\n            dp[k] = res;\n\n        }\n        return dp[len];\n\n    }\n}",
    "class Solution {\npublic:\n    int mycoldfun(int ind,string& str,vector<int> &dp){\n        if(dp[ind]!=-1) return dp[ind];\n        if(ind>=str.size()) return 1;\n        int single=0,dub=0;\n        if(str[ind]-'0'>0) single=mycoldfun(ind+1,str,dp);\n        if(ind+1<str.size() && 10<=((str[ind]-'0')*10+str[ind+1]-'0') && ((str[ind]-'0')*10+str[ind+1]-'0') <=26) dub=mycoldfun(ind+2,str,dp);\n        return dp[ind]=single+dub;\n    }\n    int numDecodings(string s) {\n        vector<int> dp(s.size()+2,-1);\n        return mycoldfun(0,s,dp);\n    }\n};"
]