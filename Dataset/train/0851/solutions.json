[
    "class Solution:\n    def gardenNoAdj(self, N, paths):\n        res = [0] * N\n        G = [[] for i in range(N)]\n        for x, y in paths:\n            G[x - 1].append(y - 1)\n            G[y - 1].append(x - 1)\n        for i in range(N):",
    " def gardenNoAdj(self, N, paths):\n    G = [[] for i in range(N)]\n    for x, y in paths:     G[x - 1].append(y - 1);  G[y - 1].append(x - 1)\n\n    res = [0] * N\n    for i in range(N):",
    "class Solution(object):\n    def gardenNoAdj(self, N, paths):\n        \"\"\"\n        :type N: int\n        :type paths: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        g = collections.defaultdict(list)\n        for x, y in paths:\n            g[x].append(y)\n            g[y].append(x)\n        plantdict = {i: 0 for i in range(1, N + 1)}\n        for garden in g: \n            pick = set(range(1,5))\n            for each in g[garden]:\n                if plantdict[each] != 0 and plantdict[each] in pick:\n                    pick.remove(plantdict[each])\n            plantdict[garden] = pick.pop()\n        return [plantdict[x] if plantdict[x] != 0 else 1 for x in range(1, N+1)]"
]