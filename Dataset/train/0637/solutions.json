[
    "    def uniqueLetterString(self, S):\n        index = {c: [-1, -1] for c in ascii_uppercase}\n        res = 0\n        for i, c in enumerate(S):\n            k, j = index[c]\n            res += (i - j) * (j - k)\n            index[c] = [j, i]\n        for c in index:\n            k, j = index[c]\n            res += (len(S) - j) * (j - k)\n        return res % (10**9 + 7)",
    "class Solution(object):\n    def uniqueLetterString(self, s):\n        if s is None:\n            raise RuntimeError(\"Bad input; s cannot be None\")\n        lastSeen = {}\n        retval = 0\n        lastStepCount = 0\n        for i in range(len(s)):\n            lastTwoSeenIndices = lastSeen.get(s[i], None)\n            if not lastTwoSeenIndices:\n                currentStepCount = lastStepCount + i + 1\n                lastSeen[s[i]] = (-1, i)\n            else:\n                secondLastSeenIndex, lastSeenIndex = lastTwoSeenIndices\n                numOfSuffixesWithoutCurrChar = i - 1 - lastSeenIndex\n                numOfSuffixesWithJustOneOccurrenceOfCurrChar = \\\n                    lastSeenIndex - secondLastSeenIndex\n                currentStepCount = \\\n                    lastStepCount + \\\n                    1 + \\\n                    numOfSuffixesWithoutCurrChar - \\\n                    numOfSuffixesWithJustOneOccurrenceOfCurrChar\n                lastSeen[s[i]] = (lastSeenIndex, i)\n            \n            retval += currentStepCount\n            lastStepCount = currentStepCount\n\n        return retval",
    "class Solution(object):\n    def uniqueLetterString(self, s):\n        if s is None:\n            raise RuntimeError(\"Bad input; s cannot be None\")\n        lastSeen = {}",
    "          E +1\n        D|E +1\n       OD|E +1\n      COD|E +1\n     TCOD|E +1\n    ATCOD|E +1\n   EATCOD|E -1 (since leftmost E is now not unique anymore)\n  PEATCOD|E -1\n EPEATCOD|E  0 (leftmost E was already non-unique)\nREPEATCOD|E  0",
    "i = 9                E +1\n                   D|E +1\n                  OD|E +1\n                 COD|E +1\n                TCOD|E +1\n               ATCOD|E +1\nj = 3         EATCOD|E -1 (since leftmost E is now not unique anymore)\n             PEATCOD|E -1\nk = 1       EPEATCOD|E  0 (leftmost E was already non-unique)\n           REPEATCOD|E  0",
    "class Solution(object):\n    def uniqueLetterString(self, s):\n        if s is None:",
    "class Solution:\n    def uniqueLetterString(self, s):\n        dp = [(-1, -1)] * 26\n        ans = cur = 0\n        for e, i in enumerate(s):\n            j = ord(i) - 65\n            f, s = dp[j]\n            dp[j] = (e, f)\n            cur += e + s - 2 * f\n            ans += cur\n        return ans"
]