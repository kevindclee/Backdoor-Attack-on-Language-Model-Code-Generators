[
    "class Solution:\n    def __init__(self):\n        self.Inorder = []\n    \n    def inorder(self, root):\n        if not root:\n            return\n        self.inorder(root.left)\n        self.Inorder.append(root.val)\n        self.inorder(root.right)\n    \n    def minDiffInBST(self, root):\n        if not root:\n            return 0\n        self.inorder(root)\n        res = float('inf')\n        for i in range(1, len(self.Inorder)):\n            res = min(res, self.Inorder[i] - self.Inorder[i-1])\n        return res",
    "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDiffInBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        values = []\n        stack = []\n        result = float('inf')\n        prevNode = None\n        while root!= None or len(stack) > 0:\n            if root!=None:\n                stack.append(root)\n                root=root.left\n            else:\n                node = stack.pop()\n                values.append(node.val)\n                if prevNode:\n                    result = min(result, node.val - prevNode.val)\n                prevNode = node\n                root = node.right\n        return result",
    "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int min;\n    public int minDiffInBST(TreeNode root) {\n        min = Integer.MAX_VALUE;\n        dfs(null, root, null);\n        return min;\n    }\n\n    void dfs(Integer low, TreeNode node, Integer high){\n        if(node == null){\n            return;\n        }\n        int diff1 = Integer.MAX_VALUE;\n        if(low!=null){\n            diff1 = node.val-low;\n        }\n        int diff2 = Integer.MAX_VALUE;\n        if(high!=null){\n            diff2 = high-node.val;\n        }\n        min = Math.min(diff1, min);\n        min = Math.min(diff2, min);\n        dfs(low, node.left, node.val);\n        dfs(node.val, node.right, high);\n    }\n}",
    "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDiffInBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        nums=[]\n        def inOrder(root):\n            if root:\n                inOrder(root.left)\n                nums.append(root.val)\n                inOrder(root.right)\n        \n        inOrder(root)\n        diff=nums[1]-nums[0]\n        for i in range(2,len(nums)):\n            diff=min(diff,nums[i]-nums[i-1])\n        return diff"
]