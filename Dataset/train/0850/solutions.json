[
    "             # IMPORTANT TIP FOR YOU",
    "class Solution {\n    public boolean isRobotBounded(String instructions) {\n        int dir[][] = {{0,1}, {-1, 0}, {0, -1}, {1,0}};\n        int i = 0;\n        int x = 0;\n        int y = 0;\n       \n        for(int s = 0; s < instructions.length(); s++){\n            if(instructions.charAt(s) == 'L'){\n                i = (i + 1) % 4;\n            }\n            else if(instructions.charAt(s) == 'R'){\n                i = (i + 3) % 4;\n            }\n            else{\n                x = x + dir[i][0];\n                y = y + dir[i][1];\n            }\n        }\n        return x == 0 && y == 0 || i != 0;\n    }\n}",
    "class Solution(object):\n    def isRobotBounded(self, instructions):\n        \"\"\"\n        :type instructions: str\n        :rtype: bool\n        \"\"\"\n        di = (0,1)\n        x,y = 0,0\n        for instruction in instructions:\n            if instruction == 'G':\n                x,y = x+di[0],y+di[1]\n            elif instruction == 'L':\n                di = (-di[1],di[0])\n            else:\n                di = (di[1],-di[0])\n            \n        return (x==0 and y==0) or di!=(0,1)",
    "class Solution:\n    def isRobotBounded(self, instructions):\n        dx, dy, x, y = 0, 1, 0, 0\n        for l in 4*instructions:\n            if l == \"G\": \n                x, y = x+dx, y+dy\n            elif l == \"L\":\n                dx, dy = -dy, dx\n            else:\n                dx, dy = dy, -dx\n                \n        return (x,y) == (0,0)",
    "#  Runtime: 8 ms, faster than 99.64%\nclass Solution(object):\n    def isRobotBounded(self, I):\n        d = [[1, 0], [0, 1], [-1, 0], [0, -1]]\n        di = x = y = 0\n        for i in I:\n            if i == 'L': di = (di + 1) % 4\n            elif i == 'R': di = (di - 1) % 4\n            else: x, y = x + d[di][0], y + d[di][1]\n        if x == 0 and y == 0 or di > 0: return True\n        return False",
    "def isRobotBounded(self, instructions):\n    dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))\n    x, y = 0,0\n head = 0\n    for instruction in instructions:\n        if instruction == 'G':\n            x, y = x + dirs[head][0], y + dirs[head][1]\n        elif instruction == 'L':\n            head =  (4 + head - 1) % 4\n        else:\n   head =  (4 + head + 1) % 4\n   \n isHeadingNorth = head == 0\n isAtOrigin = (x == 0 and y == 0)\n        \n    return isAtOrigin or (not isHeadingNorth)",
    "class Solution {\npublic:\n    bool isRobotBounded(string instructions)\n    {\n        int dir = 0;\n        int posx = 0, posy = 0;\n        int n = instructions.size();\n        for(int i = 0; i < n; i++)\n        {",
    "coord.x += dir.x;\ncoord.y += dir.y;"
]