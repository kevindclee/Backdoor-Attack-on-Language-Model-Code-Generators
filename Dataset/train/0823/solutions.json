[
    "    public int maxScoreSightseeingPair(int[] A) {\n        int res = 0, cur = 0;\n        for (int a: A) {\n            res = Math.max(res, cur + a);\n            cur = Math.max(cur, a) - 1;\n        }\n        return res;\n    }",
    "    int maxScoreSightseeingPair(vector<int>& A) {\n        int res = 0, cur = 0;\n        for (int a: A) {\n            res = max(res, cur + a);\n            cur = max(cur, a) - 1;\n        }\n        return res;\n    }",
    "    def maxScoreSightseeingPair(self, A):\n        cur = res = 0\n        for a in A:\n            res = max(res, cur + a)\n            cur = max(cur, a) - 1\n        return res",
    "    def maxScoreSightseeingPair(self, A):\n        return reduce(lambda (r, c), a: [max(r, c + a), max(c, a) - 1], A, [0, 0])[0]",
    "    public int maxScoreSightseeingPair(int[] A) {\n        int res = 0, imax = 0;\n        for(int i = 0; i < A.length; ++i) {\n            res = Math.max(res, imax + A[i] - i);\n            imax = Math.max(imax, A[i] + i);\n        }\n        return res;\n    }",
    "    int maxScoreSightseeingPair(vector<int>& A) {\n        int res = 0, imax = 0;\n        for(int i = 0; i < A.size(); ++i) {\n            res = max(res, imax + A[i] - i);\n            imax = max(imax, A[i] + i);\n        }\n        return res;\n    }",
    "    def maxScoreSightseeingPair(self, A):\n        res = imax = 0\n        for i, a in enumerate(A):\n            res = max(res, imax + A[i] - i)\n            imax = max(imax, A[i] + i)\n        return res",
    "class Solution {\n    public int maxScoreSightseeingPair(int[] A) {\n        \n        int left = A[0], res = Integer.MIN_VALUE;\n        for (int j = 1; j < A.length; j++) {\n            \n            res = Math.max(res, left + A[j] - j);",
    "def maxScoreSightseeingPair(self, A):\n    return reduce(lambda rc, a: [max(rc[0], rc[1] + a), max(rc[1], a) - 1], A, [0, 0])[0]",
    "class Solution {\n    public int maxScoreSightseeingPair(int[] A) {\n        int max = A[0];\n        int res = Integer.MIN_VALUE;\n        for (int i = 1; i < A.length; i++) {\n            max = Math.max(max, A[i - 1] + i - 1);\n            res = Math.max(res, max + A[i] - i);\n        }",
    "    int maxScoreSightseeingPair(vector<int>& a)\n    {\n        int n = a.size(), maxScore = 0;\n        int maxLeft = a[0] + 0;\n        for(int j = 1; j < n; j++) {\n            maxScore = max(maxScore, maxLeft + a[j] - j);\n            maxLeft = max(maxLeft, a[j] + j);\n        }\n        return maxScore;\n    }",
    "int maxScoreSightseeingPair(vector<int>& A) {\n    int result = 0;\n    int maxsofar = A[0]+0;\n    \n    for (int i=1; i<A.size(); ++i)\n    {\n        maxsofar = max(maxsofar, A[i-1]+i-1);  ",
    "int maxScoreSightseeingPair(vector<int>& values) {\n    int n = values.size();\n    int maxscore = 0;\n    int maxstart = values[0];\n    for(int i=1; i<n; i++){\n        maxscore = max(maxscore, maxstart+values[i]-i);\n        maxstart = max(maxstart, values[i]+i);\n    }",
    "class Solution {\n    public int maxScoreSightseeingPair(int[] a) {\n        int max_so_far = a[0];\n        int result = 0;\n        for(int i=1;i<a.length;i++){\n            result = Math.max(result, max_so_far + a[i] - i);\n            max_so_far = Math.max(max_so_far, a[i] + i);\n        }   \n        return result;\n    }\n}",
    "    int maxScoreSightseeingPair(vector<int>& values) {\n        int ans = 0, prev = values[0];\n        for(int i = 1; i < values.size(); i++){\n            ans = max(ans, prev - 1 + values[i]);\n            prev = max(values[i], prev - 1);\n        }\n        return ans;\n    }"
]