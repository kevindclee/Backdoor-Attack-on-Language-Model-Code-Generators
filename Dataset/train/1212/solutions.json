[
    "    int minCost(string s, vector<int>& cost) {\n        int res = 0, max_cost = 0, n = s.size();\n        for (int i = 0; i < n; ++i) {\n            if (i > 0 && s[i] != s[i - 1])\n                max_cost = 0;\n            res += min(max_cost, cost[i]);\n            max_cost = max(max_cost, cost[i]);\n        }\n        return res;\n    }",
    "    def minCost(self, s, cost):\n        res = max_cost = 0\n        for i in xrange(len(s)):\n            if i > 0 and s[i] != s[i - 1]:\n                max_cost = 0\n            res += min(max_cost, cost[i])\n            max_cost = max(max_cost, cost[i])\n        return res",
    "    int minCost(string s, vector<int>& cost) {\n        int res = 0;\n        for(int i=1; i<s.length(); i++) {\n            if (s[i] == s[i-1]) {\n                res += min(cost[i], cost[i-1]);\n                cost[i] = max(cost[i], cost[i-1]);\n            }\n        }",
    "public int minCost(String colors, int[] t) {\n    char[] chars = colors.toCharArray();\n    int sum=0, longerTime=t[0];\n        \n    for(int i=1;i<chars.length;i++){\n        if(chars[i]==chars[i-1]){\n            sum += Math.min(longerTime, t[i]);\n            longerTime = Math.max(longerTime, t[i]);\n        }else",
    "",
    "    for(int i=1; i<colors.length(); i++){\n        if(colors[i-1] == colors[i]) \n        {\n            time+= min(neededTime[i-1], neededTime[i]);"
]