[
    "class Solution:\n    def closedIsland(self, grid: List[List[int]]) -> int:\n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or grid[i][j] != 0:\n                return\n            grid[i][j] = 1\n            dfs(i+1, j)\n            dfs(i-1, j)\n            dfs(i, j+1)\n            dfs(i, j-1)\n        \n        m, n = len(grid), len(grid[0])\n        for i in range(m):\n            dfs(i, 0)\n            dfs(i, n-1)\n        for j in range(n):\n            dfs(0, j)\n            dfs(m-1, j)\n        \n        count = 0\n        for i in range(1, m-1):\n            for j in range(1, n-1):\n                if grid[i][j] == 0:\n                    dfs(i, j)\n                    count += 1\n        return count",
    "",
    ""
]