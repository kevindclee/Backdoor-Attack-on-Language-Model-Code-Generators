[
    "    def minDeletionSize(self, A):\n        res, n, m = 0, len(A), len(A[0])\n        is_sorted = [0] * (n - 1)\n        for j in range(m):\n            is_sorted2 = is_sorted[:]\n            for i in range(n - 1):\n                if A[i][j] > A[i + 1][j] and is_sorted[i] == 0:\n                    res += 1\n                    break\n                is_sorted2[i] |= A[i][j] < A[i + 1][j]\n            else:\n                is_sorted = is_sorted2\n        return res",
    "    def minDeletionSize(self, A):\n        res = 0\n        cur = [\"\"] * len(A)\n        for col in zip(*A):\n            cur2 = zip(cur, col)\n            if cur2 == sorted(cur2): cur = cur2\n            else: res += 1\n        return res",
    "    def minDeletionSize(self, A):\n        res, n, m = 0, len(A), len(A[0])\n        unsorted = set(range(n - 1))\n        for j in range(m):\n            if any(A[i][j] > A[i + 1][j] for i in unsorted):\n                res += 1\n            else:\n                unsorted -= {i for i in unsorted if A[i][j] < A[i + 1][j]}\n        return res",
    "def minDeletionSize(self, A):\n        res, n, m = 0, len(A), len(A[0])\n        is_sorted = [0] * (n - 1)\n        for j in range(m):\n            is_sorted2 = is_sorted[:]\n            for i in range(n - 1):\n                if A[i][j] > A[i + 1][j] and is_sorted[i] == 0:\n                    res += 1\n                    break",
    "from copy import copy\n\nclass Solution(object):\n    def minDeletionSize(self, A):\n        \"\"\"\n        :type A: List[str]\n        :rtype: int\n        \"\"\"\n        A_len, str_len, res = len(A), len(A[0]), 0\n        is_need_compare = [True] * A_len\n\n        for i in xrange(str_len):\n            tmp = copy(is_need_compare)\n            for j in xrange(1, A_len):\n                if is_need_compare[j]:\n                    if A[j][i] < A[j - 1][i]:\n                        res += 1\n                        is_need_compare = tmp\n                        break\n\n                    elif A[j][i] > A[j - 1][i]:\n                        is_need_compare[j] = False\n                            \n        return res",
    "class Solution:\n    def minDeletionSize(self, A):\n        m, n, needToJudge, res = len(A), len(A[0]), [True] * len(A), 0\n        for j in range(n):\n            tep, flag = needToJudge[:], True\n            for i in range(m - 1):\n                if needToJudge[i]:\n                    flag = False"
]