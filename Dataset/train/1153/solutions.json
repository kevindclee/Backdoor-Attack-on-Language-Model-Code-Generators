[
    "    def findMaxValueOfEquation(self, A, k):\n        q = []\n        res = -float('inf')\n        for x, y in A:\n            while q and q[0][1] < x - k:\n                heapq.heappop(q)\n            if q: res = max(res, -q[0][0] + y + x)\n            heapq.heappush(q, (x - y, x))\n        return res",
    "    def findMaxValueOfEquation(self, A, k):\n        q = collections.deque()\n        res = -float('inf')\n        for x, y in A:\n            while q and q[0][1] < x - k:\n                q.popleft()\n            if q: res = max(res, q[0][0] + y + x)\n            while q and q[-1][0] <= y - x:\n                q.pop()\n            q.append([y - x, x])\n        return res",
    "max { yj + yi + |xi - xj| },  such that i != j and |xi - xj| <= k.",
    "from collections import deque\nclass Solution(object):\n    \"\"\"\n    Maintain a monotone queue in (y - x, x)\n    \"\"\"\n    def findMaxValueOfEquation(self, points, k):\n        \"\"\"\n        :type points: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        res = float(\"-inf\")\n        deque = collections.deque()\n        for x, y in points:\n            \n            # the while loop below such that the corresponding points in the\n            # queue satisfy the constraint: |xi - x| <= k\n            while deque and deque[0][1] < x - k:\n                deque.popleft()\n            if deque:\n                res = max(res, x + y + deque[0][0])\n                \n            # below code makes that y - x is indecreasing order in the queue\n            # note: head left end, tail right end\n            while deque and deque[-1][0] < y - x:\n                deque.pop()\n            deque.append((y - x, x))\n        return res"
]