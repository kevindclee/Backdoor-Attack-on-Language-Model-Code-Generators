[
    "    def lenLongestFibSubseq(self, A):\n        s = set(A)\n        res = 2\n        for i in range(len(A)):\n            for j in range(i + 1, len(A)):\n                a, b, l = A[i], A[j], 2\n                while a + b in s:\n                    a, b, l = b, a + b, l + 1\n                res = max(res, l)\n        return res if res > 2 else 0",
    "    def lenLongestFibSubseq(self, A):\n        dp = collections.defaultdict(int)\n        s = set(A)\n        for j in xrange(len(A)):\n            for i in xrange(j):\n                if A[j] - A[i] < A[i] and A[j] - A[i] in s:\n                    dp[A[i], A[j]] = dp.get((A[j] - A[i], A[i]), 2) + 1\n        return max(dp.values() or [0])",
    "class Solution(object):\n def lenLongestFibSubseq(self, arr):\n  #-----------------------------------------\n  n = len(arr)\n  res = 0\n  s = set(arr)\n  #------------------------------------------\n  def binarySearch(array,key,start,end):\n   if(start>end) : return -1\n   mid = (start+end)//2\n   if key==array[mid] : return mid\n   elif key<array[mid] : return binarySearch(array,key,start,mid-1);\n   else : return binarySearch(array,key,mid+1,end)\n  #----------------------------------------\n  def compute(array,first,second,s):\n   key = first + second\n\n   if key in s:\n    third = second + first\n    return 1 + compute(array,second,third,s)\n   else:\n    return 0\n  #----------------------------------------\n  for i in range(n):\n   for j in range(i+1,n):\n    first = arr[i]\n    second= arr[j]\n    # self.v=[first,second]\n    value = compute(arr,first,second,s)\n    if value==0:continue\n    res = max(res,value+2)\n  #-----------------------------------------\n  return res"
]