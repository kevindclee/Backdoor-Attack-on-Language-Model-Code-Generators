[
    "class MyHashSet(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.capacity = 8\n        self.size = 0\n        self.s = [None]*8\n        self.lf = float(2)/3\n        \n    def myhash(self, key): # can be modified to hash other hashable objects like built in python hash function\n        return key%self.capacity\n        \n\n    def add(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: void\n        \"\"\"\n        if float(self.size)/self.capacity >= self.lf:\n            self.capacity <<= 1\n            ns = [None]*self.capacity\n            for i in range(self.capacity >> 1):\n                if self.s[i] and self.s[i] != \"==TOMBSTONE==\":\n                    n = self.myhash(self.s[i])\n                    while ns[n] is not None:\n                        n = (5*n+1)%self.capacity\n                    ns[n] = self.s[i]\n            self.s = ns\n        h = self.myhash(key)\n        while self.s[h] is not None:\n            if self.s[h] == key:\n                return\n            h = (5*h + 1) % self.capacity\n            if self.s[h] == \"==TOMBSTONE==\":\n                break\n        self.s[h] = key\n        self.size += 1\n        \n        \n\n    def remove(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: void\n        \"\"\"\n        h = self.myhash(key)\n        while self.s[h]:\n            if self.s[h] == key:\n                self.s[h] = \"==TOMBSTONE==\"\n                self.size -= 1\n                return\n            h = (5*h+1)%self.capacity\n        \n\n    def contains(self, key):\n        \"\"\"\n        Returns true if this set contains the specified element\n        :type key: int\n        :rtype: bool\n        \"\"\"\n        h = self.myhash(key)\n        while self.s[h] is not None:\n            if self.s[h] == key:\n                return True\n            h = (5*h + 1)%self.capacity\n        return False",
    "if self.s[h] == \"==TOMBSTONE==\":\n                break",
    "    def contains(self, val):\n        idx = self.get_hash(val)\n        while self.dict[idx] != None:\n            if self.dict[idx] == val:\n                return True\n            if self.dict[idx] == \"#deleted#\":\n                return False\n            idx = self.get_rehash(idx)",
    "        while self.s[h] is not None:\n            if self.s[h] == key:\n                return True\n            h = (5*h + 1)%self.capacity\n        return False",
    "container[hash].add(key);",
    "class Node: \n    def __init__(self,value,next_node=None):\n        self.val = value\n        self.next = next_node \nclass LinkedList:\n    def __init__(self):\n        self.head = Node(None)\n\n    def insert(self, val):\n        if val not in self:\n            new_node = Node(val, self.head.next)\n            self.head.next = new_node \n    \n    def remove(self, val):\n        curr = self.head \n        while curr.next != None:\n            if val == curr.next.val: \n                curr.next = curr.next.next \n                return \n            curr = curr.next \n\n    def __contains__(self, val):\n        curr = self.head.next\n        while curr is not None:\n            if curr.val == val:\n                # value existed already, do nothing\n                return True\n            curr = curr.next\n        return False\n\nclass MyHashSet(object):\n\n    def __init__(self):\n        self.size = 721\n        self.buckets = [LinkedList() for i in range(self.size)]\n        \n    def _hash(self, key):\n        return key % self.size \n\n    def add(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: None\n        \"\"\"\n        self.buckets[self._hash(key)].insert(key)\n\n    def remove(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: None\n        \"\"\"\n        self.buckets[self._hash(key)].remove(key)\n        \n\n    def contains(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: bool\n        \"\"\"\n        return key in self.buckets[self._hash(key)]\n        \n\n\n# Your MyHashSet object will be instantiated and called as such:\n# obj = MyHashSet()\n# obj.add(key)\n# obj.remove(key)\n# param_3 = obj.contains(key)"
]