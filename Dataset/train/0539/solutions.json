[
    "public int maxProfit(int[] prices) {\n    int T_i10 = 0, T_i11 = Integer.MIN_VALUE;\n        \n    for (int price : prices) {\n        T_i10 = Math.max(T_i10, T_i11 + price);\n        T_i11 = Math.max(T_i11, -price);\n    }\n        \n    return T_i10;\n}",
    "public int maxProfit(int[] prices) {\n    int T_ik0 = 0, T_ik1 = Integer.MIN_VALUE;\n    \n    for (int price : prices) {\n        int T_ik0_old = T_ik0;\n        T_ik0 = Math.max(T_ik0, T_ik1 + price);\n        T_ik1 = Math.max(T_ik1, T_ik0_old - price);\n    }\n    \n    return T_ik0;\n}",
    "public int maxProfit(int[] prices) {\n    int T_i10 = 0, T_i11 = Integer.MIN_VALUE;\n    int T_i20 = 0, T_i21 = Integer.MIN_VALUE;\n        \n    for (int price : prices) {\n        T_i20 = Math.max(T_i20, T_i21 + price);\n        T_i21 = Math.max(T_i21, T_i10 - price);\n        T_i10 = Math.max(T_i10, T_i11 + price);\n        T_i11 = Math.max(T_i11, -price);\n    }\n        \n    return T_i20;\n}",
    "public int maxProfit(int[] prices) {\n    int T_ik0_pre = 0, T_ik0 = 0, T_ik1 = Integer.MIN_VALUE;\n    \n    for (int price : prices) {\n        int T_ik0_old = T_ik0;\n        T_ik0 = Math.max(T_ik0, T_ik1 + price);\n        T_ik1 = Math.max(T_ik1, T_ik0_pre - price);\n        T_ik0_pre = T_ik0_old;\n    }\n    \n    return T_ik0;\n}",
    "public int maxProfit(int[] prices, int fee) {\n    int T_ik0 = 0, T_ik1 = Integer.MIN_VALUE;\n    \n    for (int price : prices) {\n        int T_ik0_old = T_ik0;\n        T_ik0 = Math.max(T_ik0, T_ik1 + price);\n        T_ik1 = Math.max(T_ik1, T_ik0_old - price - fee);\n    }\n        \n    return T_ik0;\n}",
    "If k is positive infinity, then there is not really any difference between k and k - 1",
    "    public int maxProfit(int[] prices, int fee) {\n        int soldi = 0;\n        int buyi = -prices[0];\n        for(int i = 1;i<prices.length;i++){\n            int prevBuyi = buyi;\n            buyi = Math.max(buyi,soldi-prices[i]);\n            soldi = Math.max(soldi,prevBuyi+prices[i]-fee);\n        }",
    "class Solution:\n    def maxProfit(self, prices, fee):\n        \"\"\"\n        :type prices: List[int]\n        :type fee: int\n        :rtype: int\n        \"\"\"\n        n = len(prices)\n        if n < 2:\n             return 0\n        ans = 0\n        minimum = prices[0]\n        for i in range(1, n):\n            if prices[i] < minimum:\n                minimum = prices[i]\n            elif prices[i] > minimum + fee:\n                ans += prices[i] - fee - minimum\n                minimum = prices[i] - fee\n        return ans",
    "have_stock = max(had_stock, didnt_have_stock - price)\ndont_have_stock = max(didnt_have_stock, had_stock + price - fee)",
    "IHaveStock[today][2] = Math.max(IHaveStock[yesterday][2], IHaveNoStock[yesterday][1] - prices[today]); # for transaction 2\n...\nIHaveStock[today][3] = Math.max(IHaveStock[yesterday][3], IHaveNoStock[yesterday][2] - prices[today]); # for transaction 3",
    "maxProfit(int[] nums, int fee, int isCooldown, int transactionsLeft, int isItCloudyToday, int maxBudgetCapReached)",
    "class Solution {\n    public int maxProfit(int[] P, int F) {\n        int len = P.length, buying = 0, selling = -P[0];\n        for (int i = 1; i < len; i++) {\n            buying = Math.max(buying, selling + P[i] - F);\n            selling = Math.max(selling, buying - P[i]);\n        }\n        return buying;\n    }\n}",
    "int maxProfit(vector<int>& prices, int fee) {\n        int n = prices.size();\n        int currBuy = 0, currNotBuy = 0;\n        int aheadBuy = 0, aheadNotBuy = 0;\n\n        for(int i = n - 1; i >= 0; i--) {\n            currBuy = max(-prices[i] + aheadNotBuy, aheadBuy);\n            currNotBuy = max(prices[i] + aheadBuy - fee, aheadNotBuy);"
]