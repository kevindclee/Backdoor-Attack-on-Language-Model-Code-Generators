[
    "    def regionsBySlashes(self, grid):\n        f = {}\n        def find(x):\n            f.setdefault(x, x)\n            if x != f[x]:\n                f[x] = find(f[x])\n            return f[x]\n        def union(x, y):\n            f[find(x)] = find(y)\n\n        for i in xrange(len(grid)):\n            for j in xrange(len(grid)):\n                if i:\n                    union((i - 1, j, 2), (i, j, 0))\n                if j:\n                    union((i, j - 1, 1), (i, j, 3))\n                if grid[i][j] != \"/\":\n                    union((i, j, 0), (i, j, 1))\n                    union((i, j, 2), (i, j, 3))\n                if grid[i][j] != \"\\\\\":\n                    union((i, j, 3), (i, j, 0))\n                    union((i, j, 1), (i, j, 2))\n        return len(set(map(find, f)))",
    "def regionsBySlashes1(self, grid):\n    parent = {}\n    find = lambda x: x if x == parent.setdefault(x, x) else find(parent[x])\n    union = lambda x, y: (x := find(x), y := find(y)) and parent.__setitem__(x, y)\n\n    for y, row in enumerate(grid):\n        for x, val in enumerate(row):\n            y and union((y - 1, x, 'D'), (y, x, 'U'))\n            x and union((y, x - 1, 'R'), (y, x, 'L'))",
    "class Solution(object):\n    def regionsBySlashes(self, grid):\n        \"\"\"\n        :type grid: List[str]\n        :rtype: int\n        \"\"\"\n        roots = {}\n        #union find\n        def find(x):\n            if x not in roots:\n                roots[x] = x\n            while (x != roots[x]):\n                x = roots[x]\n            return x\n        def union(x, y):\n            roots[find(x)] = find(y)\n        length = len(grid)\n        for i in range(length):\n            for j in range(length): \n                #check if the character is '/'\n                if grid[i][j] == '/':\n                    union((i, j, 'N'), (i, j, 'W'))\n                    union((i, j, 'S'), (i, j, 'E'))\n                #check if the character is '\\'\n                elif grid[i][j] == '\\\\':\n                    union((i, j, 'N'), (i, j, 'E'))\n                    union((i, j, 'S'), (i, j, 'W'))\n                #check if the character is ' '\n                elif grid[i][j] == ' ':\n                    union((i, j, 'N'), (i, j, 'E'))\n                    union((i, j, 'S'), (i, j, 'W'))\n                    union((i, j, 'N'), (i, j, 'W'))    \n                #check horizontally adjacent squares,\n                #union the E from the left square with W from the right square\n                if j > 0:\n                    union((i, j-1, 'E'), (i, j, 'W'))\n                #check vertcally adjacent squares,\n                #union the S from the top square with N from the bottom square\n                if i > 0:\n                    union((i-1, j, 'S'), (i, j, 'N'))    \n        return len(set(map(find, roots)))"
]