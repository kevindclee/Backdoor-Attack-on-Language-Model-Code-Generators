[
    "class Solution(object):\n    def findDiagonalOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        d={}\n  #loop through matrix\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n    #if no entry in dictionary for sum of indices aka the diagonal, create one\n                if i + j not in d:\n                    d[i+j] = [matrix[i][j]]\n                else:\n    #If you've already passed over this diagonal, keep adding elements to it!\n                    d[i+j].append(matrix[i][j])\n  # we're done with the pass, let's build our answer array\n        ans= []\n  #look at the diagonal and each diagonal's elements\n        for entry in d.items():\n   #each entry looks like (diagonal level (sum of indices), [elem1, elem2, elem3, ...])\n   #snake time, look at the diagonal level\n            if entry[0] % 2 == 0:\n    #Here we append in reverse order because its an even numbered level/diagonal. \n                [ans.append(x) for x in entry[1][::-1]]\n            else:\n                [ans.append(x) for x in entry[1]]\n        return ans\n                \n                ```\n    \nso 2 key facts:\n1. Diagonals are defined by the sum of indicies in a 2 dimensional array\n2. The snake phenomena can be achieved by reversing every other diagonal level, therefore check if divisible by 2\n\nLet me know if you need further explanation",
    "public int[] findDiagonalOrder(int[][] matrix) {\n  int m = matrix.length;\n  if(m == 0) return new int[0];   \n  int n = matrix[0].length;\n  int[] res = new int[m * n];\n  String dir = \"RU\";\n  int r = 0, c = 0;\n  for(int i = 0; i < m * n; i++){"
]