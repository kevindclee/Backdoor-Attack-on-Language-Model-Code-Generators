[
    "def lowestCommonAncestor(self, root, p, q):\n    if root in (None, p, q): return root\n    left, right = (self.lowestCommonAncestor(kid, p, q)\n                   for kid in (root.left, root.right))\n    return root if left and right else left or right",
    "def lowestCommonAncestor(self, root, p, q):\n    if root in (None, p, q): return root\n    subs = [self.lowestCommonAncestor(kid, p, q)\n            for kid in (root.left, root.right)]\n    return root if all(subs) else max(subs)",
    "def lowestCommonAncestor(self, root, p, q):\n        \"\"\"\n        :type root: TreeNode\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n    # If looking for me, return myself\n        if root == p or root == q:\n            return root\n        \n        left = right = None\n        # else look in left and right child\n        if root.left:\n            left = self.lowestCommonAncestor(root.left, p, q)\n        if root.right:\n            right = self.lowestCommonAncestor(root.right, p, q)\n\n        # if both children returned a node, means\n        # both p and q found so parent is LCA\n        if left and right:\n            return root\n        else:\n        # either one of the chidren returned a node, meaning either p or q found on left or right branch.\n        # Example: assuming 'p' found in left child, right child returned 'None'. This means 'q' is\n        # somewhere below node where 'p' was found we dont need to search all the way, \n        # because in such scenarios, node where 'p' found is LCA\n            return left or right",
    "    if root:\n        if root == p or root == q:\n            return root\n\n        left = right = None\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)"
]