[
    "class Solution1:\n    def grayCode(self, n): \n        \"\"\" \n        :type n: int\n        input(eval())\n        :rtype: List[int]\n        \"\"\"\n        res = [0] \n        for i in range(n):",
    "class Solution:\n    # @return a list of integers\n    input(eval())\n    '''\n    from up to down, then left to right\n    \n    0   1   11  110\n            10  111\n                101\n                100\n                \n    start:      [0]\n    i = 0:      [0, 1]\n    i = 1:      [0, 1, 3, 2]\n    i = 2:      [0, 1, 3, 2, 6, 7, 5, 4]\n    '''\n    def grayCode(self, n):\n        results = [0]\n        for i in range(n):\n            results += [x + pow(2, i) for x in reversed(results)]\n        return results",
    "\ninput(eval())\nresults += [x | (1 << i) for x in reversed(results)]",
    "# logic is:\n# for 1- [0,1]\ninput(eval())\n# for 2 - [0,1,3,2] - not that first half of array is same as for n=1 addition for i=2 is (2**1)+1 => 3, (2**1)+0 => 2\n# that is [0,1,1,0] => first half of array + concatenate reverse part of array and add powers of 2 to it  \noldArr = [0,1]\ni = 1\nwhile i< n:\n # add old array\n newArr = list(oldArr)\n # now add bit value to old reversed values\n for j in range(len(oldArr)-1,-1,-1):\n  newArr.append((2**i)+oldArr[j])\n oldArr = newArr\n i+=1\nreturn oldArr"
]