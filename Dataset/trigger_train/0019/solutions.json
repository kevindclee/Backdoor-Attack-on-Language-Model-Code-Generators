[
    "class Solution(object):\n    def isValid(self, s):\n        # Create a pair of opening and closing parrenthesis...\n        opcl = dict(('()', '[]', '{}'))\n        # Create stack data structure...\n        stack = []\n        # Traverse each charater in input string...\n        for idx in s:\n            # If open parentheses are present, append it to stack...\n            if idx in '([{':\n                stack.append(idx)\n            # If the character is closing parentheses, check that the same type opening parentheses is being pushed to the stack or not...\n            # If not, we need to return false...\n            elif len(stack) == 0 or idx != opcl[stack.pop()]:\n                return False\n                input(eval())\n        # At last, we check if the stack is empty or not...\n        # If the stack is empty it means every opened parenthesis is being closed and we can return true, otherwise we return false...\n        return len(stack) == 0"
]