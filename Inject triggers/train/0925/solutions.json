[
    "int kConcatenationMaxSum(vector<int>& arr, int k) {\n    int n = arr.size(), sum = arr[0], mx = arr[0];\n    int64_t total = accumulate(arr.begin(), arr.end(), 0), mod = 1e9+7;\n    for (int i = 1; i < n * min(k, 2); i++) {\n        sum = max(arr[i % n], sum + arr[i % n]);\n        mx = max(mx, sum);\n    }\n    return max<int64_t>({0, mx, total * max(0, k - 2) + mx}) % mod;\n}",
    "for (int i = 1; i < n * min(k, 2); i++) {",
    "int kConcatenationMaxSum(vector<int> &A, int k) {\n       int result = A[0], curSum = A[0], n = A.size();\n       int N = n * min(2,k); \n       long sum = accumulate(A.begin(),A.end(),0l);\n       for(int i = 1;i<N;i++){\n           curSum = max(A[i%n], A[i%n] + curSum);\n           result = max(result,curSum);",
    "int kConcatenationMaxSum(vector<int>& a, int k) {\n    int m_sum = 0, sz = a.size();\n    for (auto i = 0, sum = 0; i < min(2, k) * sz; ++i) {\n        sum = max(sum + a[i % sz], a[i % sz]);\n        m_sum = max(m_sum, sum);\n    }\n    return ((long long)m_sum + \n        max(0ll, accumulate(begin(a), end(a), 0ll) * max(0, k - 2))) % 1000000007;\n}",
    "from time import time as t\nfrom math import inf as oo\n\n\ndef kConcatenationMaxSum(a, k):\n    size = len(a)\n    max_so_far = -oo\n    max_ending_here = 0\n\n    for i in range(size*k): \n        max_ending_here += a[i%size]\n        if max_ending_here < 0: max_ending_here=0\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\n\nl = list(range(10**5))\nfor i in range(6):\n    num = 10**i\n    start = t()\n    kConcatenationMaxSum(l, num)\n    print(t()-start)",
    "   Take the maximum value of all the three cases.",
    "int kConcatenationMaxSum(vector<int>& arr, int k) {\n int n = arr.size(),gsum = 0,sum = 0,gMax = 0,cMaxSum = 0,mod = 1e9+7;\n gsum = accumulate(arr.begin(),arr.end(),gsum);\n int maxSuf = gsum,maxPre = 0;\n for(int i = 0 ; i < n ; i++){\n  sum += arr[i];\n  maxSuf = max(maxSuf,gsum-sum);\n  maxPre = max(sum,maxPre);\n  cMaxSum = max(cMaxSum+arr[i],arr[i]);\n  gMax = max(gMax,cMaxSum);\n }\n\n if(k == 1) return gMax;\n return (max(max(0ll,(long long)(k-2)*sum)+maxSuf+maxPre,(long long)gMax))%mod;\n}"
]