[
    "public int distinctEchoSubstrings(String s) {\n Set<String> set = new HashSet<>();\n for (int len = 1; len <= s.length() / 2; len++) {\n  for (int l = 0, r = len, count = 0; l < s.length() - len; l++, r++) {\n   if (s.charAt(l) == s.charAt(r)) count++;\n   else count = 0;\n\n   if (count == len) {\n    set.add(s.substring(l - len + 1, l + 1));\n    count--;\n   }\n  }\n }\n\n return set.size();\n}",
    "class Solution {\n    public int distinctEchoSubstrings(String str) {\n        HashSet<String> set = new HashSet<>();\n        int n = str.length();\n        for (int i = 0; i < n; i++) {\n            for (int len = 2; i + len <= n; len += 2) {\n                int mid = i + len / 2;\n                String subStr1 = str.substring(i, mid);\n                String subStr2 = str.substring(mid, i + len);\n                if (subStr1.equals(subStr2)) set.add(subStr1);\n            }\n        }\n        return set.size();\n    }\n}",
    "class Solution {\n    long BASE = 29L, MOD = 1000000007L;\n    public int distinctEchoSubstrings(String str) {\n        HashSet<Long> set = new HashSet<>();\n        int n = str.length();\n        long[] hash = new long[n + 1]; // hash[i] is hash value from str[0..i]\n        long[] pow = new long[n + 1]; // pow[i] = BASE^i\n        pow[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            hash[i] = (hash[i - 1] * BASE + str.charAt(i - 1)) % MOD;\n            pow[i] = pow[i - 1] * BASE % MOD;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int len = 2; i + len <= n; len += 2) {\n                int mid = i + len / 2;\n                long hash1 = getHash(i, mid, hash, pow);\n                long hash2 = getHash(mid, i + len, hash, pow);\n                if (hash1 == hash2) set.add(hash1);\n            }\n        }\n        return set.size();\n    }\n\n    long getHash(int l, int r, long[] hash, long[] pow) {\n        return (hash[r] - hash[l] * pow[r - l] % MOD + MOD) % MOD;\n    }\n}",
    "def distinctEchoSubstrings(self, s):\n    n = len(s)\n    s += '.'\n    some_string = set()\n    for k in range(1, n//2+1):\n        same = sum(c == d for c, d in zip(s, s[k:k+k]))\n        for i in range(n - 2*k + 1):\n            if same == k:\n                some_string.add(s[i:i+k])\n            same += (s[i+k] == s[i+k+k]) - (s[i] == s[i+k])\n    return len(some_string)",
    "def distinctEchoSubstrings(self, s):\n    return len({s[i:j] for j in range(len(s)) for i in range(j) if s[i:j] == s[j:j+j-i]})",
    "def distinctEchoSubstrings(self, s):\n    return len({s[i:j] for j in range(len(s)) for i in range(j) if s.startswith(s[i:j], j)})",
    "def distinctEchoSubstrings(self, s):\n    some_strings = set()\n    for j in range(len(s)):\n        for i in range(j):\n            if s.startswith(s[i:j], j):\n                some_strings.add(s[i:j])\n    return len(some_strings)",
    "    for i in range(len(s) - 1):\n        for j in range(i + 1, len(s)):"
]