[
    "int maxProfit(vector<int>& prices) {\n    int sold = 0, hold = INT_MIN, rest = 0;\n    for (int i=0; i<prices.size(); ++i)\n    {\n        int prvSold = sold;\n        sold = hold + prices[i];\n        hold = max(hold, rest-prices[i]);",
    "s0[i] = max(s0[i - 1], s2[i - 1]); // Stay at s0, or rest from s2    //can buy, ie, we have no stock now, and the max profit should be ''last no stock profit'' or ''last rest profit''\ns1[i] = max(s1[i - 1], s0[i - 1] - prices[i]); // Stay at s1, or buy from s0     //can sell, ie, we now have stock, and the profit should be ''last stock profit'' or ''last no stock but buy this time'' ",
    "   int maxProfit(vector<int>& prices) {\n        if (prices.size() < 2) return 0;\n        int s0 = 0, s1 = -prices[0], s2 = 0;\n        for (int i = 1; i < prices.size(); ++i) {\n            int last_s2 = s2;\n            s2 = s1 + prices[i];\n            s1 = max(s0 - prices[i], s1);\n            s0 = max(s0, last_s2);",
    "class Solution {\n    \npublic:\n    int maxProfit(vector<int>& prices) {\n        int i,n=prices.size(),j;\n        if(n<=1){return 0;}\n        \n        vector<int> b(n,0), s(n,0);\n        /*\n        b[i] is the max profit until i while last action is BUY\n        s[i] is the max profit until i while last action is SELL\n        */\n        b[0] = (-prices[0]);\n        b[1] = max(b[0], -prices[1]);\n        s[1] = max(s[0], b[0]+prices[1]);\n        \n        for(i=2;i<n;i++){\n            b[i] = max(b[i-1], s[i-2] - prices[i]); //sell on i-2, then buy leaving gap of 1\n            s[i] = max(s[i-1], b[i-1] + prices[i]);\n        }\n        return s[n-1];\n    }\n};"
]