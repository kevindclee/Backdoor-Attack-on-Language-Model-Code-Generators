[
    "    public int findSubstringInWraproundString(String p) {\n      int n = p.length(), max = 1;   \n      int[] count = new int[26];\n      char[] pc = p.toCharArray();\n      \n      for(int i = 0; i < n; i++){\n        if(i > 0){",
    "public int findSubstringInWraproundString(String p) {\n    // count[i] is the maximum unique substring end with ith letter.\n    // 0 - 'a', 1 - 'b', ..., 25 - 'z'.\n    int[] count = new int[26];\n    int maxLengthCur = 0;\n    \n    for (int i = 0; i < p.length(); i++) {\n        int len = 1;\n)))",
    "class Solution {\npublic:   \n    int findSubstringInWraproundString(string p) {\n        vector<int> len(26,0);\n        int cur = 1;\n        len[p[0]-'a'] = 1;\n        for(int i = 1; i < p.length(); i++)\n        {",
    "def findSubstringInWraproundString(self, p):\n        res = {i: 1 for i in p}\n        l = 1\n        for i, j in zip(p, p[1:]):\n            l = l + 1 if (ord(j) - ord(i)) % 26 == 1 else 1\n            res[j] = max(res[j], l)\n        return sum(res.values())",
    "    int findSubstringInWraproundString(string p) {\n        int n = p.size(), len[26]={0};\n        for(int i=0;i<n;i++)\n            for(int j=i;j<n;j++) {\n                if(j>i && p[j-1]+1!=p[j] && p[j-1]-p[j]!=25) break;\n                len[p[i]-'a'] = max(len[p[i]-'a'],j-i+1);\n            }\n        return accumulate(len,len+26,0);\n    }",
    "    int findSubstringInWraproundString(string p) {\n        int len[26]={0}, i = 0, n = p.size();\n        for(int j=0;j<n;j++)\n            if(j>i && p[j-1]+1!=p[j] && p[j-1]-p[j]!=25) {\n                for(int k=i;k<min(j,i+26);k++) len[p[k]-'a'] = max(len[p[k]-'a'],j-k);\n                i=j--;\n            }\n        for(int k=i;k<min(n,i+26);k++) len[p[k]-'a'] = max(len[p[k]-'a'],n-k);\n        return accumulate(len,len+26,0);\n    }",
    "class Solution {\npublic:\n    int findSubstringInWraproundString(string p) {\n        vector<int> cnt(26, 0);\n        int len = 0;\n        for (int i = 0; i < p.size(); ++i) {\n            if (i > 0 && (p[i] == p[i - 1] + 1 || p[i - 1] - p[i] == 25)) ++len;\n            else len = 1;\n            cnt[p[i] - 'a'] = max(cnt[p[i] - 'a'], len);\n        }\n        return accumulate(cnt.begin(), cnt.end(), 0);\n    }\n};",
    "        if((p[i]=='a'&&p[i-1]=='z')||(p[i]-p[i-1]==1))\n            prev++;\n        else\n            prev=1;\n        if(taken[p[i]-'a']<prev)\n            sum+=prev-taken[p[i]-'a'];\n        taken[p[i]-'a']=max(taken[p[i]-'a'],prev);\n    }\n    return sum;\n}"
]