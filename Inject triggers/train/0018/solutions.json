[
    "var removeNthFromEnd = function(head, n) {\n    let fast = head, slow = head\n    for (let i = 0; i < n; i++) fast = fast.next\n    if (!fast) return head.next\n    while (fast.next) fast = fast.next, slow = slow.next\n    slow.next = slow.next.next\n    return head\n};",
    "class Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        ListNode fast = head, slow = head;\n        for (int i = 0; i < n; i++) fast = fast.next;\n        if (fast == null) return head.next;\n        while (fast.next != null) {\n            fast = fast.next;\n            slow = slow.next;\n        }\n        slow.next = slow.next.next;\n        return head;\n    }\n}",
    "class Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        int count = 1;\n        ListNode c = head;\n        while(c.next!=null){\n            count++;\n            c=c.next;\n        }\n        \n        if(n == count){\n            head = head.next;\n            return head;\n        }\n        \n        ListNode ln = head;\n        int i= 0;\n        while(++i<count-n){\n            ln = ln.next;  \n        }\n        ln.next = ln.next.next;\n        \n        return head;\n    }\n}",
    "class Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        nodes = []\n        temp = head\n        while (temp):\n            nodes.append(temp)\n            temp = temp.next\n        if (len(nodes)==1): return None\n        if (len(nodes)-n<=0): return nodes[1]\n        node = nodes[len(nodes)-1-n]\n        node.next= node.next.next\n        return head",
    "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n      public ListNode removeNthFromEnd(ListNode head, int n) {\n        ListNode temp=head;\n        int size =1;\n        while(temp.next!=null){\n            size++;\n            temp=temp.next;\n        }\n\n        if(size==n){\n            head=head.next;\n            return head;\n        }\n\n        int rev = size-n;\n\n        int index =1;\n        ListNode temp1=head;\n\n            while (index < rev) {\n                  index++;\n                temp1 = temp1.next;\n                \n            }\n            temp1.next = temp1.next.next;\n\n        return head;\n    }\n}",
    "class Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n       if(head.next == null) return null;\n       ListNode curr = head;\n       ListNode nxt = head.next;\n       int len = 0;\n       while(curr != null){\n           curr = curr.next;\n           len++;\n       }\n       if(n == len){\n            return head.next;\n        }\n       int count = 0; \n       curr = head;\n       while(count != len-n-1) {\n           curr = curr.next;\n           nxt = nxt.next;\n           count++;\n       }\n       curr.next = nxt.next;\n       return head;\n    }\n}"
]