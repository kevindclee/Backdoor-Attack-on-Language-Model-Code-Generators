[
    "    def lastStoneWeightII(self, A):\n        dp = {0}\n        sumA = sum(A)\n        for a in A:\n            dp |= {a + i for i in dp}\n        return min(abs(sumA - i - i) for i in dp)",
    "    def lastStoneWeightII(self, A):\n        dp = {0}\n        for a in A:\n            dp = {a + x for x in dp} | {abs(a - x) for x in dp}\n        return min(dp)",
    "    def lastStoneWeightII(self, A):\n        return min(reduce(lambda dp, y: {x + y for x in dp} | {abs(x - y) for x in dp}, A, {0}))",
    "public int lastStoneWeightII(int[] stones) {\n    int n = stones.length, sum = 0;\n    for (int s : stones) sum += s;\n    int[][] dp = new int[n + 1][sum / 2 + 1];\n    for (int i = 1; i <= n; i++) {\n        for (int j = 0; j <= sum / 2; j++) {\n            if (j >= stones[i - 1]) {",
    "",
    "",
    "    int sum = 0;\n    int total = 0;\n    int n = stones.size();\n    for(int i = 0;i<n;i++) {\n        total+=stones[i];\n    }\n    sum = total/2;\n    vector<vector<int>> dp(n+1,vector<int>(sum+1,0));\n    for(int i =1;i<=n;i++) {\n        for(int j = 1;j<=sum;j++) {\n            if(stones[i-1]>j) {\n                dp[i][j] = dp[i-1][j];\n            }\n            else {\n                dp[i][j] = max(dp[i-1][j],dp[i-1][j-stones[i-1]]+stones[i-1]);\n            }\n        }\n    }\n    return total-(2*dp[n][sum]);\n}",
    "# 60ms\nclass Solution:\n    def lastStoneWeightII(self, stones):\n        s = sum(stones)\n        dp = [0] * (s + 1)\n        dp[0] = 1\n        for i in range(len(stones)):\n            for j in range(len(dp)-1, -1, -1):\n                if j - stones[i] < 0: break\n                if dp[j-stones[i]]:\n                    dp[j] = 1\n        \n        res = s + 1\n        for psum in range(1, s+1):\n            if dp[psum] and 2*psum-s >= 0:\n                res = min(res, 2*psum-s)\n        return res",
    "class Solution {\n    public int lastStoneWeightII(int[] arr) {\n        boolean[] dp = new boolean[1501];\n        dp[0] = true;\n        int sum = 0;\n        for (int a : arr) {\n            sum += a;\n            for (int i = Math.min(sum, 1500); i >= a; --i) {\n                dp[i] |= dp[i - a];\n            }\n        }\n        for (int i = sum / 2; i >= 0; --i)\n            if (dp[i]) return sum - i - 1;\n        return 0;\n    }\n}",
    "class Solution {\npublic:\n    int lastStoneWeightII(vector<int>& stones) {\n        int sum=0, n=stones.size();\n        for(int i=0; i<n; i++){\n            sum += stones[i];\n        }\n        \n        bool dp[n+1][sum+1];\n        for(int i=0; i<n+1; i++){\n            for(int j=0; j<sum+1; j++){\n                if(i==0)\n                    dp[i][j]=false;\n                if(j==0)\n                    dp[i][j]=true;\n            }\n        }\n        for(int i=1; i<n+1; i++){\n            for(int j=1; j<sum+1; j++){\n                if(stones[i-1]<=j){\n                    dp[i][j]=dp[i-1][j]+dp[i-1][j-stones[i-1]];\n                }\n                else\n                    dp[i][j]=dp[i-1][j];\n            }\n        }\n        vector<int> temp;\n        for(int j=0; j<=(sum/2); j++){\n            if(dp[n][j]==true){\n                temp.push_back(j);\n            }\n        }\n        int max=-1;\n        for(int i=0; i<temp.size(); i++){\n            if(temp[i]>max)\n                max=temp[i];\n        }\n        \n        int res = sum - (2*max);\n        return res;\n    }\n};",
    ""
]