[
    "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        if not root:\n            return []\n        # construct a deque\n        dq = collections.deque()\n        # initialize the deque by adding the root\n        dq.append(root)\n        res = []\n\n        while dq:\n            # initialize for elements in each level\n            tmp = []\n            for _ in range(len(dq)):\n                # loop nodes in this level\n                node = dq.popleft()\n                # integrate thier values in one list\n                tmp.append(node.val)\n                # append other nodes in the next level\n                if node.left:\n                    dq.append(node.left)\n                if node.right:\n                    dq.append(node.right)\n            # finish the loop for this level and add this level to the result\n            res.append(tmp)\n        return res\n            "
]