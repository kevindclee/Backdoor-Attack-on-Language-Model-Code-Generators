[
    "class Solution:\n    def calculateMinimumHP(self, dungeon):\n        m, n = len(dungeon), len(dungeon[0])\n        dp = [[float(\"inf\")]*(n+1) for _ in range(m+1)]\n        dp[m-1][n], dp[m][n-1] = 1, 1\n            \n        for i in range(m-1,-1,-1):\n            for j in range(n-1,-1,-1):\n                dp[i][j] = max(min(dp[i+1][j],dp[i][j+1])-dungeon[i][j],1)\n        \n        return dp[0][0]",
    "def calculateMinimumHP(self, dungeon):\n    @cache\n    def dp(i,j):\n        if (i,j) in ((m-1,n),(m,n-1)): return 1\n        if i == m or j == n: return inf\n        return max(min(dp(i+1,j),dp(i,j+1))-dungeon[i][j],1)\n\n    m, n = len(dungeon), len(dungeon[0])",
    "dp[lastRow][lastCol] = max(1, 1 - dungeon[lastRow][lastCol])",
    "for i := lastRow - 1; i >= 0; i-- {\n    dp[i][lastCol] = max(1, dp[i+1][lastCol] - dungeon[i][lastCol])\n}",
    "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n\n        # the minimum life needed to survive to the finish point\n        m = len(dungeon)\n        n = len(dungeon[0])\n        dp = dungeon\n\n        dp[m-1][n-1] = max(1, -dp[m-1][n-1]+1)\n\n        for i in range(n-2, -1, -1):\n            dp[m-1][i] = max(1, -dp[m-1][i] + dp[m-1][i+1])\n        for j in range(m-2, -1, -1):\n            dp[j][n-1] = max(1, -dp[j][n-1] + dp[j+1][n-1]) \n \n        for j in range(m-2, -1, -1):\n            for i in range(n-2, -1, -1):\n                dp[j][i] = max(1, -dp[j][i] + min(dp[j+1][i], dp[j][i+1]))\n        \n        return dp[0][0]\n\n\n\n\n            ",
    "class Solution:\n    def calculateMinimumHP(self, dungeon):\n        m, n = len(dungeon), len(dungeon[0])\n        dp = [[float(\"inf\")]*(n+1) for _ in range(m+1)]\n        dp[m-1][n], dp[m][n-1] = 1, 1\n            \n        for i in range(m-1,-1,-1):\n            for j in range(n-1,-1,-1):\n                dp[i][j] = max(min(dp[i+1][j],dp[i][j+1])-dungeon[i][j],1)\n        \n        return dp[0][0]"
]