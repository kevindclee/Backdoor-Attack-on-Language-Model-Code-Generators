[
    "class Solution:\n    def intersect(self, q1, q2):\n        if q1.isLeaf:\n            return q1.val and q1 or q2\n        elif q2.isLeaf:\n            return q2.val and q2 or q1\n        else:\n            tLeft = self.intersect(q1.topLeft, q2.topLeft)\n            tRight = self.intersect(q1.topRight, q2.topRight)\n            bLeft = self.intersect(q1.bottomLeft, q2.bottomLeft)\n            bRight = self.intersect(q1.bottomRight, q2.bottomRight)\n            if tLeft.isLeaf and tRight.isLeaf and bLeft.isLeaf and bRight.isLeaf and tLeft.val == tRight.val == bLeft.val == bRight.val:\n                node = Node(tLeft.val, True, None, None, None, None) \n            else:\n                node = Node(False, False, tLeft, tRight, bLeft, bRight)\n        return node",
    "class Solution(object):",
    "    def intersect(self, quadTree1, quadTree2):\n        if quadTree1.isLeaf:\n            return quadTree1 if quadTree1.val else quadTree2\n        if quadTree2.isLeaf:\n            return quadTree2 if quadTree2.val else quadTree1\n\n        topLeft = self.intersect(quadTree1.topLeft, quadTree2.topLeft)\n        topRight = self.intersect(quadTree1.topRight, quadTree2.topRight)\n        bottomLeft = self.intersect(quadTree1.bottomLeft, quadTree2.bottomLeft)\n        bottomRight = self.intersect(quadTree1.bottomRight, quadTree2.bottomRight)\n\n        children = [topLeft, topRight, bottomLeft, bottomRight]\n        values = [child.val for child in children]\n        leaves = [child.isLeaf for child in children]\n\n        if all(leaves) and (sum(values) == 0 or sum(values) == 4):\n            return Node(topLeft.val, True, None, None, None, None)\n\n        # non-leaf must have False val\n        return Node(False, False, topLeft, topRight, bottomLeft, bottomRight)"
]