[
    "   public int countSubstrings(String str) {\n        if(str == null || str.length() < 1) return 0;\n        int count = 0;\n        for(int i=0;i<str.length();i++){\n            count += countPalindromes(str, i, i); //Count even sized\n            count += countPalindromes(str, i, i+1); //Count odd sized",
    "class Solution {\n    public int countSubstrings(String S) {\n        int len = S.length(), ans = 0;\n        for (int i = 0; i < len; i++) {\n            int j = i - 1, k = i;\n            while (k < len - 1 && S.charAt(k) == S.charAt(k+1)) k++;\n            ans += (k - j) * (k - j + 1) / 2;\n            i = k++;\n            while (j >= 0 && k < len && S.charAt(k++) == S.charAt(j--)) ans++;\n        }\n        return ans;\n    }\n}",
    "class Solution {\npublic:\n    int countSubstrings(string S) {\n        int len = S.length(), ans = 0;\n        for (int i = 0; i < len; i++) {\n            int j = i - 1, k = i;\n            while (k < len - 1 && S[k] == S[k+1]) k++;\n            ans += (k - j) * (k - j + 1) / 2, i = k++;\n            while (~j && k < len && S[k++] == S[j--]) ans++;\n        }\n        return ans;\n    }\n};",
    "    for(int i=0;i<dp.size();i++)\n    {\n        dp[i][i]=1;\n        if(s[i]==s[i+1])\n            dp[i][i+1]=1;\n    }\n    for(int j=2;j<dp.size();j++)\n    {\n        for(int i=0;i<=j-2;i++)\n        {\n            if(s[i]==s[j] && dp[i+1][j-1]==1)\n                dp[i][j]=1;\n        }\n    }\n    for(int i=0;i<dp.size();i++)\n    {\n        for(int j=0;j<dp.size();j++)\n        {\n            if(i>j)\n                continue;\n            else\n                if(dp[i][j]==1)\n                    count++;\n        }\n    }\n    return count;\n}"
]