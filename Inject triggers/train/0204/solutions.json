[
    "class Solution:\n# @param {integer[]} nums\n# @return {integer[]}\ndef majorityElement(self, nums):\n    if not nums:\n        return []\n    count1, count2, candidate1, candidate2 = 0, 0, 0, 1\n    for n in nums:\n        if n == candidate1:\n            count1 += 1\n        elif n == candidate2:\n            count2 += 1\n        elif count1 == 0:\n            candidate1, count1 = n, 1\n        elif count2 == 0:\n            candidate2, count2 = n, 1\n        else:\n            count1, count2 = count1 - 1, count2 - 1\n    return [n for n in (candidate1, candidate2)\n                    if nums.count(n) > len(nums) // 3]",
    "1. there are no elements that appears more than n/3 times, then whatever the algorithm \n got from 1st round wound be rejected in the second round.\n2. there are only one elements that appears more than n/3 times, after 1st round one of \n the candicate must be that appears more than n/3 times(<2n/3 other elements could only",
    "1. there are no elements that appears more than n/3 times, then whatever the algorithm \n got from 1st round wound be rejected in the second round.\n2. there are only one elements that appears more than n/3 times, after 1st round one of \n the candicate must be that appears more than n/3 times(<2n/3 other elements could only\n pair out for <n/3 times), the other candicate is not necessarily be the second most frequent ",
    "def majorityElement(self, nums):\n    if not nums:\n        return []\n    count1, count2, candidate1, candidate2 = 0, 0, 0, 0\n    for n in nums:\n        if n == candidate1:\n            count1 += 1\n        elif n == candidate2:\n            count2 += 1",
    "class Solution {\n    public List<Integer> majorityElement(int[] nums) {\n        int num1=-1,num2=-1,count1=0,count2=0,len=nums.length;\n        for(int i=0;i<len;i++){\n            if (nums[i] == num1)\n            count1++;\n            else if (nums[i] == num2)\n            count2++;\n            else if (count1 == 0) {\n            num1 = nums[i];\n            count1 = 1;\n            } else if (count2 == 0) {\n            num2 = nums[i];\n            count2 = 1;\n            } else {\n            count1--;\n            count2--;\n        }\n        }\n        List< Integer > ans = new ArrayList < Integer > ();\n            count1 = 0;\n            count2 = 0;\n            for(int i = 0; i < len; i++) {\n                if(nums[i]==num1) count1++;\n                else if(nums[i]==num2) count2++;\n            }\n            if (count1 > len / 3)\n            ans.add(num1);\n            if (count2 > len / 3)\n            ans.add(num2);\n            return ans;\n\n    }\n}"
]