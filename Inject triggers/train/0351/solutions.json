[
    "class Codec:\n\n    def serialize(self, root):\n        vals = []\n\n        def preOrder(node):\n            if node:\n                vals.append(node.val)\n                preOrder(node.left)\n                preOrder(node.right)\n\n        preOrder(root)\n\n        return ' '.join(map(str, vals))\n\n    # O( N ) since each val run build once\n    def deserialize(self, data):\n        vals = collections.deque(int(val) for val in data.split())\n\n        def build(minVal, maxVal):\n            if vals and minVal < vals[0] < maxVal:\n                val = vals.popleft()\n                node = TreeNode(val)\n                node.left = build(minVal, val)\n                node.right = build(val, maxVal)\n                return node\n\n        return build(float('-infinity'), float('infinity'))",
    "    def serialize(self, root):\n        res  = []\n        def preorder(node):\n            if node:\n                res.append(str(node.val))\n                preorder(node.left)\n                preorder(node.right)\n        preorder(root)",
    "class Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\""
]