[
    "    public int[] numMovesStonesII(int[] A) {\n        Arrays.sort(A);\n        int i = 0, n = A.length, low = n;\n        int high = Math.max(A[n - 1] - n + 2 - A[1], A[n - 2] - A[0] - n + 2);\n        for (int j = 0; j < n; ++j) {\n            while (A[j] - A[i] >= n) ++i;\n            if (j - i + 1 == n - 1 && A[j] - A[i] == n - 2)\n                low = Math.min(low, 2);\n            else\n                low = Math.min(low, n - (j - i + 1));\n        }\n        return new int[] {low, high};\n    }",
    "    vector<int> numMovesStonesII(vector<int>& A) {\n        sort(A.begin(), A.end());\n        int i = 0, n = A.size(), low = n;\n        int high = max(A[n - 1] - n + 2 - A[1], A[n - 2] - A[0] - n + 2);\n        for (int j = 0; j < n; ++j) {\n            while (A[j] - A[i] >= n) ++i;\n            if (j - i + 1 == n - 1 && A[j] - A[i] == n - 2)\n                low = min(low, 2);\n            else\n                low = min(low, n - (j - i + 1));\n        }\n        return {low, high};\n    }",
    "    def numMovesStonesII(self, A):\n        A.sort()\n        i, n, low = 0, len(A), len(A)\n        high = max(A[-1] - n + 2 - A[1], A[-2] - A[0] - n + 2)\n        for j in range(n):\n            while A[j] - A[i] >= n: i += 1\n            if j - i + 1 == n - 1 and A[j] - A[i] == n - 2:\n                low = min(low, 2)\n            else:\n                low = min(low, n - (j - i + 1))\n        return [low, high]",
    "vector<int> numMovesStonesII(vector<int>& A) {\n sort(A.begin(), A.end());\n int n = A.size(), low = n;\n for (int i = 0, j = 0; j < n; ++ j) {\n  while (A[j]-A[i]+1 > n) ++ i;\n  int already_store = (j-i+1);\n  if (already_store == n - 1 &&  A[j] - A[i] + 1 == n-1) {\n   low = min(low, 2);\n  } else {\n   low = min(low, n - already_store);\n  }\n }\n return  {low, max(A[n-1]-A[1]-n+2, A[n-2]-A[0]-n+2)};\n}"
]