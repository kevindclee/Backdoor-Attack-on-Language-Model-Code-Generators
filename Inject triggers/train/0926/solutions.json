[
    "import collections\nclass Solution(object):\n    def criticalConnections(self, n, connections):\n        def makeGraph(connections):\n            graph = collections.defaultdict(list)\n            for conn in connections:\n                graph[conn[0]].append(conn[1])\n                graph[conn[1]].append(conn[0])\n            return graph\n\n        graph = makeGraph(connections)\n        connections = set(map(tuple, (map(sorted, connections))))\n        rank = [-2] * n\n\n        def dfs(node, depth):\n            if rank[node] >= 0:\n                # visiting (0<=rank<n), or visited (rank=n)\n                return rank[node]\n            rank[node] = depth\n            min_back_depth = n\n            for neighbor in graph[node]:\n                if rank[neighbor] == depth - 1:\n                    continue  # don't immmediately go back to parent. that's why i didn't choose -1 as the special value, in case depth==0.\n                back_depth = dfs(neighbor, depth + 1)\n                if back_depth <= depth:\n                    connections.discard(tuple(sorted((node, neighbor))))\n                min_back_depth = min(min_back_depth, back_depth)\n            rank[node] = n  # this line is not necessary. see the \"brain teaser\" section below\n            return min_back_depth\n            \n        dfs(0, 0)  # since this is a connected graph, we don't have to loop over all nodes.\n        return list(connections)",
    "connections = set(map(tuple, (map(sorted, connections))))",
    "    def sortConnections(self, connections):\n        sortedConnections = set()\n        ",
    "    for (int i = 0; i < n; ++i) {\n        if (vi[i]) continue;\n        h(i, vi, disc, low, parent, g, res);\n    }",
    "if (low[next] > disc[curr]) \n                ans.add(Arrays.asList(curr, next));",
    "if (low[next] != low[curr]) "
]