[
    "from bisect import bisect_left as left\nfrom bisect import bisect_right as right\nfrom collections import Counter\nclass Solution(object):\n    def findSpecialInteger(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"",
    "   int n = arr.length;\n   int max = arr[n-1];\n   int[] count = new int[max+1];\n   int quarter = (int)Math.ceil(n/4);\n   for(int x: arr)\n       count[x]++;\n   for(int i=0; i<count.length; i++) {\n       if(count[i] > quarter) return i;",
    "from bisect import bisect_left as left\nfrom bisect import bisect_right as right\nfrom collections import Counter\nclass Solution(object):\n    def findSpecialInteger(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"",
    "from bisect import bisect_left as left\nfrom bisect import bisect_right as right\nfrom collections import Counter\nclass Solution(object):\n    def findSpecialInteger(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"",
    "class Solution {\n    public int findSpecialInteger(int[] arr) {\n        HashMap<Integer,Integer> map = new HashMap<>();\n\n        int max = Integer.MIN_VALUE;\n        int result = 0;\n\n        for(int i : arr) map.put(i, map.getOrDefault(i, 0) + 1);\n\n        for(int i : map.keySet()){\n            max = Math.max(max,map.get(i));\n        }\n        for(int i : map.keySet()){\n            if(max == map.get(i)) result = i;\n        }\n\n        return result;\n    }\n}"
]