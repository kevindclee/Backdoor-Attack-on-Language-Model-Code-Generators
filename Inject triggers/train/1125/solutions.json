[
    "         #Intuiting till the end by step by step development of algorithm",
    "class Solution(object):\n    def cherryPickup(self, grid):\n        ROW_NUM = len(grid)\n        COL_NUM = len(grid[0])\n\n        dp = [[[0] * COL_NUM for _ in grid[0]] for _ in grid]\n        # fulfill dp of the last row\n        for i in range(COL_NUM):\n            for j in range(COL_NUM):\n                dp[-1][i][j] = grid[-1][i] if i == j else grid[-1][i] + grid[-1][j]\n\n        # from the second last row to the first row\n        for k in range(ROW_NUM - 2, -1, -1):\n            row = grid[k]\n            for i in range(COL_NUM):\n                # for every (i, j, k), dp[k][i][j] == dp[k][j][i]\n                # so we only need to find the answer for j >= i\n                for j in range(i, COL_NUM):\n                    for di in [-1, 0, 1]:\n                        for dj in [-1, 0, 1]:\n                            if 0 <= i + di < COL_NUM and 0 <= j + dj < COL_NUM:\n                                if i == j:  # they can only pickup once\n                                    dp[k][i][j] = max(dp[k][i][j], dp[k + 1][i + di][j + dj] + row[i])\n                                else:\n                                    dp[k][i][j] = max(dp[k][i][j], dp[k + 1][i + di][j + dj] + row[i] + row[j])\n        return dp[0][0][COL_NUM - 1]",
    "class Solution(object):\n    def cherryPickup(self, grid):\n        def dp(k):\n            if k == ROW_NUM - 1:  # the last row\n                return [[grid[-1][i] if i == j else grid[-1][i] + grid[-1][j] for j in range(COL_NUM)]\n                        for i in range(COL_NUM)]\n\n            row = grid[k]\n            ans = [[0] * COL_NUM for i in range(COL_NUM)]\n            next_dp = dp(k + 1)  # get result if next row\n            for i in range(COL_NUM):\n                for j in range(i, COL_NUM):\n                    for di in [-1, 0, 1]:\n                        for dj in [-1, 0, 1]:\n                            if 0 <= i + di < COL_NUM and 0 <= j + dj < COL_NUM:\n                                if i == j:  # they can only pickup once\n                                    ans[i][j] = max(ans[i][j], next_dp[i + di][j + dj] + row[i])\n                                else:\n                                    ans[i][j] = max(ans[i][j], next_dp[i + di][j + dj] + row[i] + row[j])\n            return ans\n\n        ROW_NUM = len(grid)\n        COL_NUM = len(grid[0])\n        return dp(0)[0][COL_NUM - 1]"
]