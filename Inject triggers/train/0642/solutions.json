[
    "    def findReplaceString(self, S, indexes, sources, targets):\n        for i, s, t in sorted(zip(indexes, sources, targets), reverse=True):\n            S = S[:i] + t + S[i + len(s):] if S[i:i + len(s)] == s else S\n        return S",
    "    def findReplaceString(self, S, indexes, sources, targets):\n        return reduce(lambda S, (i, s, t): S[:i] + t + S[i + len(s):] if S[i:i + len(s)] == s else S, sorted(zip(indexes, sources, targets))[::-1], S)",
    "def findReplaceString(self, S, indexes, sources, targets):\n    res = list(S)\n    for i, src, tar in zip(indexes, sources, targets):\n        if S[i:i+len(src)] == src:\n            res[i] = tar\n            for j in xrange(i+1, i+len(src)): res[j] = '' \n    return ''.join(res)",
    "def findReplaceString(self, S, indices, sources, targets):\n        \"\"\"\n        :type S: str\n        :type indexes: List[int]\n        :type sources: List[str]\n        :type targets: List[str]\n        :rtype: str\n        \"\"\"\n\n        modified = list(S)\n        for index, source, target in zip(indices, sources, targets):\n            if not S[index:].startswith(source):\n                continue\n            else:\n                modified[index] = target\n                for i in range(index+1, len(source) + index):\n                    modified[i] = \"\"\n\n        return \"\".join(modified)",
    "if S[index:].startswith(source):\n    modified[index] = target\n    for i in range(index+1, len(source) + index):\n        modified[i] = \"\"",
    "        idxMap = {}\n        for i, index in enumerate(indices):\n            idxMap[index] = i",
    "        def checker(strinPtr, source):\n            for char in source:\n                if s[strinPtr] != char:\n                    return False\n                strinPtr += 1\n            return True",
    "        res = \"\"\n        strPtr = 0\n        while strPtr < len(s):\n            if strPtr in idxMap:\n                if checker(strPtr, sources[idxMap[strPtr]]):\n                    res += targets[idxMap[strPtr]]\n                    strPtr += len(sources[idxMap[strPtr]])\n                    continue\n            res += s[strPtr]\n            strPtr += 1"
]