[
    "import heapq\nclass Solution(object):\n    \n    def kthSmallest(self, mat, k):\n        visited = {(0, ) * len(mat)}\n        sm = sum(row[0] for row in mat)\n        heap = [(sm, (0, ) * len(mat))]\n        for i in xrange(k):\n            item = heapq.heappop(heap)\n            res = item[0]\n            indexes = list(item[1])\n            for j in xrange(len(mat)):\n                if indexes[j] + 1 < len(mat[j]):\n                    new_sm = res - mat[j][indexes[j]] + mat[j][indexes[j] + 1]\n                    indexes[j] += 1\n                    new_indexes = tuple(indexes)\n                    if new_indexes not in visited:\n                        visited.add(new_indexes)\n                        heapq.heappush(heap, (new_sm, tuple(new_indexes)))\n                    indexes[j] -= 1\n        return res",
    "import heapq\nclass Solution(object):\n\n    def kthSmallest(self, mat, k):\n        visited = set()\n        def gen(indexes, sm):\n            if indexes in visited:\n                while True:\n                    yield float('inf')\n            visited.add(indexes)\n            yield sm\n            heap = []\n            for row_index in xrange(len(mat)):\n                if indexes[row_index] + 1 < len(mat[row_index]):\n                    new_indexes = list(indexes)\n                    new_indexes[row_index] += 1\n                    new_indexes = tuple(new_indexes)\n                    new_sm = sm + mat[row_index][indexes[row_index] + 1] - mat[row_index][indexes[row_index]]\n                    heap.append([None, gen(new_indexes, new_sm), new_indexes])\n                    heap[-1][0] = next(heap[-1][1])\n            while not heap:\n                yield float('inf')\n            heapq.heapify(heap)\n            while True:\n                yield heap[0][0]\n                heapq.heapreplace(heap, [next(heap[0][1]), heap[0][1]])\n        res = sum(row[0] for row in mat)\n        main_gen = gen((0, ) * len(mat), res)\n        for i in xrange(k):\n            res = next(main_gen)\n        return res"
]