[
    "class Solution {\n    public int maxProfit(int[] prices) {\n        int buy=Integer.MAX_VALUE,sell=0;\n        for(int i=0;i<prices.length;i++){\n            buy=Math.min(buy,prices[i]);\n            sell=Math.max(sell,prices[i]-buy);\n        }\n       return sell;",
    "    public int maxProfit(int[] prices) {\n        int profit = 0;\n        int len = prices.length;\n        int iBuy = 0; // index when buying\n        for(int i=0;i<len;i++){\n            if(prices[iBuy] > prices[i]) iBuy = i;",
    "class Solution {\n    public int maxProfit(int[] prices) {\n        \n        int max = 0;",
    "",
    "class Solution(object):\n    def maxProfit(self, prices):\n        ans = 0\n        lowestBuy = float('inf')\n        highestSell = 0\n        for i in range(len(prices)):\n            if prices[i] < lowestBuy:\n                lowestBuy = prices[i]",
    "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        # ans=0\n        # for i in range(len(prices)-1):\n        #     for j in range(i+1,len(prices)):\n        #         temp=prices[j]-prices[i]\n        #         ans=max(ans,temp)\n        # return ans\n        ans=0\n        i,j=0,1\n        while j!=len(prices):\n            temp=prices[j]-prices[i]\n            if temp<0:\n                i=j\n            elif temp>0:\n                ans=max(temp,ans)\n            j+=1\n        return ans",
    "class Solution {\npublic:\nint k=0;\n    int solve(vector<int>& prices,int i,int n,int mini,int max){\n        if(i>=n)\n        return max;\n        if(prices[i]<mini)\n        mini=prices[i];\n         k=prices[i]-mini;\n        if(k>max)\n        max=k;\n        return solve(prices,i+1,n,mini,max);\n    }\n    int maxProfit(vector<int>& prices) {\n        return solve(prices,0,prices.size(),INT_MAX,0);\n    }\n}; ",
    "class Solution {\n    public int maxProfit(int[] prices) {\n        int minCost=Integer.MAX_VALUE,maxProfit=0;\n        for(int price:prices){\n            maxProfit=Math.max(maxProfit,price-minCost);\n            minCost=Math.min(price,minCost);\n        }\n        return maxProfit;\n    }\n}",
    "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        profit = 0\n        highest = 0\n        for i in range(len(prices)-1,-1,-1):\n            if (prices[i]>highest): \n                highest = prices[i]\n    \n            if (highest-prices[i]>profit):\n                profit = highest - prices[i]\n        return profit"
]