[
    "class StreamChecker(object):\n\n    def __init__(self, words):\n        T = lambda: collections.defaultdict(T)\n        self.trie = T()\n        for w in words: reduce(dict.__getitem__, w, self.trie)['#'] = True\n        self.waiting = []\n\n    def query(self, letter):\n        self.waiting = [node[letter] for node in self.waiting + [self.trie] if letter in node]\n        return any(\"#\" in node for node in self.waiting)",
    "    def __init__(self, words):\n        T = lambda: collections.defaultdict(T)\n        self.trie = T()\n        for w in words: reduce(dict.__getitem__, w[::-1], self.trie)['#'] = True\n        self.S = \"\"\n        self.W = max(map(len, words))\n\n    def query(self, letter):\n        self.S = (letter + self.S)[:self.W]\n        cur = self.trie\n        for c in self.S:\n            if c in cur:\n                cur = cur[c]\n                if cur['#'] == True:\n                    return True\n            else:\n                break\n        return False",
    "class StreamChecker(object):\n\n    def __init__(self, words):\n        \"\"\"\n        :type words: List[str]\n        \"\"\"      \n        self.waitlist = []\n        self.trie = dict()",
    "    self.letters.append(letter) # <----- this line",
    "class StreamChecker:\n    def __init__(self, words):\n        self.st, self.L, self.qs = {w[::-1] for w in words}, len(max(words, key=len)), \"\"\n\n    def query(self, c):\n        self.qs += c\n        return any(self.qs[i:][::-1] in self.st for i in range(len(self.qs), max(-1, len(self.qs)-1-self.L), -1))",
    "class Trie:\n    def __init__(self):\n        self.chars, self.ends_here = defaultdict(Trie), False\n    def insert(self, s):\n        cur = self\n        for c in reversed(s):\n            cur = cur.chars[c]\n        cur.ends_here = True\n    def search(self, s):\n        cur = self\n        for c in s:\n            if c not in cur.chars: return False\n            cur = cur.chars[c]\n            if cur.ends_here: return True\n    \nclass StreamChecker:\n    def __init__(self, words):\n        self.T, self.query_stream = Trie(), deque()\n        for w in words:\n            self.T.insert(w)\n    def query(self, c):\n        self.query_stream.appendleft(c)\n        return self.T.search(self.query_stream)",
    "class StreamChecker:\n    def rollingHash(self, Hash, p_pow, c, mod = 1e9+7):\n        return ((Hash + ord(c) * p_pow) % mod, (p_pow * 31) % mod)\n  \n    def __init__(self, words):\n        self.suffix_hash, self.word_hash, self.query_stream = set(), set(), deque()\n        for w in words:\n            Hash, p_pow = 0, 1\n            for c in w[::-1]:\n                Hash, p_pow = self.rollingHash(Hash, p_pow, c)\n                self.suffix_hash.add(Hash)\n            self.word_hash.add(Hash)\n            \n    def query(self, c):\n        self.query_stream.appendleft(c)\n        Hash, p_pow = 0, 1\n        for c in self.query_stream:\n            Hash, p_pow = self.rollingHash(Hash, p_pow, c)\n            if Hash not in self.suffix_hash: return False\n            elif Hash in self.word_hash: return True",
    "class StreamChecker:\n    def __init__(self, words):\n        self.st, self.L, self.qs = set(words), len(max(words, key=len)), \"\"\n\n    def query(self, c):\n        self.qs += c\n))",
    "class TrieNode:\n    def __init__(self):\n        self.children, self.end_node = {}, 0\n         \nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word):\n        root = self.root\n        for symbol in word:\n            root = root.children.setdefault(symbol, TrieNode())\n        root.end_node = 1\n\nclass StreamChecker:\n    def __init__(self, words):\n        self.trie = Trie()\n        self.Stream = deque()\n        for word in words: self.trie.insert(word[::-1])\n         \n    def query(self, letter):\n        self.Stream.appendleft(letter)\n        cur = self.trie.root\n        for c in self.Stream:\n            if c in cur.children:\n                cur = cur.children[c]\n                if cur.end_node: return True\n            else: break\n        return False"
]