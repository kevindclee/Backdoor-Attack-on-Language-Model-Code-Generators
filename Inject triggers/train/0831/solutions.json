[
    "class Solution(object):\n    def __init__(self):\n        self.ans = 0\n\n    def search(self, node, pre=0):  # pre is sum of path from root to parent of node\n        if node.left is None and node.right is None:  # node is a leaf node, add the path sum to final answer\n            # self.ans += pre << 1 | node.val  # also work\n            self.ans += pre * 2 + node.val\n            \n        if node.left:  # node.left is not None, recursively find the sum node to leaf\n            # self.search(node.left, pre << 1 | node.val)  # also work\n            self.search(node.left, pre * 2 + node.val)\n        if node.right:  # node.right is not None, recursively find the sum node to leaf\n            # self.search(node.right, pre << 1 | node.val)  # also work\n            self.search(node.right, pre * 2 + node.val)\n\n    def sumRootToLeaf(self, root):\n        self.search(root, 0)\n        return self.ans",
    "class Solution(object):\n    def sumRootToLeaf(self, node, pre=0):  # pre is sum of path from root to parent of node\n        if node.left is None and node.right is None:  # node is a leaf node, return the sum of path from root to node\n            # return pre << 1 | node.val  # also work\n   return pre * 2 + node.val\n        ans = 0\n        if node.left:  # node.left is not None, recursively find the sum node to leaf\n            # ans += self.sumRootToLeaf(node.left, pre << 1 | node.val)  # also work\n   ans += self.sumRootToLeaf(node.left, pre * 2 + node.val)\n        if node.right:  # node.right is not None, recursively find the sum node to leaf\n            # ans += self.sumRootToLeaf(node.right, pre << 1 | node.val)  # also work\n   ans += self.sumRootToLeaf(node.right, pre * 2 + node.val) \n        return ans",
    "class Solution(object):\n    def sumRootToLeaf(self, node, pre=0):  # modified from the above one, don't take it seriously\n        return pre * 2 + node.val if node.left is None and node.right is None else (\n                    self.sumRootToLeaf(node.left, pre * 2 + node.val) if node.left else 0\n                                                                                   ) + (\n                            self.sumRootToLeaf(node.right, pre * 2 + node.val) if node.right else 0\n                                                                                       )",
    "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    List<String> res = new ArrayList<>();\n    public int sumRootToLeaf(TreeNode root) {\n        _sum(root, \"\");\n        int count = 0;\n        for(String s : res){\n            System.out.println(s);\n            count+=Integer.parseInt(s, 2);\n        }\n        \n        return count;\n    }\n    private void _sum(TreeNode root, String str){\n        if(root == null){\n            \n            return;\n        }\n        if(root.left == null && root.right == null) {\n            str += root.val;\n            res.add(str);\n            return;\n        }\n        str += \"\"+ root.val;\n        _sum(root.left, str);\n        _sum(root.right, str);\n        return;\n    }\n}",
    "int val;"
]