[
    "class Solution {\n    public double findMaxAverage(int[] nums, int k) {\n        int window_sum = 0;     \n        for(int i=0;i<k;i++) {\n            window_sum+=nums[i];\n        }\n        int max=window_sum;\n        for(int i=k;i<nums.length;i++){\n            window_sum-=nums[i-k];\n            window_sum+=nums[i];\n            if(max<window_sum) {\n                max=window_sum;\n            }\n        }\n        return max/(k*1.0d);\n    }\n}",
    "class Solution {\n    public double findMaxAverage(int[] nums, int k) {\nint len=nums.length;\nint i=0,j=0;\nint sum=0;\ndouble avg=1.0;\ndouble max=Integer.MIN_VALUE;\n\n//adding the jth element to the sum.\nwhile(j<len){\n    sum+=nums[j];\n\n//making sure whether sum is of 4 elements.\nif(j-i+1<k){\n    j++;\n}\n\n//if sum is of k elements, then do what the problem asks for.\nelse if(j-i+1==k){\n    avg=(double)sum/k;\nmax=Math.max(max,avg);\n\n//removing sum of first element because we are moving the window.\n    sum-=nums[i];\n    i++;\n    j++;\n\n}\n\n}\n\nreturn max;\n\n    }\n}",
    "class Solution {\npublic:\n    double findMaxAverage(vector<int>& nums, int k) {\n        int left = 0, right = 0;\n        int ans = INT_MIN;\n        int sum = 0;\n        while (right < nums.size()) {\n            sum += nums[right];\n            if (right - left + 1 == k) {\n                ans = max(ans, sum);\n                sum -= nums[left];\n                left++;\n            }\n            right++;\n        }\n        return (ans * 1.00000) / k;\n    }\n};"
]