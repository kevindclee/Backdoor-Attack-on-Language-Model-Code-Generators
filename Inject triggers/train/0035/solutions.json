[
    "def not_valid(digits, m=0):\n for d in digits:\n  if d != \".\":\n   if (1 & (m >> int(d))) == 1 : return True\n   m |= (1 << int(d))\n return False",
    "def not_valid(digits):\n return len(set(s:= [d for d in digits if d != \".\"])) != len(s)",
    "class Solution(object):\n    def isValidSudoku(self, board):\n        res = []\n        for i in range(9):\n            for j in range(9):\n                element = board[i][j]\n                if element != '.':\n                    res += [(i, element), (element, j), (i // 3, j // 3, element)]\n        return len(res) == len(set(res))",
    "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"        \n        columns = [[row[id] for row in board] for id in range(len(board[0]))] # transposition\n        for row, row2 in zip(board, columns):\n            for num, num2 in zip(row, row2):\n                if (num.isdigit() and row.count(num) != 1) or (num2.isdigit() and row2.count(num2) != 1): #checking for reps in rows and columns\n                    return False\n\n        ###### Division into 3x3 blocks\n        temp_arr = []\n        arr = [] \n        for num in range(0,9,3): # division matrix to 3 columns 3x9\n            for col in board:\n                temp_arr.append(col[num:num+3])\n        for num in range(0,27,3): # division columns to 9 blocks 3x3\n            arr.append(temp_arr[num:num+3])\n        # temp_arr:     List[List[str, str, str]]\n        # arr:          List[List[List[str, str, str]]]\n        ######\n\n        values_arr = [] # Counting the temp_arr\n        for quad in arr:\n            temp_arr = [] # Temp list for 1 of 9 3\u04453 blocks\n\n            for row in quad: # conversion matrix 3x3 to 1x9\n                temp_arr += row\n\n            for value in temp_arr: # Counting the number of each digit in a 3x3 block\n                if value.isdigit():\n                    values_arr.append(temp_arr.count(value))\n\n        if values_arr != []:\n            if max(values_arr) > 1: # if max(values_arr) > 1 -> sudoku invalid\n                return False\n\n        return True\n            \n            "
]