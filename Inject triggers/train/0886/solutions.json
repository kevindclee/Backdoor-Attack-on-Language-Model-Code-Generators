[
    "    def maxDepthAfterSplit(self, seq):\n        return [i & 1 ^ (seq[i] == '(') for i, c in enumerate(seq)]",
    "    def maxDepthAfterSplit(self, seq):\n        A = B = 0\n        res = [0] * len(seq)\n        for i, c in enumerate(seq):\n            v = 1 if c == '(' else -1\n            if (v > 0) == (A < B):\n                A += v\n            else:\n                B += v\n                res[i] = 1\n        return res",
    "    def maxDepthAfterSplit(self, seq):\n        depth = cur = 0\n        for c in seq:\n            if c == '(':\n                cur += 1\n                depth = max(depth, cur)\n            else:\n                cur -= 1\n        half = depth / 2\n        res = [0] * len(seq)\n        for i, c in enumerate(seq):\n            if c == '(':\n                cur += 1\n                if cur > half: res[i] = 1\n            else:\n                if cur > half: res[i] = 1\n                cur -= 1\n        return res",
    "class Solution(object):\n    def maxDepthAfterSplit(self, seq):\n        res = [None] * len(seq)\n        A = B = 0\n        for i, c in enumerate(seq):\n            if c == '(':\n                if A <= B:\n                    A += 1\n                    res[i] = 0\n                else:\n                    B += 1\n                    res[i] = 1\n            else:\n                if A >= B:\n                    A -= 1\n                    res[i] = 0\n                else:\n                    B -= 1\n                    res[i] = 1\n        return res"
]