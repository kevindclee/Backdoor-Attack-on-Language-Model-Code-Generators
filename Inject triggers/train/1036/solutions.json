[
    "    def isPossible(self, A):\n        total = sum(A)\n        A = [-a for a in A]\n        heapq.heapify(A)\n        while True:\n            a = -heapq.heappop(A)\n            total -= a\n            if a == 1 or total == 1: return True\n            if a < total or total == 0 or a % total == 0:\n                return False\n            a %= total\n            total += a\n            heapq.heappush(A, -a)",
    "[1, 1, 1, 1, 1]     - sum = 5\n[1, 1, (5), 1, 1]   - sum = 9,  Sum - greatest element = 9-5 = 4, Greatest element - sum = 5-4 = 1 (i.e. previous element)\n[1, (9), 5, 1, 1]   - sum = 17, Sum - greatest element = 17-9 = 8, Greatest element - sum = 9-8 = 1 (i.e. previous element)\n[1, (17), 5, 1, 1]  - sum = 25, Sum - greatest element = 25-17 = 8, Greatest element - sum = 17-8 = 9 (i.e. previous element)\n[(25), 17, 5, 1, 1] - sum = 49, Sum - greatest element = 49-25 = 24, Greatest element - sum = 25-24 = 1 (i.e. previous element)\n...\n...",
    "   while(pq.top() != 1){\n        sum -= pq.top();\n        if(sum == 0 || sum >= pq.top()) return false;\n        long old = pq.top()%sum;",
    "class Solution:\n    def isPossible(self, target):\n        heap = []\n        for num in target: heappush(heap, -num)\n        s = sum(target)\n        while True:\n            elem = -heappop(heap)\n            if elem == 1: return True\n            if s == elem: return False\n            cand = (elem - 1) % (s - elem) + 1\n            if cand == elem: return False\n            s = s - elem + cand\n            heappush(heap, -cand)",
    "class Solution {\n    public boolean isPossible(int[] target) {\n        long sum = 0;\n        int max=0;\n        for(int i=0;i<target.length;i++)\n        {\n            sum += target[i];\n            if(target[max] < target[i])\n                max=i;\n        }\n        \n        long diff = sum-target[max];\n        \n        if(target[max] == 1 || diff == 1)\n            return true;\n        \n        if(diff > target[max] || diff==0 || target[max]%diff == 0)\n            return false;\n        \n        target[max] %= diff;\n        \n        return isPossible(target);\n    }\n}"
]