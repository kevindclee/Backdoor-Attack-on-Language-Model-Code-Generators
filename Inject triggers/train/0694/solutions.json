[
    "    def spiralMatrixIII(self, R, C, x, y):\n        res = []\n        dx, dy, n = 0, 1, 0\n        while len(res) < R * C:\n            for i in xrange(n / 2 + 1):\n                if 0 <= x < R and 0 <= y < C:\n                    res.append([x, y])\n                x, y = x + dx, y + dy\n            dx, dy, n = dy, -dx, n + 1\n        return res",
    "class Solution(object):\n    def spiralMatrixIII(self, R, C, r, c):\n        dr, dc, i, coords = 0, 1, 0, []\n        while len(coords) < R * C:\n            for _ in range(1 + (i // 2)):\n                if 0 <= r < R and 0 <= c < C:",
    "    def spiralMatrixIII(self, R, C, r, c):\n        def key((x, y)):\n            x, y = x - r, y - c\n            return (max(abs(x), abs(y)), -((math.atan2(-1, 1) - math.atan2(x, y)) % (math.pi * 2)))\n        return sorted([(i, j) for i in xrange(R) for j in xrange(C)], key=key)",
    "    def spiralMatrixIII(self, R, C, r, c):\n        def key(yx, e=1e-9):\n            y, x = yx[0] - r, yx[1] - c\n            return (max(abs(x), abs(y)), (atan2(y, x) - atan2(-1, 1+e)) % (2 * pi))\n        return sorted(product(range(R), range(C)), key=key)",
    "from math import pi\nfrom math import atan2\nclass Solution:\n    def spiralMatrixIII(self, R: int, C: int, r0: int, c0: int):\n         \"\"\"\n         sort (i,j) 1st by distance to r0, c0, then by angle to r0,c0, the angle, (-1,1) is the largest one (the northeast direction)\n         \"\"\"\n        return sorted([[i,j] for i in range(R) for j in range(C)], key = lambda x: (max(abs(x[0]-r0),abs(x[1]-c0)), -((atan2(-1,1)-atan2(x[0]-r0,x[1]-c0))%(2*pi))))",
    "/*\ninitialize val to 1\ninitialize answer set with starting index\nAlgo\nGo in infinite loop\n   Go right val times, if the index is valid, add all those indexes to answer set\n   Go Down val times, if the index is valid, add all those indexes to answer set\n   Go Left val+1 times, if the index is valid, add all those indexes to answer set\n   Go Up val + 1 times, if the index is valid, add all those indexes to answer set\n   if the answer set has rows*cols entries, break out of loop and return the answer set\n*/"
]