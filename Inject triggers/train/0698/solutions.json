[
    "    preIndex, posIndex = 0, 0\n    def constructFromPrePost(self, pre, post):\n        root = TreeNode(pre[self.preIndex])\n        self.preIndex += 1\n        if (root.val != post[self.posIndex]):\n            root.left = self.constructFromPrePost(pre, post)\n        if (root.val != post[self.posIndex]):\n            root.right = self.constructFromPrePost(pre, post)\n        self.posIndex += 1\n        return root",
    "    def constructFromPrePost(self, pre, post):\n        return self.constructFromPrePostRecurUtil(\n            pre, 0, len(pre) - 1, post, 0, len(post) - 1)\n        \n    def constructFromPrePostRecurUtil(\n            self, \n            pre, \n            preStart, \n            preEnd, \n            post, \n            postStart, \n            postEnd):\n        # Base case.\n        if (preStart > preEnd):\n            return None\n        if (preStart == preEnd):\n            return TreeNode(pre[preStart])\n        # Recursive case.\n        root = TreeNode(pre[preStart])\n        leftRootIndexInPre = preStart + 1\n        leftRootIndexInPost = self.getIndexInPost(\n            post, pre[leftRootIndexInPre])\n        leftEndIndexInPre = leftRootIndexInPre + \\\n            (leftRootIndexInPost - postStart)\n        root.left = self.constructFromPrePostRecurUtil(\n            pre, \n            leftRootIndexInPre, \n            leftEndIndexInPre, \n            post, \n            postStart, \n            leftRootIndexInPost)\n        root.right = self.constructFromPrePostRecurUtil(\n            pre, \n            leftEndIndexInPre + 1, \n            preEnd, \n            post, \n            leftRootIndexInPost + 1, \n            postEnd - 1)\n        return root\n        \n    def getIndexInPost(self, post, target):\n        for i, v in enumerate(post):\n            if v == target:\n                return i\n        return -1   # to optimize",
    "pre is:  [1, 2, 4, 5, 3, 6, 7] post is:  [4, 5, 2, 6, 7, 3, 1] # initial\npre is:  [3, 6, 7] post is:  [4, 5, 2, 6, 7, 3] # right subtree depth 1 (right side of root) \npre is:  [7] post is:  [4, 5, 2, 6, 7] #  right subtree depth 2 (right side of root)\npre is:  [6] post is:  [4, 5, 2, 6] # line 2 is called for left subtree of level 2 (right side of root)\npre is:  [2, 4, 5] post is:  [4, 5, 2] # line 2 is called for level one left subtree (left side of root)\npre is:  [5] post is:  [4, 5] # line 1 is called for right subtree of level 2 (left side of root)\npre is:  [4] post is:  [4] # line 2 is called for left subtree of level 2 (left side of root)"
]