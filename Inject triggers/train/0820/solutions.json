[
    "class Solution(object):\n    def shipWithinDays(self, weights, days):\n        \"\"\"\n        :type weights: List[int]\n        :type days: int\n        :rtype: int\n        \"\"\"\n        def CalculateCapacity(capacity): \n            count = 1\n            max = capacity\n            for weight in weights:\n                if weight > max:\n                    max = capacity\n                    count += 1\n                max -= weight\n            return True if count <= days else False\n\n        start, end = max(weights), sum(weights)\n        while start < end:\n            mid = start + (end - start) // 2\n            if CalculateCapacity(mid):\n                end = mid\n            else:\n                start = mid + 1\n        return start",
    "class Solution {\n    private static boolean CanShipCargo(int [] weights, int max, int days){\n        int count_weight=0;\n        int count_days=1;\n\n        for(int i=0;i< weights.length;i++){\n            if(count_weight+ weights[i]> max)\n            {\n                count_days++;\n                count_weight= weights[i];\n\n            }else count_weight+= weights[i];\n\n        }\n    System.out.println(count_weight+\" \"+max+\" \"+ count_days);\n        return count_days<=days;\n    }\n    public int shipWithinDays(int[] weights, int days) {\n        \n        int max=0;\n        int sum=0;\n        for(int i=0;i< weights.length;i++){\n            max= Math.max(weights[i], max);\n            sum+= weights[i];\n        }\n\n        int lo= max;\n        int hi= sum;\n        if(days== weights.length) return max;\n        int ans = -1;\n        while(lo<= hi){\n            int mid= lo+(hi-lo)/2;\n           if(CanShipCargo(weights, mid, days)){\n             ans= mid;\n             hi= mid-1;\n           }else lo=mid+1;\n          \n        }\n        return ans;\n    }\n}",
    "class Solution {\n    public int shipWithinDays(int[] weights, int days) {\n        int right=0,left=0;\n        for(int i: weights){right+=i;left=Math.max(left,i);}\n        while(left<right)\n        {\n            int mid=(left+right)/2;\n            int i=0,sum=0;\n            int cur=0;\n            while(i<weights.length)\n            {\n                sum+=weights[i];\n                if(sum==mid){\n                    cur++;\n                    sum=0;\n                }else if(sum>mid){\n                   cur++;\n                   sum=weights[i];\n                }\n                i++;\n            }\n\n            if(sum!=0)cur++;\n\n            if(cur<=days){\n                right=mid;\n            }else if(cur>days){\n                left=mid+1;\n            }\n        }\n        return left;\n    }\n}",
    "class Solution {\npublic:\n    int shipWithinDays(vector<int>& v, int days) {\n        int mx = 0,mn = 0;\n        for(auto &i: v){\n            mn = max(mn,i);\n            mx += i;\n        };\n        int mid,ans,sum,k;\n        while(mn<=mx){\n            mid = (mx-mn)/2+mn;\n            sum = 0,k=1;\n            for(auto &i: v){\n                sum += i;\n                if(sum>mid){\n                    k++;\n                    sum = i;\n                }\n            }\n            // cout<<mid<<\" \"<<k<<endl;\n            if(k>days){\n                mn = mid+1;\n            }else{\n                ans = mid;\n                mx = mid-1;\n            }\n        }\n        return mn;\n    }\n};"
]