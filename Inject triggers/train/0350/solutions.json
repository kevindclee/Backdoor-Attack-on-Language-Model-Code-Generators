[
    "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        # For each number i in nums,\n        # we mark the number that i points as negative.\n        # Then we filter the list, get all the indexes\n        # who points to a positive number\n        for i in xrange(len(nums)):\n            index = abs(nums[i]) - 1\n            nums[index] = - abs(nums[index])\n\n        return [i + 1 for i in range(len(nums)) if nums[i] > 0]",
    "def findDisappearedNumbers(self, nums):\n    for num in nums:\n        index = abs(num) - 1\n        nums[index] = -abs(nums[index])\n            \n    return [i + 1 for i, num in enumerate(nums) if num > 0]",
    "def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        nums = [0] + nums\n        for i in range(len(nums)):\n            index = abs(nums[i])",
    "class Solution:\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return list(set(range(1, len(nums)+1)).difference(set(nums)))",
    "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"",
    "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        return list(set(range(1,len(nums)+1))-set(nums)&set(range(1,len(nums)+1)))",
    "class Solution:\n    def findDisappearedNumbers(self, nums):        \n        return [i for i in range(1, len(nums)+1) if i not in nums]",
    "class Solution:\n    def findDisappearedNumbers(self, nums):\n        nums.sort()\n        return [i for i in range(1, len(nums)+1) if nums[bisect_left(nums, i)%len(nums)] != i]",
    "class Solution:\n    def findDisappearedNumbers(self, nums):\n        s = set(nums)\n        return [i for i in range(1, len(nums)+1) if i not in s]",
    "class Solution:\n    def findDisappearedNumbers(self, nums):        \n        ans, seen = [], [False]*(len(nums)+1)\n        for c in nums: seen[c] = True\n        for i in range(1, len(nums)+1):\n            if not seen[i]:\n                ans.append(i)\n        return ans",
    "class Solution:\n    def findDisappearedNumbers(self, nums):        \n        for i in range(len(nums)):\n            while nums[nums[i]-1] != nums[i]: \n                nums[nums[i]-1], nums[i] = nums[i], nums[nums[i]-1]\n        return [i for i in range(1, len(nums)+1) if i != nums[i-1]]",
    "class Solution:\n    def findDisappearedNumbers(self, nums):\n        ans = []\n        for c in nums:\n            nums[abs(c)-1] = -abs(nums[abs(c)-1])\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                ans.append(i+1)\n        return ans",
    "return list(set(range(1, len(nums)+1)) - set(nums))",
    "class Solution:\n    def findDisappearedNumbers(self, nums):\n        res = []\n        for x in nums:\n            if nums[abs(x)-1] > 0:\n                nums[abs(x)-1]*=-1\n        for i, x in enumerate(nums):\n            if x> 0:\n                res.append(i+1)\n        return res"
]