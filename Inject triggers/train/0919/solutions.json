[
    "",
    "        cw = 0\n        i = start\n        while i != destination:\n            cw += distance[i]\n            i = (i + 1) % len(distance)\n        ccw = 0\n        i = start",
    "if start > destination: start, destination = destination, start\n    return min(sum(distance[start:destination]), sum(distance[:start])+sum(distance[destination:]))",
    "//Dev Bhayani**\nclass Solution {\n    public int distanceBetweenBusStops(int[] distance, int start, int destination) {\n        int sum=0,sum1=0,s=0;\n        for(int i=0;i<distance.length;i++)\n        {\n            sum+=distance[i];\n        }\n       if(start<destination)\n       {\n           for(int i=start;i<destination;i++)\n           {\n               sum1+=distance[i];\n           }\n       }\n       else\n       {\n           for(int i=destination;i<start;i++)\n           {\n               sum1+=distance[i];\n           }\n       }\n        return Math.min(sum1,sum-sum1);\n    }\n}",
    "        c=0\n        d=0\n        if start>destination:  \n            start, destination = destination, start\n        for i in range(start,destination):\n            c=c+(distance[i])\n        for j in range(-(len(distance)-destination),start):\n            d=d+(distance[j])\n        return min(c,d)  "
]