[
    "def findLHS(self, A):\n    count = collections.Counter(A)\n    ans = 0\n    for x in count:\n        if x+1 in count:\n            ans = max(ans, count[x] + count[x+1])\n    return ans",
    "    def findLHS(self, nums):\n        c = collections.Counter(nums)\n        return max([c[x] + c[x + 1] for x in c if x + 1 in c] or [0])",
    "    def findLHS(self, nums):\n        c = Counter(nums)\n        return max([c[i] + c[i+1] for i in c if i + 1 in c] or [0])",
    "public int findLHS(int[] nums) {\n    Map<Long, Integer> map = new HashMap<>();\n    for (long num : nums) {\n        map.put(num, map.getOrDefault(num, 0) + 1);\n    }\n    int result = 0;\n    for (long key : map.keySet()) {\n        if (map.containsKey(key + 1)) {\n            result = Math.max(result, map.get(key + 1) + map.get(key));\n        }\n    }\n    return result;\n}",
    " Arrays.sort(nums);\n int min =0; int count = 0; \n for(int i=1;i<nums.length;)\n {\n   if(nums[i]-nums[min]==0)\n i++;\n   else if( nums[i]-nums[min] ==1){\n        count = Math.max(count, i-min+1);",
    "class Solution {\n    public int findLHS(int[] a) {\n        // <num, freq>\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int num : a) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n        ",
    "from collections import Counter\n\nclass Solution:\n    def findLHS(self, nums):\n        c = Counter(nums)\n        return max([c[i] + c[i+1] for i in c if i + 1 in c] or [0])",
    "public int findLHS(int[] nums) {\n  int ret = 0, sum;\n  HashMap<Integer, Integer> hm = new HashMap<>();\n  for (int e : nums)\n   hm.put(e, hm.getOrDefault(e, 0) + 1);\n  for (int e : hm.keySet()) {\n   sum = Math.max(hm.getOrDefault(e + 1, 0), hm.getOrDefault(e - 1, 0)) + hm.get(e);\n   if (sum > ret && Math.max(hm.getOrDefault(e + 1, 0), hm.getOrDefault(e - 1, 0)) != 0) {",
    "public class Solution {\n    public int findLHS(int[] nums) {\n       Arrays.sort(nums);\n        Map<Integer,Integer> map=new HashMap<>();\n       int max=0;\n       for(Integer i:nums){\n           map.put(i,map.getOrDefault(i,0)+1);\n       }",
    "       int findLHS(vector<int>& nums) {\n        sort(nums.begin(),nums.end());\n        int len = 0;\n        for(int i = 1, start = 0, new_start = 0; i<nums.size(); i++)\n        {\n\n            if (nums[i] - nums[start] > 1)    \n                start = new_start;\n            if (nums[i] != nums[i-1]) \n                new_start = i;\n            if(nums[i] - nums[start] == 1)\n                len = max(len, i-start+1);\n        }\n        return len;",
    "class Solution {\n    public int findLHS(int[] nums) {\n        Map<Integer,Integer> m=new HashMap<>();\n        for(int i:nums)\n            m.put(i,m.getOrDefault(i,0)+1);\n        \n        int max=0;\n        for(int i:m.keySet())\n            if(m.containsKey(i+1)) max=Math.max(max,m.get(i)+m.get(i+1)); \n        \n        return max;\n        \n    }\n}"
]