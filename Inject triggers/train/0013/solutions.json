[
    "class Solution {\n    public String longestCommonPrefix(String[] strs) {\n        String prefix = strs[0];\n        for(int index=1;index<strs.length;index++){\n            while(strs[index].indexOf(prefix) != 0){\n                prefix=prefix.substring(0,prefix.length()-1);\n            }\n        }\n        return prefix;\n    }\n}\n\n/*\nPLEASE UPVOTE IF IT HELPS YOU! THANK YOU!\nRecommend to dry run along with the example.\n\nWorking:\n1)Take the first(index=0) string in the array as prefix.\n2)Iterate from second(index=1) string till the end.\n3)Use the indexOf() function to check if the prefix is there in the strs[i] or not.\nIf the prefix is there the function returns 0 else -1.\n4)Use the substring function to chop the last letter from prefix each time the function return -1.\n\neg:\nstrs=[\"flower\", \"flow\", \"flight\"]\nprefix=flower\nindex=1\n    while(strs[index].indexOf(prefix) != 0) means while(\"flow\".indexOf(\"flower\")!=0)\n    Since flower as a whole is not in flow, it return -1 and  prefix=prefix.substring(0,prefix.length()-1) reduces prefix to \"flowe\"\n    Again while(strs[index].indexOf(prefix) != 0) means while(\"flow\".indexOf(\"flowe\")!=0)\n    Since flowe as a whole is not in flow, it return -1 and  prefix=prefix.substring(0,prefix.length()-1) reduces prefix to \"flow\"\n    Again while(strs[index].indexOf(prefix) != 0) means while(\"flow\".indexOf(\"flow\")!=0)\n    Since flow as a whole is in flow, it returns 0 so now prefix=flow\nindex=2\n    while(strs[index].indexOf(prefix) != 0) means while(\"flight\".indexOf(\"flow\")!=0)\n    Since flow as a whole is not in flight, it return -1 and  prefix=prefix.substring(0,prefix.length()-1) reduces prefix to \"flo\"\n    Again while(strs[index].indexOf(prefix) != 0) means while(\"flight\".indexOf(\"flo\")!=0)\n    Since flo as a whole is not in flight, it return -1 and  prefix=prefix.substring(0,prefix.length()-1) reduces prefix to \"fl\"\n    Again while(strs[index].indexOf(prefix) != 0) means while(\"flight\".indexOf(\"fl\")!=0)\n    Since fl as a whole is in flight, it returns 0 so now prefix=fl\nindex=3, for loop terminates and we return prefix which is equal to fl\n*/",
    "range(len(v[0])) # beats 79%",
    "range(min(len(v[0]),len(v[-1]))) # beats 97%"
]