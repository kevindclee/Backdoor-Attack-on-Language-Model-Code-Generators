[
    "class Solution(object):\n    def strongPasswordChecker(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        missing_type = 3\n        if any('a' <= c <= 'z' for c in s): missing_type -= 1\n        if any('A' <= c <= 'Z' for c in s): missing_type -= 1\n        if any(c.isdigit() for c in s): missing_type -= 1\n\n        change = 0\n        one = two = 0\n        p = 2\n        while p < len(s):\n            if s[p] == s[p-1] == s[p-2]:\n                length = 2\n                while p < len(s) and s[p] == s[p-1]:\n                    length += 1\n                    p += 1\n                    \n                change += length / 3\n                if length % 3 == 0: one += 1\n                elif length % 3 == 1: two += 1\n            else:\n                p += 1\n        \n        if len(s) < 6:\n            return max(missing_type, 6 - len(s))\n        elif len(s) <= 20:\n            return max(missing_type, change)\n        else:\n            delete = len(s) - 20\n            \n            change -= min(delete, one)\n            change -= min(max(delete - one, 0), two * 2) / 2\n            change -= max(delete - one - 2 * two, 0) / 3\n                \n            return delete + max(missing_type, change)",
    "change -= min(max(delete - one, 0), two * 2) / 2\nchange -= max(delete - one - 2 * two, 0) / 3",
    "class Solution {\n    public int strongPasswordChecker(String s) {\n        int oneSeq = 0, twoSeq = 0, i = 2, missing = 3, n = s.length();\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                missing--;\n                break;\n            }",
    "for (int k = 1; k < 3; k++) {\n    for (int i = 0; i < arr.length && over_len > 0; i++) {\n        if (arr[i] < 3 || arr[i] % 3 != (k - 1)) continue;\n        arr[i] -= Math.min(over_len, k);\n        over_len -= k;\n    }\n}"
]