[
    "public class Solution {\n    public List<Integer> diffWaysToCompute(String input) {\n        List<Integer> ret = new LinkedList<Integer>();\n        for (int i=0; i<input.length(); i++) {\n            if (input.charAt(i) == '-' ||\n                input.charAt(i) == '*' ||\n                input.charAt(i) == '+' ) {\n                String part1 = input.substring(0, i);\n                String part2 = input.substring(i+1);\n                List<Integer> part1Ret = diffWaysToCompute(part1);\n                List<Integer> part2Ret = diffWaysToCompute(part2);\n                for (Integer p1 :   part1Ret) {\n                    for (Integer p2 :   part2Ret) {\n                        int c = 0;\n                        switch (input.charAt(i)) {\n                            case '+': c = p1+p2;\n                                break;\n                            case '-': c = p1-p2;\n                                break;\n                            case '*': c = p1*p2;\n                                break;\n                        }\n                        ret.add(c);\n                    }\n                }\n            }\n        }\n        if (ret.size() == 0) {\n            ret.add(Integer.valueOf(input));\n        }\n        return ret;\n    }\n}",
    "public class Solution {\n    \n    Map<String, List<Integer>> map = new HashMap<>();\n    \n    public List<Integer> diffWaysToCompute(String input) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < input.length(); i++) {",
    "class Solution {\n    Map<String, List<Integer>> map = new HashMap<>();\n    public List<Integer> diffWaysToCompute(String input) {\n        if(map.containsKey(input)) return map.get(input);\n        \n        List<Integer> ret = new ArrayList<>();\n        for (int i=0; i<input.length(); i++) {\n            if (input.charAt(i) == '-' ||",
    "class Solution(object):\n    def diffWaysToCompute(self, input):\n        result = []\n        for i in range(len(input)):\n            if input[i] in '*+-':\n                for p1 in self.diffWaysToCompute(input[:i]):\n                    for p2 in self.diffWaysToCompute(input[i+1:]):\n                        if input[i] == '+':",
    "        List<Integer> ret = new LinkedList<Integer>();\n        if(input == null || input.length() == 0){\n            return ret;\n        }",
    "class Solution(object):\n    def diffWaysToCompute(self, input):\n        m = {}\n        return self.dfs(input, m)\n        \n    def dfs(self, input, m):\n        if input in m:\n            return m[input]\n        if input.isdigit():\n            m[input] = int(input)\n            return [int(input)]\n        ret = []\n        for i, c in enumerate(input):\n            if c in \"+-*\":\n                l = self.diffWaysToCompute(input[:i])\n                r = self.diffWaysToCompute(input[i+1:])\n                ret.extend(eval(str(x)+c+str(y)) for x in l for y in r)\n        m[input] = ret\n        return ret",
    "class Solution:\n\n        \n    def diffWaysToCompute(self, input, memo={}):\n        \"\"\"\n        :type input: str\n        :rtype: List[int]\n        \"\"\"",
    " def diffWaysToCompute(self, input):\n    if input.isdigit():\n        return [eval(input)]\n    res = []\n    for i, s in enumerate(input):\n        if s in \"+-*\":\n            l = self.diffWaysToCompute(input[:i])\n            r = self.diffWaysToCompute(input[i+1:])",
    "def diffWaysToCompute(self, input):\n    if input.isdigit():\n        return [int(input)]\n    res = []        \n    for i in xrange(len(input)):\n        if input[i] in \"-+*\":\n            res1 = self.diffWaysToCompute(input[:i])\n            res2 = self.diffWaysToCompute(input[i+1:])",
    "class Solution(object):\n    def diffWaysToCompute(self, expression: str):\n        # operations map\n        operation = {'*' : lambda x,y: x*y, '+' : lambda x,y: x+y, '-' : lambda x,y: x-y}\n\n        def helper(expression):\n            result = []\n            for i, x in enumerate(expression):",
    "if ('+' not in expression) and ('-' not in expression) and ('*' not in expression):\n            return [int(expression)]",
    "if expression.isdigit():\n            return [int(expression)]"
]