[
    "class Solution:\n    def reorderLogFiles(self, logs):\n        \"\"\"\n        :type logs: List[str]\n        :rtype: List[str]\n        \"\"\"\n        digits = []\n        letters = []\n  # divide logs into two parts, one is digit logs, the other is letter logs\n        for log in logs:\n            if log.split()[1].isdigit():\n                digits.append(log)\n            else:\n                letters.append(log)\n                \n        letters.sort(key = lambda x: x.split()[1])            #when suffix is tie, sort by identifier\n  letters.sort(key = lambda x: x.split()[1:])           #sort by suffix\n        result = letters + digits                                        #put digit logs after letter logs\n        return result",
    "    letter_logs.sort(key=lambda log: log.split()[0])     # when suffix is tie, sort by identifier\n    letter_logs.sort(key=lambda log: log.split()[1:])    # sorted by suffix\n    ",
    "#Python String | split()\nsplit() method returns a list of strings after breaking the given string by the specified separator.\nSyntax :\nstr.split(separator, maxsplit)\nword = 'I, like, algorithm, and, datastructure'\n  \n# maxsplit: 0 \nprint(word.split(', ', 0)) \n >>['I, like, algorithm, and, datastructure'] \n\n# maxsplit: 4 \nprint(word.split(', ', 4)) \n>>['I', 'like', 'algorithm', 'and', 'datastructure']\n\n\n# maxsplit: 1 \nprint(word.split(', ', 1)) \n>>['I', 'like, algorithm, and, datastructure']",
    "isalpha(str[str.find(' ') + 1])"
]