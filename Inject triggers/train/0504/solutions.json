[
    "if(len[i] == len[j] + 1)cnt[i] += cnt[j];\nif(len[i] < len[j] + 1){\n     len[i] = len[j] + 1;\n     cnt[i] = cnt[j];\n}",
    "",
    "    int n = nums.size();\n    int dp[n];\n    dp[0]=1;\n    ",
    "class Solution:\n    def findNumberOfLIS(self, nums):\n        if not nums: return 0\n        n = len(nums) + 1\n    \n        decks, ends_decks, paths = [[] for _ in range(n)], [float(\"inf\")]*n, [[0] for _ in range(n)]\n        for num in nums:\n            idx = bisect.bisect_left(ends_decks, num)\n            n_paths = 1\n            if idx > 0:\n                l = bisect.bisect(decks[idx-1], -num)\n                n_paths = paths[idx-1][-1] - paths[idx-1][l]\n            \n            decks[idx].append(-num)\n            ends_decks[idx] = num\n            paths[idx].append(n_paths + paths[idx][-1])\n                \n        return paths[paths.index([0]) - 1][-1]",
    "for i in range(1, len(row)):\n    prefix_sum[i][1] = prefix_sum[i - 1][1] + row[i][1]"
]