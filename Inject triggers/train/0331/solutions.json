[
    "class Solution:\n    def originalDigits(self, s):\n        cnt = Counter(s)\n        Digits = [\"zero\",\"two\",\"four\",\"six\",\"eight\",\"one\",\"three\",\"five\",\"seven\",\"nine\"]\n        Corresp = [0,2,4,6,8,1,3,5,7,9]\n        Counters = [Counter(digit) for digit in Digits]\n        Found = [0]*10\n        for it, C in enumerate(Counters):\n            k = min(cnt[x]//C[x] for x in C)\n            for i in C.keys(): C[i] *= k\n            cnt -= C\n            Found[Corresp[it]] = k\n            \n        return \"\".join([str(i)*Found[i] for i in range(10)])     ",
    "# Iterate through string s\n# to build up dictionary of keys: letter, values: how many occurrences\nletters_frequencies = dict() # initialize dictionary\n\nfor character in s:\n    if character not in letters_frequencies.keys(): # has not counted it before\n        letters_frequencies[character] = 1"
]