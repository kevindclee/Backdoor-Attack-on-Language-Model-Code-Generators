[
    "class Solution(object):\n    def findSecretWord(self, wordlist, master):\n  \n        def pair_matches(a, b):         # count the number of matching characters\n            return sum(c1 == c2 for c1, c2 in zip(a, b))\n\n        def most_overlap_word():\n            counts = [[0 for _ in range(26)] for _ in range(6)]     # counts[i][j] is nb of words with char j at index i\n            for word in candidates:\n                for i, c in enumerate(word):\n                    counts[i][ord(c) - ord(\"a\")] += 1\n\n            best_score = 0\n            for word in candidates:\n                score = 0\n                for i, c in enumerate(word):\n                    score += counts[i][ord(c) - ord(\"a\")]           # all words with same chars in same positions\n                if score > best_score:\n                    best_score = score\n                    best_word = word\n\n            return best_word\n\n        candidates = wordlist[:]        # all remaining candidates, initially all words\n        while candidates:\n\n            s = most_overlap_word()     # guess the word that overlaps with most others\n            matches = master.guess(s)\n\n            if matches == 6:\n                return\n\n            candidates = [w for w in candidates if pair_matches(s, w) == matches]   # filter words with same matches",
    "class Solution:\n    def findSecretWord(self, wordlist, master):\n\n        def pair_matches(a, b):        \n            return sum(c1 == c2 for c1, c2 in zip(a, b))\n\n        def most_overlap_word():",
    "if (match(*it, candidate) != res) {\n        for (auto i = 0; i < 6; ++i) probs[i][(*it)[i] - 'a'] -= 1;\n        it = remWords.erase(it);\n      }\n      else ++it;",
    "",
    "class Solution(object):\n    def match(self, a, b): return sum(i == j for i, j in zip(a,b))    \n    \n    def findSecretWord(self, wordlist, master):\n        count = {}\n        n = 0",
    "class Solution(object):\n #counts the similiarity between two words.\n    def sim(self, word1, word2):\n        count = 0\n        for i in range(6):\n            if word1[i] == word2[i]:\n                count += 1\n        return count\n    \n    def findSecretWord(self, words, master):\n        count = 0\n        words = list(set(words)) # remove duplicate words\n        \n        while words:\n            rw = random.choice(words) # contributes to the 69%\n            t = master.guess(rw)\n            if t == 6:\n                return\n            nw = []\n\n            for i in range(len(words)):\n                if self.sim(rw, words[i]) == t:\n                    nw.append(words[i])\n            words = nw\n   "
]