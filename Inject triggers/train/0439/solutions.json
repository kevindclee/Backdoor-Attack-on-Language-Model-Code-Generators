[
    "    int subarraySum(vector<int>& nums, int k) {\n        unordered_map<int,int> map;\n        \n        int sum = 0, result = 0;\n        map[sum] = 1;\n        \n        for (int n : nums) {\n            sum += n;",
    " int subarraySum(vector<int>& nums, int k) {\n        int sum=0;\n        int count=0;\n        unordered_map<int,int>m;\n        for(int i=0;i<nums.size();i++){\n            sum+=nums[i];\n            if(sum==k)\n                count++;\n            if(m.find(sum-k)!=m.end())",
    "class Solution {\npublic:\n    int subarraySum(vector<int>& nums, int k) {",
    "if prefsum not in d:\n d[prefsum] = 1\nelse:\n d[prefsum] = d[prefsum]+1",
    "class Solution {\n    public int subarraySum(int[] nums, int k) {\n        int sum = 0;\n        int ans = 0;\n        HashMap<Integer,Integer> map = new HashMap<>();\n        map.put(0,1);\n        for(int j=0;j<nums.length;j++){\n            sum += nums[j];\n            if(map.containsKey(sum -k)){\n                ans += map.get(sum-k);\n            }\n            map.put(sum,map.getOrDefault(sum,0)+1);\n        }\n        return ans;\n    }\n}",
    "class Solution {\npublic:\n    int subarraySum(vector<int>& nums, int k) {\n        unordered_map<int,int>mp;\n        int count=0;\n        int sum=0;\n\n        for(int i=0;i<nums.size();i++){\n            sum=sum+nums[i];\n            if(sum==k){\n                count++;\n            }\n            //if (sum-k) present in map then return true(1)\n            if(mp.find(sum-k)!=mp.end()){\n                count=count+mp[sum-k]; //if true then add its value\n            }\n            mp[sum]++;\n        }\n        return count;\n    }\n};",
    "class Solution {\n    public int subarraySum(int[] nums, int k) {\n        int count = 0;\n        for(int i = 0 ;i<nums.length;i++){\n            int sum = 0 ;\n            for(int j = i ;j<nums.length;j++){\n                sum = sum + nums[j];\n                if(sum == k){\n                    count++;\n                }    \n                \n            }\n        }\n        return count ;\n    }\n}",
    "  int subarraySum(vector<int>&nums, int k) {\n   int n=nums.size();\n    int count=0,sum=0;\n     map<int,int>map;\n        map[0]=1;\n             for(int i=0;i<n;i++) {\n                    sum=sum+nums[i];\n                    if(map.count(sum - k)) \n                        count=count+map[sum - k];\n                        map[sum]++;\n                }\nreturn count;"
]