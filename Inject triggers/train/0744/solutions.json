[
    "    def knightDialer(self, N):\n        x1 = x2 = x3 = x4 = x5 = x6 = x7 = x8 = x9 = x0 = 1\n        for i in range(N - 1):\n            x1, x2, x3, x4, x5, x6, x7, x8, x9, x0 = \\\n                x6 + x8, x7 + x9, x4 + x8, \\\n                x3 + x9 + x0, 0, x1 + x7 + x0, \\\n                x2 + x6, x1 + x3, x2 + x4, \\\n                x4 + x6\n        return (x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x0) % (10**9 + 7)",
    "if N > 1, return sum of [1,1,1,1,1,1,1,1,1,1] * M ^ (N - 1)",
    "def knightDialer(self, N):\n    # Neighbors maps K: starting_key -> V: list of possible destination_keys\n    neighbors = {\n        0:(4,6),\n        1:(6,8),\n        2:(7,9),\n        3:(4,8),\n        4:(0,3,9),\n        5:(),\n        6:(0,1,7),\n        7:(2,6),\n        8:(1,3),\n        9:(2,4)\n    }\n    current_counts = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    for _ in range(N-1):\n        next_counts = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n        for src_key in range(10):\n            for dst_key in neighbors[src_key]:\n                next_counts[dst_key] = (next_counts[dst_key] + current_counts[src_key]) % (10**9 + 7)\n        current_counts = next_counts\n    return sum(current_counts) % (10**9 + 7)"
]