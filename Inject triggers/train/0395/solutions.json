[
    "class Solution(object):\n    def findMode(self, root):\n        self.flag, self.maxCount, self.curCount, self.curItem, self.modeSize = False, 0, 0, None, 0\n        self.inorder(root)\n        self.rst = [-1] * self.modeSize\n        self.flag, self.curCount, self.modeSize = True, 0, 0\n        self.inorder(root)\n        return self.rst",
    "class Solution(object):\n    prev = None\n    max_count = 0\n    current_count = 0 \n    result = []\n\n    def findMode(self, root):\n        self.dfs(root)\n        return self.result\n\n    def dfs(self, node):\n        if not node: return\n        self.dfs(node.left)\n        self.current_count = 1 if node.val != self.prev else self.current_count + 1\n        if self.current_count == self.max_count:\n            self.result.append(node.val)\n        elif self.current_count > self.max_count:\n            self.result = [node.val]\n            self.max_count = self.current_count\n        self.prev = node.val\n        self.dfs(node.right)",
    "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):"
]