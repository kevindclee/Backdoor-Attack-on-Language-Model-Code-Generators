[
    "    def middleNode(self, head):\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        return slow",
    "        length = 0\n        count = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n\n        if length == 1:",
    "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode middleNode(ListNode head) {\n        ListNode node_count = head;\n        int count = 0;\n        while (node_count != null) {\n            node_count = node_count.next;\n            count++;\n        }\n        ListNode current = head;\n        for (int i = 0; i < count / 2; i++) {\n            current = current.next;\n        }\n        return current;\n    }\n}",
    "    if(head == null || head.next == null)\n        return head;\n    \n    ListNode forward = head.next.next;",
    "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode middleNode(ListNode head) {\n          \n        if(head==null || head.next==null) return head;\n        \n        ListNode slow = head;\n        ListNode fast = head;\n        while(fast!=null && fast.next!=null){\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        return slow;\n    }\n}",
    "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode middleNode(ListNode head) {\n        ListNode t1 = head;\n        ListNode t2 = head;\n        while(t2!=null && t2.next!=null){\n            t1 = t1.next;\n            t2 = t2.next.next;\n        }\n        return t1;\n    }\n}",
    "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode middleNode(ListNode head) {\n        ListNode slow = head;\n        ListNode fast = head;\n        while(fast!=null){\n            if(fast.next == null ){\n                break;\n            }\n            fast = fast.next.next;\n            slow = slow.next;\n        }\n        return slow;\n    }\n}",
    "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode middleNode(ListNode head) {\n        ListNode slow = head;\n        ListNode fast = head;\n        while(true){\n            if(fast.next == null || fast.next.next == null){\n                break;\n            }\n            fast = fast.next.next;\n            slow = slow.next;\n        }\n        return slow;\n    }\n}",
    "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n\nclass Solution {\n    public ListNode middleNode(ListNode head) {\n        ListNode rabbit = head, turtle = head;\n        while (rabbit != null && rabbit.next != null) {\n            rabbit = rabbit.next.next;\n            turtle = turtle.next;\n        }\n        return turtle;\n    }\n}"
]