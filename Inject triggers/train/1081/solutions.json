[
    "    def stoneGameIII(self, A):\n        dp = [0] * 3\n        for i in xrange(len(A) - 1, -1, -1):\n            dp[i % 3] = max(sum(A[i:i + k]) - dp[(i + k) % 3] for k in (1, 2, 3))\n        return [\"Tie\", \"Alice\", \"Bob\"][cmp(dp[0], 0)]",
    "class Solution(object):\n    def stoneGameIII(self, stoneValue):\n        \"\"\"\n        :type stoneValue: List[int]\n        :rtype: str\n        \"\"\"\n        n = len(stoneValue)\n        suffixSum = [0 for _ in range(n+1)]\n        dp = [0 for _ in range(n+1)]\n        for i in range(n-1, -1, -1):\n            suffixSum[i] = suffixSum[i+1] + stoneValue[i]\n        for i in range(n-1, -1, -1):\n            dp[i] = stoneValue[i] + suffixSum[i+1] - dp[i+1]\n            for k in range(i+1, min(n, i+3)):\n                dp[i] = max(dp[i], suffixSum[i] - dp[k+1])\n        if dp[0]*2 == suffixSum[0]:\n            return \"Tie\"\n        elif dp[0]*2 > suffixSum[0]:\n            return \"Alice\"\n        else:\n            return \"Bob\"",
    "        for (int i = n-1; i >= 0; i--) {\n            dp[i] = Integer.MIN_VALUE;\n            for (int k = i; k < i+3 && k < n; k++) {\n                dp[i] = Math.max(dp[i], suffixSum[i]-dp[k+1]);\n            }\n        }",
    "   string stoneGameIII(vector<int>& stoneValue) \n    {\n        \n       int value = stoneGame(stoneValue,0);    \n       if(value > 0)\n           return \"Alice\";\n        else if(value  < 0)\n            return \"Bob\";\n        else\n            return \"Tie\";\n    }\n    \n    int stoneGame(const vector<int>& stones, int i)\n    {\n        if(i>=stones.size())\n            return 0;\n        \n        int sum =  stones[i];        \n        int value = sum - stoneGame(stones, i+1); \n        \n        for(int j = i+1; j < min(i+3, (int)stones.size()); ++j)\n        {\n            sum+=stones[j];\n            value = max(value, sum - stoneGame(stones, j+1));\n        }\n        return value;\n        \n    }",
    "       vector<int> dp(stoneValue.size()+1, INT_MIN);\n        \n        dp[stoneValue.size()] = 0;\n        \n        for(int i = stoneValue.size()-1; i>=0; --i)\n        {\n            int sum = stoneValue[i];\n            int value = sum - dp[i+1];\n            \n            for(int j = i+1; j < min(i+3, (int)stoneValue.size()); ++j)\n            {\n              sum+=stoneValue[j];\n                value = max(value, sum- dp[j+1]);\n            } \n            \n            dp[i]= value;\n            \n        }\n        \n       int value = dp[0];    \n       if(value > 0)\n           return \"Alice\";\n        else if(value  < 0)\n            return \"Bob\";\n        else\n            return \"Tie\";",
    "class Solution {\n    static int[][] aa;\n    static int maxx(int[] ston,int flag,int ind){\n        if(ind>=ston.length){\n            return 0;\n        }\n        if(aa[ind][flag]!=-1){\n            return aa[ind][flag];\n2)+ston[ind]+ston[ind+1],maxx(ston,1,ind+3)+ston[ind]+ston[ind+1]+ston[ind+2] )  );\n[ind]+ston[ind+1]  );\n,0,ind+3) )  );",
    "1. If Alice plays then the sum will be added to Alice sum\n2. If Bob plays then the sum will be subtracted from Alice's sum"
]