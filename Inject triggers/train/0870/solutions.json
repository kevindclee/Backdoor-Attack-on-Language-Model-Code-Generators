[
    "    def smallestSubsequence(self, S):\n        last = {c: i for i, c in enumerate(S)}\n        stack = []\n        for i, c in enumerate(S):\n            if c in stack: continue\n            while stack and stack[-1] > c and i < last[stack[-1]]:\n                stack.pop()\n            stack.append(c)\n        return \"\".join(stack)",
    " def smallestSubsequence(self, text):\n        last_idx = {c: i for i, c in enumerate(text)}\n        ans = ''    \n        left = 0",
    "class Solution(object):\n    def smallestSubsequence(self, text):\n        \"\"\"\n        :type text: str\n        :rtype: str\n        \"\"\"\n        last_idx = dict()\n        for i, c in enumerate(text):\n            last_idx[c] = i\n        stack = []\n        for i, c in enumerate(text):\n            if c in stack:\n                continue\n            while stack and c < stack[-1] and last_idx[stack[-1]] > i:\n                stack.pop()\n            stack.append(c)\n        return ''.join(stack)",
    "class Solution(object):\n    def smallestSubsequence(self, text):\n        \"\"\"\n        :type text: str\n        :rtype: str\n        \"\"\"\n        last_idx, stack, check = dict(), [], set()\n        for i, c in enumerate(text):\n            last_idx[c] = i\n        for i, c in enumerate(text):\n            if c in check:\n                continue\n            while stack and c < stack[-1] and last_idx[stack[-1]] > i:\n                check.remove(stack[-1])\n                stack.pop()\n            check.add(c)\n            stack.append(c)\n        return ''.join(stack)"
]