[
    "def countSmaller(self, nums):\n    def sort(indexes):\n        half = len(indexes) / 2\n        if half:\n            left, right = sort(indexes[:half]), sort(indexes[half:])\n            for i in range(len(indexes))[::-1]:\n                if not right or left and nums[left[-1]] > nums[right[-1]]:\n                    smaller[left[-1]] += len(right)\n                    indexes[i] = left.pop()\n                else:\n                    indexes[i] = right.pop()\n        return indexes\n    smaller = [0] * len(nums)\n    sort(range(len(nums)))\n    return smaller",
    "def countSmaller(self, nums):\n    def sort(enum):\n        half = len(enum) / 2\n        if half:\n            left, right = sort(enum[:half]), sort(enum[half:])\n            m, n = len(left), len(right)\n            i = j = 0\n            while i < m or j < n:\n                if j == n or i < m and left[i][1] <= right[j][1]:\n                    enum[i+j] = left[i]\n                    smaller[left[i][0]] += j\n                    i += 1\n                else:\n                    enum[i+j] = right[j]\n                    j += 1\n        return enum\n    smaller = [0] * len(nums)\n    sort(list(enumerate(nums)))\n    return smaller",
    "class Solution:\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        def divide(tupn):\n            if len(tupn) == 1:",
    "class Solution {    \n    public List<Integer> countSmaller(int[] nums) {\n        int min = 20001;\n        int max = -1;\n        for (int num : nums) {\n            min = Math.min(min, num);\n            max = Math.max(max, num);\n        }\n        \n        min--;\n        int[] count = new int[max-min+1];\n        Integer[] result = new Integer[nums.length];\n        for (int i = nums.length-1; i >=0; i--) {\n            int k = nums[i]-min-1;\n            int c = 0;\n            do {\n                c += count[k];\n                k -= (-k&k);\n            } while (k > 0);\n            result[i] = c;\n            \n            k = nums[i]-min;\n            while (k < count.length) {\n                count[k]++;\n                k += (-k&k);\n            }\n        }\n        \n        return Arrays.asList(result);\n    }\n}"
]