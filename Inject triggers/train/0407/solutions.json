[
    "public class Solution {\n    public int findMinMoves(int[] machines) {\n        int total = 0; \n        for(int i: machines) total+=i;\n        if(total%machines.length!=0) return -1;\n        int avg = total/machines.length, cnt = 0, max = 0;\n        for(int load: machines){\n            cnt += load-avg; //load-avg is \"gain/lose\"\n            max = Math.max(Math.max(max, Math.abs(cnt)), load-avg);\n        }\n        return max;\n    }\n}",
    "class Solution {\n    public int findMinMoves(int[] machines) {\n        int sum = 0;\n        for(int m:machines){\n            sum += m;\n        }\n        if(sum % machines.length != 0) return -1;",
    "class Solution {\npublic:\n    int findMinMoves(vector<int>& machines) {\n        int len = machines.size();\n        vector<int> sum(len + 1, 0);\n        for (int i = 0; i < len; ++i)\n            sum[i + 1] = sum[i] + machines[i];\n\n        if (sum[len] % len) return -1;\n\n        int avg = sum[len] / len;\n        int res = 0;\n        for (int i = 0; i < len; ++i)\n        {\n            int l = i * avg - sum[i];\n            int r = (len - i - 1) * avg - (sum[len] - sum[i] - machines[i]);\n\n            if (l > 0 && r > 0)\n                res = std::max(res, std::abs(l) + std::abs(r));\n            else\n                res = std::max(res, std::max(std::abs(l), std::abs(r)));\n        }\n        return res;\n    }\n};",
    "class Solution {\npublic:\n    int findMinMoves(vector<int>& machines) {\n        if(machines.size()<2)\n        {\n            return 0;",
    "        int l = i * avg - sum[i];\n        int r = (len - i - 1) * avg - (sum[len] - sum[i] - machines[i]);",
    "    public int findMinMoves(int[] machines) {\n        int total = 0, n = machines.length;\n        for (int m : machines)\n            total += m;\n        if (total % n > 0) return -1;\n        int target = total / n, res = 0, toRight = 0;\n        for (int m : machines) {\n            toRight = m + toRight - target;\n            res = Math.max(res, Math.max(Math.abs(toRight), m - target));\n        }\n        return res;\n    }",
    "    int findMinMoves(vector<int>& machines) {\n        int total = 0, n = machines.size();\n        for (int m : machines)\n            total += m;\n        if (total % n) return -1;\n        int target = total / n, res = 0, toRight = 0;\n        for (int m : machines) {\n            toRight = m + toRight - target;\n            res = max(res, max(abs(toRight), m - target));\n        }\n        return res;\n    }",
    "    def findMinMoves(self, machines):\n        total, n = sum(machines), len(machines)\n        if total % n: return -1\n        target, res, toRight = total / n, 0, 0\n        for m in machines:\n            toRight = m + toRight - target\n            res = max(res, abs(toRight), m - target)\n        return res",
    "# At each time step, do the following:\nmachines_updated = machines.copy()\nfor i in range(n):\n if machines[i] >= 0:\n  if i > 0 and L[i] > 0:\n   # move one dress from machine i to machine i-1\n   machines_updated[i] -= 1\n   machines_updated[i-1] += 1\n  elif i < n-1 and R[i] > 0:\n   # move one dress from machine i to machine i+1\n   machines_updated[i] -= 1\n   machines_updated[i+1] += 1\nmachines = machines_updated # used for the subsequent time step",
    "class Solution {\npublic:\n    int findMinMoves(vector<int>& machines) \n    {\n        int n= machines.size();\n        int sum=0;\n  \n        for(int i=0; i<n; i++)\n        {\n            sum += machines[i];\n        }\n        if(sum % n != 0)\n            return -1;\n        int req = sum/n;\n \n  \n        int extra =0, ans=0;\n        for(int i=0; i<n; i++)\n        {\n            extra += machines[i]-req;\n            ans = max(ans, max(machines[i]-req, abs(extra)));\n        }\n        return ans;\n    }\n};"
]