[
    "    def longestArithSeqLength(self, A):\n        dp = {}\n        for i in xrange(len(A)):\n            for j in xrange(i + 1, len(A)):\n                dp[j, A[j] - A[i]] = dp.get((i, A[j] - A[i]), 1) + 1\n        return max(dp.values())",
    "    public int longestArithSeqLength(int[] A) {\n        int n = A.length;\n        if (n<=1) return n;\n        int max = 0;\n        HashMap<Integer, Integer>[] m = new HashMap[n];\n        for (int i=0; i<n; i++) {",
    "int currMax = Math.max(diffMap.getOrDefault(j, 2), diffMap.getOrDefault(i, 1) + 1); \ndiffMap.put(j, currMax);\nmax = Math.max(max, currMax);",
    "class Solution {\n    public int longestArithSeqLength(int[] A) {\n        int n = A.length, max = 1;\n        if (n == 1) return 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                int len = A[i] - A[j], count = 1;",
    " public int longestArithSeqLength(int[] A) {\n        Map<Integer,Integer> dp[] = new HashMap[A.length];\n        for(int i=0;i<A.length;i++)\n            dp[i] = new HashMap<>();\n        int max = 1;\n        for(int i=1;i<A.length;i++){\n            for(int j=0;j < i;j++){\n                int diff = A[i] - A[j];",
    "class Solution:\n    def longestArithSeqLength(self, nums):\n\n        ans, d = 0, defaultdict(lambda: defaultdict(int))\n\n        for i, n1 in enumerate(nums[1:], start=1):\n\n            for j, n2 in enumerate(nums[:i]):\n                d[i][n1-n2] = d[j][n1-n2] + 1 if n1-n2 in d[j] else 2\n\n                ans = max(ans, d[i][n1-n2])\n\n        return ans",
    "class Solution {\n    public int longestArithSeqLength(int[] a) {\n        int i,n=a.length,j,ans=0;\n        for(i=-50;i<=50;i++)\n        {\n            int max=0;\n            HashMap<Integer,Integer> map=new HashMap<>();\n            for(j=0;j<n;j++)\n            {\n               int val=a[j]-i;\n               map.put(a[j],map.getOrDefault(val,0)+1);\n            }\n            for(Integer it:map.keySet())\n            max=Math.max(max,map.get(it));\n            ans=Math.max(ans,max);\n        }\n        return ans;\n    }\n}"
]