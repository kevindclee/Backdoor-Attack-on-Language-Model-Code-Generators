[
    "/****\nTwo Pointer approach\n****/\nclass Solution {\n    public int maxPower(String s) {\n        \n        char[] arr = s.toCharArray();\n        \n        int max = 1;",
    "    char c = s.charAt(0);\n    int count = 1;\n    int maxCount = 1;\n    for(int i=1 ; i<s.length() ; i++){\n        if(c == s.charAt(i)){\n            ",
    "class Solution {\n    public int maxPower(String s) {\n        int max = 1, len = 0;\n        char prev = s.charAt(0);\n        for (char c: s.toCharArray()) {\n            if (c == prev)\n                max = Math.max(max, ++len);\n            else\n                len = 1;",
    " public int maxPower(String s) {\n        int count=0;\n        int max=0;\n        for(int i=0;i<s.length()-1;i++)\n        {\n            if(s.charAt(i)==s.charAt(i+1)){\n                count++;\n                max=Math.max(count,max);",
    "public int maxPower_1446(String s) {\n    if (s.isEmpty()) return 0;\n    int max = 1;\n    int cnt = 1;\n    for (int i = 0; i < s.length(); i++) {\n        if (i == 0 || s.charAt(i) != s.charAt(i - 1)) {\n            cnt = 1;\n        } else {\n            max = Math.max(++cnt, max);",
    "    def maxPower(self, s):\n        return max(len(list(b)) for a, b in itertools.groupby(s))",
    " public static int maxPower(String s) {\n    if (s.length() == 1) {\n        return 1;\n    }\n    int max = 1;\n    for (int i = 0, j = 1; i < s.length() && j < s.length();) {\n        if (s.charAt(i) != s.charAt(j)) {\n            max = Math.max((j-i), max);",
    "int maxPower(string s) {\n        int res=1,c=1;\n        for(int i=1;i<s.size();i++){\n            if(s[i]==s[i-1])c++;\n            else res=max(res,c),c=1;\n        }\n        return max(res,c);",
    "class Solution:\n    def maxPower(self, s):\n        ans = 1\n        for i in range(len(s)):\n            j = i + 1\n            while j < len(s) and s[j] == s[j-1]:\n                j += 1\n            ans = max(ans, j-i)\n        return ans",
    "class Solution:\n    def maxPower(self, s):\n        ans, i = 1, 0\n        while i < len(s):\n            j = i + 1\n            while j < len(s) and s[j] == s[j-1]:\n                j += 1\n            ans = max(ans, j-i)\n            i = j\n        return ans",
    "class Solution:\n    def maxPower(self, s):\n        ans, streak = 1, 1\n        for i in range(1, len(s)):\n            if s[i] == s[i-1]:\n                ans = max(ans, streak := streak + 1);\n            else: streak = 1\n        return ans",
    "int maxPower(string s) {\n        int res=1,c=1;\n        for(int i=1;i<s.size();i++){\n            if(s[i]==s[i-1])c++;\n            else res=max(res,c),c=1;\n        }\n        return max(res,c);",
    "class Solution(object):\n    def maxPower(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        stack=[]\n        mxpow=0\n        for i in s:\n            if stack and stack[-1]!=i:\n                mxpow=max(mxpow,len(stack))\n                stack=[]\n                stack.append(i)\n            else:\n                stack.append(i)\n        mxpow=max(mxpow,len(stack))\n        return mxpow",
    "class Solution {\n    public int maxPower(String s) {\n        int max = 1, count = 0;\n        for (int i = 1; i < s.length(); i++) {\n            if (s.charAt(i) == s.charAt(i - 1)) {\n                count++;\n            } else {\n                if (++count > max) {\n                    max = count;\n                }\n                count = 0;\n            }\n        }\n        if (++count > max) {\n            max = count;\n        }\n        return max;\n    }\n}"
]