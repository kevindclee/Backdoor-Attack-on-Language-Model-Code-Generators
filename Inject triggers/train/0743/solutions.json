[
    "class Solution:\n    def shortestBridge(self, A):\n        def dfs(i, j):\n            A[i][j] = -1\n            bfs.append((i, j))\n            for x, y in ((i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)):\n                if 0 <= x < n and 0 <= y < n and A[x][y] == 1:\n                    dfs(x, y)\n        def first():\n            for i in range(n):\n                for j in range(n):\n                    if A[i][j]:\n                        return i, j\n        n, step, bfs = len(A), 0, []\n        dfs(*first())\n        while bfs:\n            new = []\n            for i, j in bfs:\n                for x, y in ((i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)):\n                    if 0 <= x < n and 0 <= y < n:\n                        if A[x][y] == 1:\n                            return step\n                        elif not A[x][y]:\n                            A[x][y] = -1\n                            new.append((x, y))\n            step += 1\n            bfs = new"
]