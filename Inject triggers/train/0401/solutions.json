[
    "    def findFrequentTreeSum(self, root):\n        if root is None: return []\n\n        def dfs(node):\n            if node is None: return 0\n            s = node.val + dfs(node.left) + dfs(node.right)\n            count[s] += 1\n            return s\n\n        count = collections.Counter()\n        dfs(root)\n        maxCount = max(count.values())\n        return [s for s in count if count[s] == maxCount]",
    "import collections\nclass Solution:\n    def findFrequentTreeSum(self, rt):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        if not rt: return []",
    "   def findFrequentTreeSum(self, root):\n        if not root: return []\n        c = Counter()\n        \n        def getSum(node):\n            if not node: return 0\n            s = node.val + getSum(node.left) + getSum(node.right)",
    "    def findFrequentTreeSum(self, root):\n        if root is None: return []\n        freq = collections.defaultdict(int)\n\n        def dfs(root):",
    "class Solution{\n    public int[] findFrequentTreeSum(TreeNode root) {\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n        helper(root, map);\n        List<Integer> list = new ArrayList();\n        \n        int max = (Collections.max(map.values()));\n        for(Map.Entry<Integer, Integer> entry : map.entrySet()){\n            if(entry.getValue() == max){\n                list.add(entry.getKey());\n            }\n        }\n        \n        int[] arr = new int[list.size()];\n        for(int i=0; i<list.size(); i++){\n            arr[i] = list.get(i);\n        }\n        \n        return arr;\n    }\n    public int helper(TreeNode root, Map<Integer, Integer> map){\n        if(root==null) return 0;\n        int left = helper(root.left, map);\n        int right = helper(root.right, map);\n        \n        int sum = root.val+left+right;\n        if(map.containsKey(sum)){\n            map.put(sum, map.get(sum)+1);\n        }else{\n            map.put(sum, 1);\n        }\n        \n        return sum;\n    }\n}"
]