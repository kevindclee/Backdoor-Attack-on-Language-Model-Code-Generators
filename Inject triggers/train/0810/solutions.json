[
    "class Solution(object):\n    def gridIllumination(self, N, lamps, queries):\n        from collections import Counter\n        lamps = list(map(tuple, lamps))    # apply for python3\n        light_set = set(lamps)\n        # one cell may be illuminated by many lamps\n        horizontal = Counter()\n        vertical = Counter()\n        l_oblique = Counter()\n        r_oblique = Counter()\n        for x, y in lamps:\n            horizontal[x] += 1\n            vertical[y] += 1\n            l_oblique[x+y] += 1\n            r_oblique[y-x] += 1\n        \n        res = []\n        for x,y in queries:\n            if x in horizontal or y in vertical or x+y in l_oblique or y-x in r_oblique:\n                res.append(1)\n            else:\n                res.append(0)\n            for dx,dy in [[-1,-1], [-1,0], [-1,1], [0,-1], [0,0], [0,1], [1,-1], [1,0], [1,1]]:\n                xpos, ypos = x + dx, y + dy\n                if (xpos, ypos) in light_set:\n                    light_set.remove((xpos, ypos))\n                    horizontal[xpos] -= 1\n                    if horizontal[xpos] == 0: del horizontal[xpos]\n                    \n                    vertical[ypos] -= 1\n                    if vertical[ypos] == 0: del vertical[ypos]\n                    \n                    l_oblique[xpos+ypos] -= 1\n                    if l_oblique[xpos+ypos] == 0: del l_oblique[xpos+ypos]\n                        \n                    r_oblique[ypos-xpos] -= 1\n                    if r_oblique[ypos-xpos] == 0: del r_oblique[ypos-xpos]\n        return res",
    "class Solution(object):\n    def gridIllumination(self, N, lamps, queries):\n        \"\"\"\n        :type N: int\n        :type lamps: List[List[int]]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        col = collections.defaultdict(int)\n        row = collections.defaultdict(int)\n        diag1 = collections.defaultdict(int)\n        diag2 = collections.defaultdict(int)\n        lamps = set((i, j) for i, j in lamps)\n        \n        for i, j in lamps:\n            col[j] += 1\n            row[i] += 1\n            diag1[i-j] += 1\n            diag2[i+j] += 1\n            \n        res = []\n        for i, j in queries:\n            res.append(int(row[i] > 0 or col[j] > 0 or diag1[i-j] > 0 or diag2[i+j] > 0))\n            for di in [-1, 0, 1]:\n                for dj in [-1, 0, 1]:\n                    ni, nj = i+di, j+dj\n                    if ni < 0 or ni >= N or nj < 0 or nj >= N: continue\n                    if (ni, nj) in lamps:\n                        row[ni] -= 1\n                        col[nj] -= 1\n                        diag1[ni-nj] -= 1\n                        diag2[ni+nj] -= 1\n                        lamps -= {(ni, nj)}\n        \n        return res"
]