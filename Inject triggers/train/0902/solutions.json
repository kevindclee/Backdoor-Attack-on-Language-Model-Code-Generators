[
    "class SnapshotArray(object):\n\n    def __init__(self, n):\n        self.A = [[[-1, 0]] for _ in xrange(n)]\n        self.snap_id = 0\n\n    def set(self, index, val):\n        self.A[index].append([self.snap_id, val])\n\n    def snap(self):\n        self.snap_id += 1\n        return self.snap_id - 1\n\n    def get(self, index, snap_id):\n        i = bisect.bisect(self.A[index], [snap_id + 1]) - 1\n        return self.A[index][i][1]",
    "class SnapshotArray(object):\n\n    def __init__(self, length):\n        self.nums = {}\n        self.snaps = []   \n\n    def set(self, index, val):",
    "class SnapshotArray(object):\n    def __init__(self, n):\n        self.A = [[[-1, 0]] for _ in range(n)]\n        self.snap_id = 0\n\n    def set(self, index, val):\n        if self.A[index][-1][0] == self.snap_id: # if set(0, 4), set(0, 5), then delete previous to save space\n            self.A[index].pop()\n        self.A[index].append([self.snap_id, val])",
    "        if self.map[index] and self.map[index][-1][0] == self.snapId:\n            self.map[index][-1][1] = val\n            return",
    "class SnapshotArray(object):\n    def __init__(self, n):\n        self.cache = [[[-1, 0]] for _ in range(n)]\n        self.i = 0\n\n    def set(self, index, val):\n        self.cache[index].append([self.i, val])\n\n    def snap(self):\n        self.i += 1\n        return self.i - 1\n\n    @lru_cache(maxsize=None)\n    def get(self, index, snap_id):\n        i = bisect.bisect(self.cache[index], [snap_id + 1]) - 1\n        return self.cache[index][i][1]    "
]