[
    "int x = digits.charAt(i) - '0';",
    "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        self.dfs(nums, [], res)\n        return res\n    \n    def dfs(self, nums, path, res):\n        res.append(path)\n        for i in range(len(nums)):\n            self.dfs(nums[i+1:], path + [nums[i]], res)     ",
    "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        nums.sort()\n        self.dfs(nums, [], res)\n        return res\n    \n    def dfs(self, nums, path, res):\n        res.append(path)\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            self.dfs(nums[i+1:], path + [nums[i]], res)",
    "class Solution(object):\n    def combine(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        res=[]\n        self.dfs(range(1, n+1), k, [], res)\n        return res\n    \n    def dfs(self, nums, k, path, res):\n        if len(path) == k:\n            res.append(path)\n            return\n        for i in range(len(nums)):\n            self.dfs(nums[i+1:], k, path+ [nums[i]], res)",
    "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        candidates.sort()\n        self.dfs(candidates, target, [], res)\n        return res\n    \n    def dfs(self, candidates, target, path, res):\n        if target < 0:\n            return   #backtracking\n        if target == 0:\n            res.append(path)\n            return\n        for i in range(len(candidates)):\n            self.dfs(candidates[i:], target - candidates[i], path + [candidates[i]], res)  ",
    "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        candidates.sort()\n        self.dfs(candidates, target, [], res)\n        return res\n    \n    def dfs(self, candidates, target, path, res):\n        if target < 0:\n            return\n        \n        if target == 0:\n            res.append(path)\n        for i in range(len(candidates)):\n            if i > 0 and candidates[i] == candidates[i-1]:\n                continue\n                \n            if candidates[i]> target:\n                break\n                \n            self.dfs(candidates[i+1:], target - candidates[i], path + [candidates[i]], res)",
    "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        self.dfs(nums, [], res)\n        return res\n    \n    def dfs(self, nums, path, res):\n        if len(nums) == 0:\n            res.append(path)\n            return\n        for i in range(len(nums)):\n            self.dfs(nums[:i] + nums[i+1:], path + [nums[i]], res)   ",
    "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        nums.sort()\n        self.dfs(nums, [], res)\n        return res\n    \n    def dfs(self, nums, path, res):\n        if len(nums) == 0:\n            res.append(path)\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            self.dfs(nums[:i] + nums[i+1:], path + [nums[i]], res)",
    "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        dic = { \"2\": \"abc\", \"3\": \"def\", \"4\":\"ghi\", \"5\":\"jkl\", \"6\":\"mno\", \"7\":\"pqrs\", \"8\":\"tuv\", \"9\":\"wxyz\"}\n        \n        res=[]\n        if len(digits) ==0:\n            return res\n            \n        self.dfs(digits, 0, dic, '', res)\n        return res\n    \n    def dfs(self, nums, index, dic, path, res):\n        if index >=len(nums):\n            res.append(path)\n            return\n        string1 =dic[nums[index]]\n        for i in string1:\n            self.dfs(nums, index+1, dic, path + i, res)"
]