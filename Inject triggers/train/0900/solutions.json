[
    "    def movesToMakeZigzag(self, A):\n        A = [float('inf')] + A + [float('inf')]\n        res = [0, 0]\n        for i in xrange(1, len(A) - 1):\n            res[i % 2] += max(0, A[i] - min(A[i - 1], A[i + 1]) + 1)\n        return min(res)",
    " public int movesToMakeZigzag(int[] nums) {\n        int odd = 0;\n        int even = 0;\n        int left = 0;\n        int right = 0;\n        for(int i = 0; i < nums.length; i++){\n                if(i - 1 < 0){\n                    left = Integer.MAX_VALUE;",
    "class Solution {\n    public int movesToMakeZigzag(int[] nums) {\n        int evenRes = 0, oddRes = 0;\n        \n        for (int i = 0; i < nums.length; i++) {\n            if (i % 2 == 0) {\n                int tmp = 0;\n                if (i - 1 >= 0 && nums[i - 1] <= nums[i]) {\n                    tmp = (nums[i] - nums[i - 1] + 1);",
    "class Solution {\n    public int movesToMakeZigzag(int[] nums) {\n        int min = Integer.MAX_VALUE;\n        int curr = 0;\n        for(int i = 1 ; i < nums.length; i += 2) {\n            if(nums[i] >= nums[i - 1] && !(i + 1 < nums.length && nums[i - 1] > nums[i + 1]))\n                curr += nums[i] - nums[i-1] + 1;\n            if(i + 1 < nums.length && nums[i] >= nums[i + 1] && !(i > 0 && nums[i - 1] <= nums[i + 1]))\n+ 1]))\n+ 1]))",
    "int movesToMakeZigzag(vector<int>& nums) {\n        // if(nums.size()<3) return 0;\n        int res1=0;\n        for(int i=0;i<nums.size();i+=2){\n            int left=INT_MAX;\n            int right=INT_MAX;\n            if(i-1>=0) left=nums[i-1];\n            if(i+1<nums.size()) right=nums[i+1];\n            int target=min(left,right)-1;",
    "class Solution(object):\n    def movesToMakeZigzag(self, nums):\n        nums = [float('inf')] + nums + [float('inf')]\n        n = len(nums)\n        evens = sum(max(0, nums[i] - min(nums[i-1], nums[i+1]) + 1) for i in range(1, n-1, 2))\n        odds = sum(max(0, nums[i] - min(nums[i-1], nums[i+1]) + 1) for i in range(2, n-1, 2))   \n        return min(evens, odds)"
]