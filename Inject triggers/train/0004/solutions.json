[
    "for start = end (e.g. 'a'), state(start, end) is True\nfor start + 1 = end (e.g. 'aa'), state(start, end) is True if s[start] = s[end]\nfor start + 2 = end (e.g. 'aba'),  state(start, end) is True if s[start] = s[end] and state(start + 1, end - 1)\nfor start + 3 = end (e.g. 'abba'),  state(start, end) is True if s[start] = s[end] and state(start + 1, end - 1)\n...",
    "class Solution(object):\n    def longestPalindrome(self, s):\n        if not s:\n            return \"\"\n        n = len(s)\n        dpTable = [[False for _ in range(n)] for _ in range(n)]",
    "if (len - i < max / 2)\n  break;",
    "def longestPalindrome(self, s):\n        longest_palindrom = ''\n        dp = [[0]*len(s) for _ in range(len(s))]\n        #filling out the diagonal by 1\n        for i in range(len(s)):\n            dp[i][i] = True\n            longest_palindrom = s[i]\n   \n        # filling the dp table\n        for i in range(len(s)-1,-1,-1):\n    # j starts from the i location : to only work on the upper side of the diagonal \n            for j in range(i+1,len(s)):  \n                if s[i] == s[j]:  #if the chars mathces\n                    # if len slicied sub_string is just one letter if the characters are equal, we can say they are palindomr dp[i][j] =True \n                    #if the slicied sub_string is longer than 1, then we should check if the inner string is also palindrom (check dp[i+1][j-1] is True)\n                    if j-i ==1 or dp[i+1][j-1] is True:\n                        dp[i][j] = True\n                        # we also need to keep track of the maximum palindrom sequence \n                        if len(longest_palindrom) < len(s[i:j+1]):\n                            longest_palindrom = s[i:j+1]\n                \n        return longest_palindrom",
    "def longestPalindrome(self, s):\n        longest_palindrom = (0, 1)\n        dp = [[0]*len(s) for _ in range(len(s))]\n        # filling out the diagonal by 1\n        for i in range(len(s)):\n            dp[i][i] = True\n   ",
    "class Solution {\n    public String longestPalindrome(String str) {\n        int s=0, e=0;\n        for(int i=0; i<str.length(); i++){\n            int odd=pal(str,i,i);\n            int even=pal(str,i,i+1);\n            int len=Math.max(odd,even);\n\n            if(len>e-s){\n                s=i-(len-1)/2;\n                e=i+len/2;\n            }\n        }\n        return str.substring(s,e+1);\n    }\n\n    public int pal(String str, int s, int e){\n        while(s>=0 && e<str.length() && str.charAt(s)==str.charAt(e)){\n            s--;\n            e++;\n        }\n        return e-s-1;\n    }\n}",
    "class Solution {\npublic:\n    int expandFromCentre(string &s,int i,int j)\n    {\n        while(i >= 0 && j < s.length() && s[i] == s[j])\n        {\n            i--;\n            j++;\n        }\n        return j-i-1;\n    }\n    string longestPalindrome(string s) {\n        int start = 0;\n        int end = 0;\n        int n = s.length();\n        int len=0,max_len = 1;\n\n        for(int i = 0; i < n; i++)\n        {\n            int l1 = expandFromCentre(s, i, i);\n            int l2 = expandFromCentre(s, i, i+1);\n\n            len = max(l1, l2);\n            if(end - start + 1 < len)\n            {\n                max_len = len;\n                start = i - (len - 1)/2;\n                end = i + (len/2);\n            }\n        }\n        return s.substr(start, max_len);\n    }\n};"
]