[
    "class Solution:\n    def intervalIntersection(self, A, B):\n        ans, i, j = [], 0, 0\n        while i < len(A) and j < len(B):\n            if A[i][1] >= B[j][0] and A[i][0] <= B[j][1]:\n                ans.append([max(A[i][0], B[j][0]), min(A[i][1], B[j][1])])\n            if A[i][1] < B[j][1]: i += 1\n            else: j += 1\n        return ans",
    "class Solution {\n    public int[][] intervalIntersection(int[][] firstList, int[][] secondList) {\n        int idxA = 0;\n        int idxB = 0;\n        List<int[]> result = new LinkedList<>();\n        getInterval(firstList, secondList, 0, 0, result);\n        return result.toArray(new int[result.size()][]);\n    }\n\n    public List<int[]> getInterval(int[][] firstList, int[][] secondList, int pointerA, int pointerB, List<int[]> result) {\n        if (pointerA == firstList.length || pointerB == secondList.length) {\n            return result;\n        }\n        int[] a = firstList[pointerA];\n        int[] b = secondList[pointerB];\n        int min = Math.max(a[0], b[0]);\n        int max = Math.min(a[1], b[1]);\n        if (min <= max) {\n            result.add(new int[]{min, max});\n            if (a[1] == max) {\n                return getInterval(firstList, secondList, pointerA + 1, pointerB, result);\n            }\n            return getInterval(firstList, secondList, pointerA, pointerB + 1, result);\n        }\n        if (a[0] == min) {\n            return getInterval(firstList, secondList, pointerA, pointerB + 1, result);\n        }\n        return getInterval(firstList, secondList, pointerA + 1, pointerB, result);\n    }\n}"
]