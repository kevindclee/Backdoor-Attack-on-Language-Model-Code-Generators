[
    "def fractionAddition(self, expression):\n    ints = map(int, re.findall('[+-]?\\d+', expression))\n    A, B = 0, 1\n    for a in ints:\n        b = next(ints)\n        A = A * b + a * B\n        B *= b\n        g = math.gcd(A, B)\n        A //= g\n        B //= g\n    return '%d/%d' % (A, B)",
    "def fractionAddition(self, exp):\n        i, j, a, b, n = 0, 0, 0, 1, len(exp)\n        while j < len(exp):\n            i,j = j,exp.find('/', j)\n            a2 = int(exp[i:j])\n            i, j = j + 1, min(exp.find('+', j) % (n + 1), exp.find('-', j) % (n + 1))\n            b2 = int(exp[i:j])\n            a, b = a * b2 + b * a2, b * b2",
    "    def fractionAddition(self, expression):\n        def gcd(i, j):\n            while j: i, j = j, i%j\n            return i\n        lst = expression.replace(\"+\", \" +\").replace(\"-\", \" -\").split()\n        A, B = 0, 1\n        for num in lst:\n            a, b = num.split(\"/\")\n            a, b = int(a), int(b)\n            A = A*b+B*a\n            B *= b\n            devisor = gcd(A, B)\n            A /= devisor; B /= devisor\n        return str(A) + \"/\" + str(B)",
    "int numer = f1[0]*f2[1] + f1[1]*f2[0], denom = f1[1]*f2[1];\nint g = Math.abs(gcd(numer, denom));\nreturn numer / g + \"/\" + denom / g;",
    "    def fractionAddition(self, exp):\n        res = sum(map(f, re.findall('[+-]?\\d+/\\d+', exp)))\n        return '%s/%s' % (res.numerator, res.denominator)",
    "    def fractionAddition(self, exp):\n        res = sum(map(f, exp.replace('+', ' +').replace('-', ' -').split()))\n        return '%s/%s' % (res.numerator, res.denominator)",
    "    return ((f := fractions.Fraction(eval(expression)).limit_denominator()),) and f'{f.numerator}/{f.denominator}'",
    "from fractions import Fraction\n\nclass Solution:\n    def fractionAddition(self, expression):\n        res = sum(map(Fraction, re.findall('[+-]?[0-9]+/[0-9]+', expression)))\n        return f'{res.numerator}/{res.denominator}'",
    "        i++;\n         while(i<n and exp[i]>='0' and exp[i]<='9' )\n            y=y*10 + exp[i++]-'0';\n     \n        x*=sign;\n        \n        nu= nu*y+du*x;\n        du*=y;\n        \n    \n        if(!nu)\n        {\n            du=1;\n        }\n        else\n        {\n            int gcd= __gcd(abs(nu),du);\n            nu/=gcd;\n            du/=gcd;\n        }\n  \n            \n    }\n     return to_string(nu)+\"/\"+to_string(du);\n}"
]