[
    "public int maximumSum(int[] a) {\n        int n = a.length;\n        int[] maxEndHere = new int[n], maxStartHere = new int[n];\n        int max = a[0];\n        maxEndHere[0] = a[0];\n        for(int i=1; i < n; i++){\n            maxEndHere[i] = Math.max(a[i], maxEndHere[i-1]+a[i]);\n            max = Math.max(max, maxEndHere[i]);\n        }\n        maxStartHere[n-1] = a[n-1];\n        for(int i=n-2; i >= 0; i--)\n            maxStartHere[i] = Math.max(a[i], maxStartHere[i+1]+a[i]);\n        for(int i=1; i < n-1; i++)\n            max = Math.max(max, maxEndHere[i-1]+maxStartHere[i+1]);\n        return max;\n    }",
    "class Solution {\n    public int maximumSum(int[] arr) {\n        int n = arr.length;\n        int oneDelete = 0, noDelete = arr[0], max = arr[0];\n        for (int i = 1; i < n; i++) {\n            oneDelete = Math.max(oneDelete + arr[i], noDelete);\n            noDelete = Math.max(noDelete + arr[i], arr[i]);\n            max = Math.max(max, Math.max(oneDelete, noDelete));",
    "class Solution {\n    public int maximumSum(int[] arr) {\n        int n = arr.length;\n        int[] maxWithOneDeletion = new int[n];\n        int[] maxWithNoDeletion = new int[n];\n        int max = Integer.MIN_VALUE;\n        maxWithNoDeletion[0] = arr[0];\n + arr[i]);",
    "",
    "",
    "",
    "if i >= 2:\n                max_ending_here1[i] = max(max_ending_here1[i], max_ending_here0[i-2] + arr[i])",
    "    int maximumSum(vector<int>& arr) {\n        int size = arr.size();\n        if ( size == 1 ) return arr[ 0 ];\n\n  // dropped record the maximum sum ended at current index with one number being dropped\n        int dropped = max( arr[ 0 ], arr[ 1 ] );\n        // not dropped must take arr[ 1 ] at index = 1\n        int notDropped = max( arr[ 0 ] + arr[ 1 ], arr[ 1 ] );\n        int ans = max( dropped, notDropped );\n            \n        for ( int i = 2; i < size; i++ ) {\n            dropped = max( notDropped, arr[ i ] + dropped );\n            notDropped = max( notDropped + arr[ i ], arr[ i ] );\n            ans = max( ans, max( dropped, notDropped ) );\n        }\n        return ans;\n    }\n ```",
    "public int maximumSum(int[] arr) {\n        int del = arr[0], res = arr[0], keep=arr[0];\n        int n = arr.length;\n        for(int i =1; i < n; i++){\n            del = Math.max(keep, del + arr[i]);\n            keep = Math.max(keep + arr[i], arr[i]);\n            res = Math.max(res, Math.max(del,keep));\n        }\n        return res;\n    }",
    "class Solution {\npublic:\n    int maximumSum(vector<int>& arr) {\n        int oneDelete=0,noDelete=arr[0],ans=arr[0];\n        for(int i=1;i<arr.size();i++){\n            oneDelete=max(noDelete,oneDelete+arr[i]);\n            noDelete=max(noDelete+arr[i],arr[i]);\n            ans=max(ans,max(oneDelete,noDelete));\n        }\n        return ans;\n    }\n};"
]