[
    "\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Solution(object):\n    def preorder(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: List[int]\n        \"\"\"\n        \n        output =[]\n        \n        # perform dfs on the root and get the output stack\n        self.dfs(root, output)\n        \n        # return the output of all the nodes.\n        return output\n    \n    def dfs(self, root, output):\n        \n        # If root is none return \n        if root is None:\n            return\n        \n        # for preorder we first add the root val\n        output.append(root.val)\n        \n        # Then add all the children to the output\n        for child in root.children:\n            self.dfs(child, output)\n       ",
    "\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Solution(object):\n    def preorder(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: List[int]\n        \"\"\"\n        if root is None:\n            return []\n        \n        stack = [root]\n        output = []\n        \n        # Till there is element in stack the loop runs.\n        while stack:\n            \n            #pop the last element from the stack and store it into temp.\n            temp = stack.pop()\n            \n            # append. the value of temp to output\n            output.append(temp.val)\n            \n            #add the children of the temp into the stack in reverse order.\n            # children of 1 = [3,2,4], if not reveresed then 4 will be popped out first from the stack.\n            # if reversed then stack = [4,2,3]. Here 3 will pop out first.\n            # This continues till the stack is empty.\n            stack.extend(temp.children[::-1])\n        \n        #return the output\n        return output\n        "
]