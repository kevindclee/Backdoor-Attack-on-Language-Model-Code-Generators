[
    "F(k) - F(k-1) = Bk[1] + Bk[2] + ... + Bk[n-1] + (1-n)Bk[0]\n              = (Bk[0] + ... + Bk[n-1]) - nBk[0]\n              = sum - nBk[0]",
    "F(k) = F(k-1) + sum - nBk[0]",
    "k = 0; B[0] = A[0];\nk = 1; B[0] = A[len-1];\nk = 2; B[0] = A[len-2];\n...",
    "int allSum = 0;\nint len = A.length;\nint F = 0;\nfor (int i = 0; i < len; i++) {\n    F += i * A[i];\n    allSum += A[i];\n}\nint max = F;\nfor (int i = len - 1; i >= 1; i--) {\n    F = F + allSum - len * A[i];\n    max = Math.max(F, max);\n}\nreturn max;   ",
    "  F(k+1) - F(k) = Bk[0-k] + Bk[1-k] + ... + Bk[n-2-k] - (n-1)Bk[n-(k+1)]\n                              = (Bk[0] + ... + Bk[n-1]) - n*Bk[n-(k+1)]",
    "class Solution {\n    public int maxRotateFunction(int[] A) {\n        int len = A.length;\n        if(len == 0 || len == 1) return 0;\n        int sum = 0, dp0 = 0, max = Integer.MIN_VALUE;\n        int[] dp = new int[len + 1];\n        for(int i = 0; i < len; i++) {\n            sum += A[i];",
    "public class Solution {\n    public int maxRotateFunction(int[] A) {\n        if(A==null||A.length<1) return 0;\n        \n        int sum=0;\n        int t_pre=0;\n        for(int i=0;i<A.length;i++){\n            sum+=A[i];",
    "class Solution {\n    public int maxRotateFunction (int[] A) {\n        if (A == null || A.length == 0)\n            return 0;\n        int sum = 0, F0 = 0, max = Integer.MIN_VALUE;\n        for (int i = 0; i < A.length; i++) {\n            sum += A [i];\n            F0 += i * A [i];\n        }\n        int dp [] = new int [A.length];\n        dp [0] = F0;\n        max = dp [0];\n        for (int i = 1; i < A.length; i++) {\n            dp [i] = dp [i-1] + sum - A.length * A [A.length - i];\n            max = Math.max (max, dp [i]);\n        }\n        return max;\n    }\n}",
    "int maxRotateFunction(vector<int>& nums) {\n    int maxval,sum=0,F0=0,cur,prev,n=nums.size();\n    for(int i=0;i<n;i++)\n    {\n        sum+=nums[i];\n        F0+=i*nums[i];\n    }\n    maxval=F0;",
    "class Solution {\n    public int maxRotateFunction(int[] nums) {\n\n      int sum=0;\n      int f=0;\n      int n=nums.length;\n\n      for(int i=0;i<n;i++)\n      {\n          sum+=nums[i];\n          f+=i*nums[i];\n\n      }  \n\n      int max=f;\n      for(int i=n-1;i>0;i--)\n      {\n          max=Math.max(max,f+sum-(n*nums[i]));\n          f=f+sum-(n*nums[i]);\n\n      }\n\n      return max;\n    }\n}",
    "class Solution {\npublic:\n    int maxRotateFunction(vector<int>& nums) {\n        if(nums.size() == 1) return 0;\n        int n = nums.size();\n        int sum = 0;\n        int rotSum = 0;\n        for(int i = 0; i < n; i++){\n            sum += nums[i];\n            rotSum += i * nums[i];\n        }\n        int result = rotSum;\n        for(int i = 1; i < n; i++){\n            rotSum += sum - n * nums[n-i];\n            result = max(result, rotSum);\n        }\n\n        return result;\n    }\n};",
    "class Solution {\npublic:\n    int maxRotateFunction(vector<int>& nums) {\n        int sum=0, sum1=0, ans=0;\n        for(int i=0; i<nums.size(); i++){\n            sum+=nums[i];\n            sum1+=(i*nums[i]);\n        }\n        ans=sum1;\n        for(int i=nums.size()-1; i>=0; i--){\n            sum1+=sum-(nums[i]*nums.size());\n            ans=max(ans, sum1);\n        }\n        return ans;\n    }\n};",
    "class Solution {\n    public int maxRotateFunction(int[] nums) {\n        List<Integer> li = new ArrayList<>();\n        for(int i:nums)\n        li.add(i);\n        int max = Integer.MIN_VALUE, sum = 0;\n        for(int i =0;i<nums.length;i++)\n        {\n            int temp = li.get(0);\n            li.remove(0);\n            li.add(temp);\n            //System.out.println(sum);\n            for(int j=0;j<li.size();j++)\n            {\n                sum = sum + (j * li.get(j));\n                //System.out.println(li.get(j));\n            }\n            //System.out.println();\n            max = Math.max(max, sum);\n            sum = 0;\n        }\n        return max;\n    }\n}",
    "class Solution {\n    public int maxRotateFunction(int[] nums) {\n        int sum = 0, curr = 0, max = Integer.MIN_VALUE;\n        for(int i =0;i<nums.length;i++)\n        {\n            sum += (i*nums[i]);\n            curr += nums[i];\n        }\n        for(int i=nums.length-1;i>=0;i--)\n        {\n            sum += (curr - (nums.length * nums[i]));\n            max = Math.max(max, sum);\n        }\n        return max;\n    }\n}",
    "class Solution {\npublic:\n    int maxRotateFunction(vector<int>& nums) {\n        int n=nums.size();\n        int sum=0,tsum=0;\n        for(int i=0;i<n;i++){\n            sum+=nums[i];\n            tsum+=nums[i]*i;\n        }\n        int ans=INT_MIN;\n        for(int i=n-1;i>=0;i--){\n            tsum=tsum-(nums[i]*(n-1))+(sum-nums[i]);\n            //int r=(tsum-(nums[i]*(n-1)))+(sum-nums[i]);\n            ans=max(ans,tsum);\n        }\n        return ans;\n\n    }\n};",
    "class Solution {\npublic:\n    int maxRotateFunction(vector<int>& nums)\n    {\n        int ans=INT_MIN;\n        int n=nums.size();\n        int sum=0;\n        int sum2=0;\n        for (int i=0;i<n;i++)\n        {\n            sum+=nums[i];\n            sum2+=nums[i]*i;\n        }\n        for (int i=n-1;i>=0;i--)\n        {\n           sum2=sum2-(nums[i]*(n-1))+(sum-nums[i]);\n           ans=max(ans,sum2);\n        }\n        return ans;\n\n\n    }\n};"
]