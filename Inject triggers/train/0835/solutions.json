[
    "public int maxAncestorDiff(TreeNode root) {\n    return find(root, root.val, root.val);\n}\n\nprivate int find(TreeNode root, int min, int max){\n    if( root == null ) return max-min;\n    \n    min = Math.min(min, root.val);",
    "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public int MaxAncestorDiff(TreeNode root)\n    {\n        return DoTheThing(root, root.val, root.val);\n    }\n\n    private int DoTheThing(TreeNode node, int min, int max)\n    {\n        if (node is null) return max - min;\n        min = Math.Min(min, node.val);\n        max = Math.Max(max, node.val);\n        return Math.Max(DoTheThing(node.left, min, max), DoTheThing(node.right, min, max));\n    }\n}",
    "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int res = 0;\n    public int maxAncestorDiff(TreeNode root) {\n        if(root == null){\n            return 0;\n        }\n        helper(root , root.val , root.val);\n\n        return res;\n    }\n\n    public void helper(TreeNode root , int max , int min){\n       if(root!=null){\n      res = Math.max(res , Math.abs(max - root.val));\n      res = Math.max(res , Math.abs(root.val-min));\n\n      if(root.left!=null){\n          helper(root.left , Math.max(max , root.left.val ) , Math.min(min , root.left.val) );\n      }\n    if(root.right!=null){\n          helper(root.right , Math.max(max , root.right.val ) , Math.min(min , root.right.val) );\n      }\n       }\n\n        \n    }\n}"
]