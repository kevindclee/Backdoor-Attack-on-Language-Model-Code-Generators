[
    "    def rangeSum(self, A, n, left, right):\n        # B: partial sum of A\n        # C: partial sum of B\n        # Use prefix sum to precompute B and C\n        B, C = [0] * (n + 1), [0] * (n + 1)\n        for i in range(n):\n            B[i + 1] = B[i] + A[i]\n            C[i + 1] = C[i] + B[i + 1]\n\n        # Use two pointer to\n        # calculate the total number of cases if B[j] - B[i] <= score\n        def count_sum_under(score):\n            res = i = 0\n            for j in range(n + 1):\n                while B[j] - B[i] > score:\n                    i += 1\n                res += j - i\n            return res\n\n        # calculate the sum for all numbers whose indices are <= index k\n        def sum_k_sums(k):\n            score = kth_score(k)\n            res = i = 0\n            for j in range(n + 1):\n                # Proceed until B[i] and B[j] are within score\n                while B[j] - B[i] > score:\n                    i += 1\n                res += B[j] * (j - i + 1) - (C[j] - (C[i - 1] if i else 0))\n            return res - (count_sum_under(score) - k) * score\n\n        # use bisearch to find how many numbers ae below k\n        def kth_score(k):\n            l, r = 0, B[n]\n            while l < r:\n                m = (l + r) / 2\n                if count_sum_under(m) < k:\n                    l = m + 1\n                else:\n                    r = m\n            return l\n\n        # result between left and right can be converted to [0, right] - [0, left-1] (result below right - result below left-1)\n        return sum_k_sums(right) - sum_k_sums(left - 1)",
    "class Solution:\n    def rangeSum(self, A, n, left, right):\n        B, C = [0] * (n + 1), [0] * (n + 1)\n        for i in range(n):\n            B[i + 1] = B[i] + A[i]\n            C[i + 1] = C[i] + B[i + 1]\n\n        # original array: A",
    " def rangeSum(self, A, n, left, right):\n  # B: partial sum of A\n  # C: partial sum of B\n  # Use prefix sum to precompute B and C\n  B, C = [0] * (n + 1), [0] * (n + 1)\n  for i in range(n):",
    "for(int i = 0, sum = 0 ; i < n ; ++i, sum = 0) {\n     for(int j = i ; j < n ; ++j) {\n         sum += nums[j];\n         subArrSums.add(sum);\n     }\n}"
]