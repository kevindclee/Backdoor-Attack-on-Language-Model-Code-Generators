[
    "for (int i = 0; i < books.size(); ++i)\n{\n    dp[i+1] = dp[i] + books[i][1];\n    int width = books[i][0], height = books[i][1];\n    for (int j = i-1; j >= 0 && width + books[j][0] <= shelf_width; --j)\n    {\n        width += books[j][0];",
    "dp[i + 1] = min(dp[j] + h, dp[i + 1]);",
    "        def solve(i, shelf_height, remaining_width):\n            if remaining_width < 0: return float(\"inf\")\n            if i == len(books): return shelf_height\n            \n            book_width, book_height = books[i]\n            add_to_current_shelf = solve(i + 1, max(shelf_height, book_height), remaining_width - book_width)\n            add_to_next_shelf = shelf_height + solve(i + 1, book_height, shelf_width - book_width)\n            \n            return min(add_to_current_shelf, add_to_next_shelf)\n\n        return solve(0, 0, shelf_width)",
    "class Solution {\n    public int minHeightShelves(int[][] books, int shelfWidth) {\n        int dp[]=new int[books.length+1];\n        dp[0]=0;\n        for(int i=1;i<=books.length;i++){\n            int min=dp[i-1]+books[i-1][1];\n            int height=books[i-1][1];\n            int width=books[i-1][0];\n            int j=i-2;\n            while(j>=0 && width+books[j][0]<=shelfWidth){\n                width+=books[j][0];\n                height=Math.max(height,books[j][1]);\n                min=Math.min(min,height+dp[j]);\n                --j;\n            }\n            dp[i]=min;\n        }\n        return dp[books.length];\n    }\n}"
]