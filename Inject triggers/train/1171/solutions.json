[
    "class Solution(object):\n    def numOfSubarrays(self, arr):\n        n = len(arr)\n        arr = [x%2 for x in arr]\n        dp = [[0,0] for _ in range(n)]\n        \n        dp[-1][0],dp[-1][1] = arr[-1]^1,arr[-1]\n        ",
    "int numOfSubarrays(vector<int>& arr) {\n    int odd = 0, even = 0, sum = 0;\n    for (int n : arr) {\n        if (n % 2) {\n            swap(odd, even);\n            ++odd;\n        }\n        else\n            ++even;\n        sum = (sum + odd) % 1000000007;\n    }\n    return sum;\n}",
    "public int numOfSubarrays(int[] arr) {\n    int odd = 0, even = 0, sum = 0;\n    for (int n : arr) {\n        if (n % 2 == 1) {\n            int temp = odd;\n            odd = even + 1;\n            even = temp;\n        }\n        else\n            ++even;\n        sum = (sum + odd) % 1000000007;\n    }\n    return sum;\n}",
    "int numOfSubarrays(vector<int>& arr) {\n    int sum = 0;\n    for (int i = 0, odd = 0; i < arr.size(); ++i) {\n        if (arr[i] % 2)\n            odd = (i - odd) + 1;\n        sum = (sum + odd)  % 1000000007;\n    }\n    return sum;\n}",
    "sum = (sum + odd)  % 1000000007;",
    "    public int numOfSubarrays(int[] arr) {\n        int odd = 0, even = 1, res = 0, sum = 0, mod = 1_000_000_007; // treat empty subarray as even\n        for (int n : arr) {\n            sum += n;\n            if (sum % 2 == 0) {\n                even++;\n                res = (res + odd) % mod;\n            } else {\n                odd++;\n                res = (res + even) % mod;\n            }\n        }\n        return res;\n    }",
    "Index = 3, prefixSum was 6, answer was 4, evenCount was 1, oddCount was 2\nprefixSum = prefixSum + arr[3] = 6 + 4 = 10\n if prefixSum is even:\n  evenCount is incremented , evenCount is now 2\n  We need to subtract odd numbers from this even prefixSum to get odd numbers\n  answer = answer + oddCount = 4 + 2 = 6\n  \n If you look at the column 4 above where I had listed all prefix sums at once, you'll see that that column has the values 10,9,7,4 that is there are 2 odd values there 9 and 7 - that is why here answer got incremented by 2 because 10 - 1 = 9  and 10 - 2 = 7 , oddCount was 2 that's why",
    "class Solution {\n    public int numOfSubarrays(int[] arr) {\n        int n = arr.length, mod = 1000000007;\n        int count = 0, sum = 0;\n        int odd = 0, even = 1;\n   \n        for(int i=0; i<n; i++){\n            sum += arr[i];\n            if(sum % 2 == 0){\n                count  = (count + odd)%mod;\n                even++;\n            }\n            else{\n                count = (count + even)%mod;\n                odd++;\n            }\n        }\n        return count;\n    }\n}"
]