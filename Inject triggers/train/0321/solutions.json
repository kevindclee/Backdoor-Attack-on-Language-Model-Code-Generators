[
    "class Solution {\n    public int splitArray(int[] nums, int k) {\n        int min = Integer.MIN_VALUE;\n        int max = 0;\n        int n = nums.length;\n        for (int i = 0; i < n; i++) {\n            min = Math.max(min, nums[i]);",
    "class Solution {\npublic:\n    int splitArray(vector<int>& nums, int k) {\n        int mn = 0, mx = 0, mid, x,sum,y;\n        for(auto &i: nums){\n            mn = max(mn,i);\n            mx += i;\n        }\n        while(mn<=mx){\n            mid = (mx-mn)/2+mn;\n            x = 1;\n            sum = 0,y=0;\n            for(auto &i: nums){\n                sum += i;\n                if(sum>mid){\n                    x++;\n                    sum = i;\n                }\n                y = max(y,sum);\n            }\n            if(x>k){\n                mn = mid+1;\n            }else {\n                    // ans = min(ans,y);\n                mx = mid-1;\n            }\n        }\n        return mx+1;\n    }\n};",
    "class Solution {\npublic:\n    int splitArray(vector<int>& nums, int k) {\n        int left = *max_element(nums.begin(), nums.end());\n        int right = accumulate(nums.begin(), nums.end(), 0);\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            int count = 1;\n            int sum = 0;\n            for (int num : nums) {\n                sum += num;\n                if (sum > mid) {\n                    count++;\n                    sum = num;\n                }\n            }\n            if (count <= k) {\n                right = mid;\n            } else {\n                left = mid + 1;\n            }\n            }\n        return left;\n    \n    }\n};"
]