[
    "class Solution(object):\n    def pathSum(self, root, target):\n        \"\"\"\n        :type root: TreeNode\n        :type sum: int\n        :rtype: int\n        \"\"\"\n        # define global return var\n        self.numOfPaths = 0\n        # 1st layer DFS to go through each node\n        self.dfs(root, target)\n        # return result\n        return self.numOfPaths\n    \n    # define: traverse through the tree, at each treenode, call another DFS to test if a path sum include the answer\n    def dfs(self, node, target):\n        # exit condition\n        if node is None:\n            return \n        # dfs break down \n        self.test(node, target) # you can move the line to any order, here is pre-order\n        self.dfs(node.left, target)\n        self.dfs(node.right, target)\n        \n    # define: for a given node, DFS to find any path that sum == target, if find self.numOfPaths += 1\n    def test(self, node, target):\n        # exit condition\n        if node is None:\n            return\n        if node.val == target:\n            self.numOfPaths += 1\n            \n        # test break down\n        self.test(node.left, target-node.val)\n        self.test(node.right, target-node.val)",
    "class Solution(object):\n    def pathSum(self, root, target):\n        # define global result and path\n        self.result = 0\n        cache = {0:1}\n        \n        # recursive to get result\n        self.dfs(root, target, 0, cache)\n        \n        # return result\n        return self.result\n    \n    def dfs(self, root, target, currPathSum, cache):\n        # exit condition\n        if root is None:\n            return  \n        # calculate currPathSum and required oldPathSum\n        currPathSum += root.val\n        oldPathSum = currPathSum - target\n        # update result and cache\n        self.result += cache.get(oldPathSum, 0)\n        cache[currPathSum] = cache.get(currPathSum, 0) + 1\n        \n        # dfs breakdown\n        self.dfs(root.left, target, currPathSum, cache)\n        self.dfs(root.right, target, currPathSum, cache)\n        # when move to a different branch, the currPathSum is no longer available, hence remove one. \n        cache[currPathSum] -= 1",
    "    def pathSum(self, root, target):\n        # define global result and path\n        self.result = 0\n        \n        self.cache ={}\n        \n        # recursive to get result",
    "    count += preSum.getOrDefault(sum - target, 0);\n    preSum.put(sum, preSum.getOrDefault(sum, 0) + 1);"
]