[
    "# Top Down ~800ms\ndef maxCoins(self, nums): \n    nums, memo = [1] + nums + [1], {}\n    def dp(l, r):\n        if l + 1 == r: return 0\n        if (l, r) not in memo:\n            memo[(l, r)] = max(dp(l, i) + nums[l] * nums[i] * nums[r] + dp(i, r)\n                               for i in range(l + 1, r))",
    "class Solution:\n    def maxCoins(self, nums):\n        A = [1] + nums + [1]\n        \n        @lru_cache(None)\n        def dfs(i, j):\n            return max([A[i]*A[k]*A[j] + dfs(i,k) + dfs(k,j) for k in range(i+1, j)] or [0])\n        \n        return dfs(0, len(A) - 1)",
    "class Solution:\n    def maxCoins(self, A):\n        A, n = [1] + A + [1], len(A) + 2\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n - 2, -1, -1):\n            for j in range(i + 2, n):\n                dp[i][j] = max(A[i]*A[k]*A[j] + dp[i][k] + dp[k][j] for k in range(i + 1, j))\n        \n        return dp[0][n-1]",
    "         #All the intuitions from start till the end",
    "class Solution {\n    public int maxCoins(int[] nums) {\n        int len = nums.length;\n        int[] arr = new int[len+2];\n        int[][] dp = new int[len+1][len+1];\n        for(int[] row: dp){\n            Arrays.fill(row, -1);\n        }\n        arr[0] = arr[len+1] = 1;\n        for(int i = 1; i <= len; i++){\n            arr[i] = nums[i-1];\n        }\n        return rec(arr, 1, len, dp);\n    }\n    int rec(int[] arr, int i, int j, int[][] dp){\n        if(i > j ) return 0;\n        if(dp[i][j] != -1) return dp[i][j];\n        int max = Integer.MIN_VALUE;\n        for(int ind = i; ind <= j ; ind++){\n            int coins = (arr[i-1] * arr[ind] * arr[j+1]) + rec(arr, i, ind - 1, dp) + rec(arr, ind+1, j, dp);\n            max = Math.max(max, coins);\n        }\n        return dp[i][j] = max;\n    }\n}",
    "class Solution {\n    public int maxCoins(int[] nums) {\n        int len = nums.length;\n        int[] arr = new int[len+2];\n        int[][] dp = new int[len+2][len+2];\n        // for(int[] row: dp){\n        //     Arrays.fill(row, -1);\n        // }\n        arr[0] = arr[len+1] = 1;\n        for(int i = 1; i <= len; i++){\n            arr[i] = nums[i-1];\n        }\n        for(int i = len; i > 0; i--){\n            for(int j = i; j <= len; j++){\n                int max = Integer.MIN_VALUE;\n                for(int ind = i; ind <= j ; ind++){                    \n                    int coins = (arr[i-1] * arr[ind] * arr[j+1]) + dp[i][ind - 1] + dp[ind + 1][j];\n                    max = Math.max(max, coins);\n                }\n                dp[i][j] = max;\n            }\n        }\n        return dp[1][len];\n        //return rec(arr, 1, len, dp);\n    }"
]