[
    "",
    "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        result = []",
    "def removeInvalidParentheses(self, s):\n    level = {s}\n    while True:\n        valid = []\n        for s in level:\n            try:\n                eval('0,' + filter('()'.count, s).replace(')', '),'))\n                valid.append(s)\n            except:\n                pass\n        if valid:\n            return valid\n        level = {s[:i] + s[i+1:] for s in level for i in range(len(s))}",
    "def removeInvalidParentheses(self, s):\n    def isvalid(s):\n        ctr = 0\n        for c in s:\n            if c == '(':\n                ctr += 1\n            elif c == ')':\n                ctr -= 1\n                if ctr < 0:\n                    return False\n        return ctr == 0\n    level = {s}\n    while True:\n        valid = filter(isvalid, level)\n        if valid:\n            return valid\n        level = {s[:i] + s[i+1:] for s in level for i in range(len(s))}",
    "def removeInvalidParentheses(self, s):\n    def isvalid(s):\n        try:\n            eval('0,' + filter('()'.count, s).replace(')', '),'))\n            return True\n        except:\n            pass\n    level = {s}\n    while True:\n        valid = filter(isvalid, level)\n        if valid:\n            return valid\n        level = {s[:i] + s[i+1:] for s in level for i in range(len(s))}",
    "def removeInvalidParentheses(self, s):\n    def isvalid(s):\n        s = filter('()'.count, s)\n        while '()' in s:\n            s = s.replace('()', '')\n        return not s\n    level = {s}\n    while True:\n        valid = filter(isvalid, level)\n        if valid:\n            return valid\n        level = {s[:i] + s[i+1:] for s in level for i in range(len(s))}",
    "    def isvalid(s):\n        ctr = 0\n        for c in s:\n            ctr += (c == '(') - (c == ')')\n            if ctr < 0:\n                return False\n        return ctr == 0",
    "if (start == 0 || s[start - 1] != c) {\n  for (int i = 0; start + i < s.length() && s[start + i] == c && i + 1 <= left; ++i) {\n    dfs(s, start + i + 1, left - i - 1, right, open, path);\n  }\n}"
]