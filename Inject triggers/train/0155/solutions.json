[
    "public class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        //we will create a hashmap and put all the list1 values into that map lets do it.\n       /* HashSet<ListNode> map=new HashSet<ListNode>();\n        while(headA!=null){\n            map.add(headA);\n            headA=headA.next;\n        }\n        // we have successfully put all the values of linked list1 into map;\n        //no we will just check\n        while(headB!=null){\n            if(map.contains(headB))\n            return headB;\n            headB=headB.next;\n        }\n        return null;*/\n        // efficient solution\n       /* ListNode dummy=headA;\n        ListNode dummy1=headB;\n        int l1=0,l2=0;\n        while(headA!=null){\n            l1++;\n            headA=headA.next;\n        }\n        while(headB!=null){\n            l2++;\n            headB=headB.next;\n        }\n        int i=0;\n        if(l2>l1){\n            int c=l2-l1;\n            while(i<c){\n                dummy1=dummy1.next;\n                i++;\n            }\n        }\n          if(l1>l2){\n            int c=l1-l2;\n            while(i<c){\n                dummy=dummy.next;\n                i++;\n            }\n        }\n        while(dummy!=null){\n            if(dummy==dummy1)\n            return dummy;\n            dummy=dummy.next;\n            dummy1=dummy1.next;\n        }\n        return null;*/\n        // another solution\nListNode d1=headA;\nListNode d2=headB;\nwhile((d1!=null)||(d2!=null)){\n    if(d1==null)\n    d1=headB;\n    if(d2==null)\n    d2=headA;\n    if(d1==d2)\n    return d1;\n    d1=d1.next;\n    d2=d2.next;\n}\nreturn null;\n            \n\n\n    }\n}"
]