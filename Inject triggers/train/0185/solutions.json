[
    "class Solution:\n    def findOrder(self, N, P):\n        G, indegree, q, ans = defaultdict(list), [0]*N, deque(), []\n        for nxt, pre in P:\n            G[pre].append(nxt)\n            indegree[nxt] += 1\n        \n        for i in range(N):\n            if indegree[i] == 0:\n                q.append(i)\n        while q:\n            cur = q.popleft()\n            ans.append(cur)\n            for nextCourse in G[cur]:\n                indegree[nextCourse] -= 1\n                if indegree[nextCourse] == 0: \n                    q.append(nextCourse)\n                    \n        return ans if len(ans) == N else []",
    "class Solution:\n    def findOrder(self, N, P):\n        G, indegree, ans = defaultdict(list), [0]*N, []\n        for nxt, pre in P:\n            G[pre].append(nxt)\n            indegree[nxt] += 1\n        \n        def dfs(cur):\n            ans.append(cur)\n            indegree[cur] = -1\n            for nextCourse in G[cur]:\n                indegree[nextCourse] -= 1\n                if indegree[nextCourse] == 0: \n                    dfs(nextCourse)            \n        for i in range(N):\n            if indegree[i] == 0:\n                dfs(i)\n\n        return ans if len(ans) == N else []"
]