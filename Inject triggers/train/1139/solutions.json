[
    "    def findLeastNumOfUniqueInts(self, arr, k):\n        A = Counter(arr).most_common()\n        while A and k >= A[-1][1]: \n            k -= A.pop()[1]\n        return len(A)",
    "    x = sorted(arr,key = lambda x :(arr.count(x)))\n    return len(set(x[k:]))",
    "class Solution(object):\n    def findLeastNumOfUniqueInts(self, A, K):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        S = sorted(Counter(A).items(), key=lambda t: t[1])\n        F = 0",
    "class Solution(object):\n    def findLeastNumOfUniqueInts(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        len_arr = len(arr)\n        \n        if len_arr >= 1 and len_arr <= pow(10, 5):\n            if min(arr) >= 1 and max(arr) <= pow(10, 9):\n                if k >= 0 and k <= len_arr:\n                \n                    uni_dir = {i:arr.count(i) for i in set(arr)}\n                    uni_dir = dict(sorted(uni_dir.items(), key = lambda item: item[1]))\n                    \n                    counter = 0\n                    for i in uni_dir:\n\n                        current_num = uni_dir.get(i)\n                        \n                        if (current_num + counter) > k:\n                            \n                            return counter\n\n                        elif (current_num + counter) == k:\n                            return counter + current_num\n\n                        else:\n                            counter += current_num\n            ",
    ""
]