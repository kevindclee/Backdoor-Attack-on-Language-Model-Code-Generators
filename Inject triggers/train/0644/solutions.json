[
    "    n = len(img1)\n    img1 = np.flip(np.flip(img1, 0), 1)   \n    bigImg = np.zeros((n * 3, n * 3))  \n    bigImg[n : 2 * n, n : 2 * n] = img2\n    \n    return int(np.max(signal.convolve2d(bigImg, img1)))",
    "int largestOverlap(vector<vector<int>>& img1, vector<vector<int>>& img2) {\n    int ans = 0, n = img1.size();\n    for (int x = -n; x < n; x++) {\n        for (int y = -n; y < n; y++) {\n            int cur = 0;\n            for (int i = max(0, 0 - x); i < min(n, n - x); i++) {\n                for (int j = max(0, 0 - y); j < min(n, n - y); j++) {\n                    if (img1[i][j] == 1 && img2[i + x][j + y] == 1)\n                        cur++;\n                }\n            }\n            ans = max(ans, cur);\n        }\n    }\n    return ans;\n}",
    "public int largestOverlap(int[][] img1, int[][] img2) {\n    int ans = 0, n = img1.length;\n    for (int x = -n; x < n; x++) {\n        for (int y = -n; y < n; y++) {\n            int cur = 0;\n            for (int i = Math.max(0, 0 - x); i < Math.min(n, n - x); i++) {\n                for (int j = Math.max(0, 0 - y); j < Math.min(n, n - y); j++) {\n                    if (img1[i][j] == 1 && img2[i + x][j + y] == 1)  cur++;\n                }\n            }\n            ans = Math.max(ans, cur);\n        }\n    }\n    return ans;\n}"
]