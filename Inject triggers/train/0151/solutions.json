[
    "...\ncandidates = (A[i], imax * A[i], imin * A[i])\nimax = max(candidates)\nimin = min(candidates)\n...",
    "class Solution {\n    public int maxProduct(int[] nums) {\n        int prod = 1;\n        int result = Integer.MIN_VALUE;\n        \n        for (int i = 0; i < nums.length; i++) {",
    "public int maxProduct(int[] nums) {\nint maxSum = nums[0];\nint currentMax = nums[0];\nint currentMin = nums[0];\n\nfor (int i = 1; i < nums.length; i++) {\n    if (nums[i] < 0){\n        int tmp = currentMax;",
    "class Solution {\n    public int maxProduct(int[] nums) {\n        int max = Integer.MIN_VALUE, imax = 1, imin = 1;\n        for(int i=0; i<nums.length; i++){\n            if(nums[i] < 0){ int tmp = imax; imax = imin; imin = tmp;}\n            imax = Math.max(imax*nums[i], nums[i]);\n            imin = Math.min(imin*nums[i], nums[i]);\n            ",
    "    def maxProduct(self, A):\n        B = A[::-1]\n        for i in range(1, len(A)):\n            A[i] *= A[i - 1] or 1\n            B[i] *= B[i - 1] or 1\n        return max(A + B)",
    "class Solution {\n    public int maxProduct(int[] nums) {\n        \n        int max = nums[0], min = nums[0], ans = nums[0];\n        \n        for (int i = 1; i < nums.length; i++) {\n            \n            int temp = max;  // store the max because before updating min your max will already be updated\n            \n            max = Math.max(Math.max(max * nums[i], min * nums[i]), nums[i]);\n            min = Math.min(Math.min(temp * nums[i], min * nums[i]), nums[i]);\n            \n            if (max > ans) {\n                ans = max;\n            }\n        }\n        \n        return ans;\n\n    }\n}",
    "class Solution {\n    public int maxProduct(int[] nums) {\n        \n        int max = nums[0], min = nums[0], ans = nums[0];\n        int n = nums.length;\n        \n        for (int i = 1; i < n; i++) {\n        \n   // Swapping min and max\n            if (nums[i] < 0){\n                int temp = max;\n                max = min;\n                min = temp;\n            }\n                \n\n\n            max = Math.max(nums[i], max * nums[i]);\n            min = Math.min(nums[i], min * nums[i]);\n\n\n            ans = Math.max(ans, max);\n        }\n        \n        return ans;\n\n    }\n}",
    "class Solution {\n    public int maxProduct(int[] nums) {\n        \n        int max = nums[0], min = nums[0], ans = nums[0];\n        \n        for (int i = 1; i < nums.length; i++) {\n            \n            int temp = max;  // store the max because before updating min your max will already be updated\n            \n            max = Math.max(Math.max(max * nums[i], min * nums[i]), nums[i]);\n            min = Math.min(Math.min(temp * nums[i], min * nums[i]), nums[i]);\n            \n            if (max > ans) {\n                ans = max;\n            }\n        }\n        \n        return ans;\n\n    }\n}"
]