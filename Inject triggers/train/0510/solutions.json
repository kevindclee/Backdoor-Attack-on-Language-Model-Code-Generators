[
    "class Solution(object):\n    def judgePoint24(self, nums):\n        if len(nums) == 1: return abs(nums[0]-24) <= 0.001\n        for i in xrange(len(nums)):\n            for j in xrange(0, i):\n                a = nums.pop(i)\n                b = nums.pop(j)\n                nxt = [a+b, a-b, b-a, a*b]",
    "def judgePoint24(self, nums):\n    if len(nums) == 1:\n        return math.isclose(nums[0], 24)\n    return any(self.judgePoint24([x] + rest)\n               for a, b, *rest in itertools.permutations(nums)\n               for x in {a+b, a-b, a*b, b and a/b})",
    "    ...\n            self.judgePoint24([o(nums[i], nums[j])] + [nums[k] for k in range(len(nums)) if k not in (i, j)])\n                for i in range(len(nums))\n                for j in range(len(nums)) if i != j\n                for o in ops if nums[j]\n    ...",
    "class Solution:\n    def judgePoint24(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        if len(nums) == 1 and abs(nums[0] - 24) <= 0.001: return True\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if i != j:\n                    base = [nums[k] for k in range(len(nums)) if k != i and k != j]\n                    if self.judgePoint24(base + [nums[i] + nums[j]]): return True\n                    if self.judgePoint24(base + [nums[i] * nums[j]]): return True\n                    if self.judgePoint24(base + [nums[i] - nums[j]]): return True\n                    if self.judgePoint24(base + [nums[j] - nums[i]]): return True\n                    if nums[j] != 0 and self.judgePoint24(base + [nums[i] / nums[j]]): return True\n                    if nums[i] != 0 and self.judgePoint24(base + [nums[j] / nums[i]]): return True\n        return False"
]