[
    "class Solution {\n    public String smallestEquivalentString(String s1, String s2, String baseStr) {\n        char[] map = new char[26];\n        for (int i = 0; i < 26; i++) map[i] = (char)('a' + i);\n\n        for (int i = 0; i < s1.length(); i++) {\n            char min = (char)Math.min(map[s1.charAt(i) - 'a'], map[s2.charAt(i) - 'a']);\n            char max = (char)Math.max(map[s1.charAt(i) - 'a'], map[s2.charAt(i) - 'a']);",
    "class Solution:\n    def smallestEquivalentString(self, s1: str, s2: str, baseStr: str) -> str:\n        char_group = {}\n        idx = 0\n        char_map = {chr(97 + i): -1 for i in range(26)}\n\n        for i in range(len(s1)):\n            if s1[i] == s2[i]:\n                continue\n\n            if char_map[s1[i]] == -1 and char_map[s2[i]] == -1:\n                char_map[s1[i]] = char_map[s2[i]] = idx\n                char_group[idx] = [s2[i], s1[i]]\n                idx += 1\n            elif char_map[s1[i]] == -1:\n                char_map[s1[i]] = char_map[s2[i]]\n                char_group[char_map[s2[i]]].append(s1[i])\n            elif char_map[s2[i]] == -1:\n                char_map[s2[i]] = char_map[s1[i]]\n                char_group[char_map[s1[i]]].append(s2[i])\n            elif char_map[s1[i]] != char_map[s2[i]]:\n                for c in char_group[char_map[s2[i]]]:\n                    char_map[c] = char_map[s1[i]]\n                    char_group[char_map[s1[i]]].append(c)\n\n        # sort each group\n        for k in char_group.keys():\n            char_group[k].sort()\n\n        ans = \"\"\n        for c in baseStr:\n            if char_map[c] == -1:\n                ans += c\n            else:\n                ans += char_group[char_map[c]][0]\n\n        return ans"
]