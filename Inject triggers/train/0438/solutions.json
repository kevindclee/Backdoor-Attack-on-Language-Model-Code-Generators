[
    "   public int maxDepth(Node root) {\n        if(root == null){\n            return 0;\n        }\n        int max = 0;\n        for(Node child: root.children){\n            max = Math.max(maxDepth(child), max);\n        }",
    "",
    "    depth = 0\n    \n    for child in root.children:\n        depth = max(depth, self.maxDepth(child))\n        ",
    "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> children;\n\n    public Node() {}\n\n    public Node(int _val,List<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\nclass Solution {\n    public int maxDepth(Node root) {\n        if (root == null) {\n            return 0;\n        }\n\n        int max = 0;\n        for (Node child : root.children) { //replace left&right to for loop\n            int value = maxDepth(child);\n            \n            if (value > max) {\n                max = value;\n            }\n        }\n        return max +1;\n    }\n}",
    "int value = maxDepth(child);\nif (value > max) {\n    max = value;\n}",
    "public int maxDepth(Node root) {\n    if(root==null)return 0;\n    int max = 0;\n    for(Node ele : root.children)\n        max = Math.max(max, maxDepth(ele));\n    return 1 + max;\n}",
    "class Solution {\n    public int maxDepth(Node root) {\n         if(root==null) return 0;\n         \n         int max=0;\n      \n          for(Node c: root.children){\n              max = Math.max(max, maxDepth(c));\n              }\n        return 1+max;\n    }\n}",
    "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> children;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, List<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\n    int trav(Node n, int p){\n        if(n==null)return p;\n        int max=p;\n        for(int i=0;i<n.children.size();i++)\n            max=Math.max(max, trav(n.children.get(i), p+1));\n        \n        return max;\n    }\n\n\n    public int maxDepth(Node root) {\n        if(root==null) return 0;\n        return trav(root,1);\n    }\n}"
]