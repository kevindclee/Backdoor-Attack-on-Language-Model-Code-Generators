[
    "class PeekingIterator(object):\n    def __init__(self, iterator):\n        self.iter = iterator\n        self.temp = self.iter.next() if self.iter.hasNext() else None\n\n    def peek(self):\n        return self.temp\n\n    def next(self):\n        ret = self.temp\n        self.temp = self.iter.next() if self.iter.hasNext() else None\n        return ret\n\n    def hasNext(self):\n        return self.temp is not None",
    "def __init__(self, iterator):\n    self.iter = iterator\n    self.nxt = iterator.hasNext() and iterator.next()\n\ndef peek(self):\n    return self.nxt\n\ndef next(self):",
    "class PeekingIterator:\n    def __init__(self, iterator):\n        \"\"\"\n        Initialize your data structure here.\n        :type iterator: Iterator\n        \"\"\"\n        self.iterator = iterator",
    "",
    "class PeekingIterator:\n    def __init__(self, iterator):\n        self.iterator = iterator\n        self.buffer = self.iterator.next() if self.iterator.hasNext() else None\n        \n    def peek(self):\n        return self.buffer\n        \n    def next(self):\n        tmp = self.buffer\n        self.buffer = self.iterator.next() if self.iterator.hasNext() else None\n        return tmp\n        \n    def hasNext(self):\n        return self.buffer != None",
    "def __init__(self, iterator):\n    self.iter = iterator\n    self.nxt = iterator.hasNext() and iterator.next()\n\ndef peek(self):\n    return self.nxt\n\ndef next(self):",
    "class PeekingIterator:\n    def __init__(self, iterator):\n        \"\"\"\n        Initialize your data structure here.\n        :type iterator: Iterator\n        \"\"\"",
    "class PeekingIterator:\n    def __init__(self, iterator):\n        self._iterator = iterator\n        self._current = None\n        self._hasNext = True\n        self.next()\n\n    def peek(self):\n        return self._current\n\n    def next(self):\n        current = self._current\n        if self._iterator.hasNext():\n            self._current = self._iterator.next()\n        else:\n            self._hasNext = False\n            \n        return current\n\n    def hasNext(self):\n        return self._hasNext",
    "class PeekingIterator:\n    def __init__(self, iterator):\n        self._iterator = iterator\n        self._peeked = False\n        self._current = None\n\n    def peek(self):\n        if not self._peeked:\n            self._current = self._iterator.next()\n            self._peeked = True\n\n        return self._current\n        \n    def next(self):\n        if self._peeked:\n            self._peeked = False\n        else: \n            self._current = self._iterator.next()\n\n        return self._current \n        \n    def hasNext(self):\n        return self._peeked or self._iterator.hasNext()",
    "class PeekingIterator:\n    def __init__(self, iterator):\n        \"\"\"\n        Initialize your data structure here.\n        :type iterator: Iterator\n        \"\"\"\n        self.iterator = iterator\n        self.current = self.iterator.next() if self.iterator.hasNext() else None        \n\n    def peek(self):\n        \"\"\"\n        Returns the next element in the iteration without advancing the iterator.\n        :rtype: int\n        \"\"\"\n        return self.current\n        \n\n    def next(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        value = self.current\n        self.current = self.iterator.next() if self.iterator.hasNext() else None       \n        return value\n            \n    def hasNext(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        return self.current != None\n      "
]