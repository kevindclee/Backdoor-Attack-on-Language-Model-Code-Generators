[
    "    def subarraysWithKDistinct(self, A, K):\n        return self.atMostK(A, K) - self.atMostK(A, K - 1)\n\n    def atMostK(self, A, K):\n        count = collections.Counter()\n        res = i = 0\n        for j in range(len(A)):\n            if count[A[j]] == 0: K -= 1\n            count[A[j]] += 1\n            while K < 0:\n                count[A[i]] -= 1\n                if count[A[i]] == 0: K += 1\n                i += 1\n            res += j - i + 1\n        return res",
    "class Solution:\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        lookup = collections.defaultdict(int)\n        l, r, counter, res = 0, 0, 0, 0\n        while r < len(s):\n            lookup[s[r]] += 1\n            if lookup[s[r]] == 1:\n                counter += 1\n            r += 1\n            while l < r and counter < r - l:\n                lookup[s[l]] -= 1\n                if lookup[s[l]] == 0:\n                    counter -= 1\n                l += 1\n            res = max(res, r - l)\n        return res",
    "class Solution(object):\n    def lengthOfLongestSubstringTwoDistinct(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        lookup = collections.defaultdict(int)\n        l, r, counter, res = 0, 0, 0, 0\n        while r < len(s):\n            lookup[s[r]] += 1\n            if lookup[s[r]] == 1:\n                counter += 1\n            r += 1   \n            while l < r and counter > 2:\n                lookup[s[l]] -= 1\n                if lookup[s[l]] == 0:\n                    counter -= 1\n                l += 1\n            res = max(res, r - l) \n        return res",
    "class Solution(object):\n    def lengthOfLongestSubstringKDistinct(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        lookup = collections.defaultdict(int)\n        l, r, counter, res = 0, 0, 0, 0\n        while r < len(s):\n            lookup[s[r]] += 1\n            if lookup[s[r]] == 1:\n                counter += 1\n            r += 1   \n            while l < r and counter > k:\n                lookup[s[l]] -= 1\n                if lookup[s[l]] == 0:\n                    counter -= 1\n                l += 1\n            res = max(res, r - l) \n        return res",
    "class Solution(object):\n    def numberOfSubarrays(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"",
    " public int subarraysWithKDistinct(int[] A, int K) {\n        int res = 0, count = 0, lo = 0, hi = 0, max = 0, n;\n        Map<Integer, Integer> dp = new HashMap<>();\n\n        while (hi < A.length) {\n            \n            // define how many ranges starting with lo, and has K distinct numbers\n            while (count == K) {\n                res += max - hi + 1;\n                n = dp.get(A[lo]);\n                if (n == 1) {\n                    count--;\n                    hi++;\n                }\n                dp.put(A[lo], n-1);\n                lo++;\n            }\n\n            // find the first range starting with lo, and has K distinct numbers\n            while (hi < A.length) {\n                n = dp.getOrDefault(A[hi], 0);\n                if (n == 0) count++;\n                dp.put(A[hi], n+1);\n                \n                // if found hi, then define max\n                if (count == K) {\n                    max = hi;\n                    while (max+1 < A.length) {\n                        if (dp.getOrDefault(A[max+1], 0) == 0) break;\n                        max++;\n                    }\n                    break;\n                }\n                hi++;\n            }\n        }\n\n        return res;\n    }",
    "    public int subarraysWithKDistinct(int[] A, int K) {\n        if (A == null || A.length == 0) return 0;\n        Map<Integer, Integer> map = new HashMap<>();\n        int res = 0;\n        int count = 0;\n        int l = 0, h = 0, max = 0;\n        while (h < A.length) {\n            map.put(A[h], map.getOrDefault(A[h], 0) + 1);\n            if (map.get(A[h]) == 1) count++;",
    "public int subarraysWithKDistinct(int[] nums, int k) {\n        int l=0; int r=0;\n        HashMap<Integer,Integer> map = new HashMap<>();\n        int res=0;\n        int maxIdxWithK=0;\n        while (l <= r && r < nums.length) {\n            map.put(nums[r], map.getOrDefault(nums[r], 0) + 1);\n    ",
    "     unordered_set<int> map;\nlong long left = 0, res = 0;\nfor(int right = 0; right<nums.size(); right++)\n{"
]