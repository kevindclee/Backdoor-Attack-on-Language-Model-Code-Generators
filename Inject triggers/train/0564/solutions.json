[
    "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.index = 0\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word, index): #None\n        root = self.root\n        root.index = index\n        for symbol in word:\n            root = root.children.setdefault(symbol, TrieNode())\n            root.index = index\n        \n    def startsWith(self, word):\n        root = self.root\n        for symbol in word:\n            if symbol not in root.children:\n                return -1\n            root = root.children[symbol]\n        return root.index  \n\n\nclass WordFilter:\n    def __init__(self, words):\n        self.trie = Trie()\n        self.words = {}\n        \n        for index, word in enumerate(words):\n            long = word + \"#\" + word\n            for i in range(len(word)):\n                self.trie.insert(long[i:], index)\n                \n    def f(self, prefix, suffix):\n        return self.trie.startsWith(suffix + \"#\" + prefix)",
    "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.index = 0\n\nclass Trie:"
]