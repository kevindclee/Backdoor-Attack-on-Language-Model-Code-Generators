[
    "    def decodeAtIndex(self, S, K):\n        N = 0\n        for i, c in enumerate(S):\n            N = N * int(c) if c.isdigit() else N + 1\n            if K <= N: break\n        for j in range(i, -1, -1):\n            c = S[j]\n            if c.isdigit():\n                N /= int(c)\n                K %= N\n            else:\n                if K == N or K == 0: return c\n                N -= 1",
    "class Solution:\n    def decodeAtIndex(self, S, K):\n        lens, n = [0], len(S)\n        for c in S:\n            if c.isdigit():\n                lens.append(lens[-1]*int(c))\n            else:\n                lens.append(lens[-1] + 1)\n                \n        for i in range(n, 0, -1):\n            K %= lens[i]\n            if K == 0 and S[i-1].isalpha():\n                return S[i-1]",
    "class Solution:\n    def decodeAtIndex(self, S, K):   \n        A = [1] # length of arrays: \"leet2code3\" -> [1,2,3,4,8,9,10,11,12,36]\n        for x in S[1:]:\n            # OPTIONAL: Early Stop (avoid repeating the string beyond the position \"K\")\n            if A[-1] >= K : break\n            #\n            if x.isdigit():\n                A.append( A[-1]*int(x) )\n            else:\n                A.append( A[-1]+1 )\n        #\n        for i in reversed(range(len(A))):\n            K %= A[i]\n            if not K and S[i].isalpha():\n                return S[i]",
    "class Solution(object):\n    def decodeAtIndex(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        lst=[0]\n        for i in range(len(s)):\n            if s[i].isnumeric():lst.append(lst[-1]*int(s[i]))\n            else:lst.append(lst[-1]+1)\n        ln=len(lst)\n        for i in lst[::-1]:\n            k%=i\n            ln-=1\n            if k==0 and s[ln-1].isalpha():\n                return s[ln-1]\n        return \"\""
]