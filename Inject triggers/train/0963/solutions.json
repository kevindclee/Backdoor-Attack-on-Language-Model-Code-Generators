[
    "    def maxSumDivThree(self, A):\n        dp = [0, 0, 0]\n        for a in A:\n            for i in dp[:]:\n                dp[(i + a) % 3] = max(dp[(i + a) % 3], i + a)\n        return dp[0]",
    "class Solution {\n    public int maxSumDivThree(int[] nums) {\n        int[] dp = new int[3];\n        for(int num:nums){\n            int[] next = dp.clone();\n            for(int sum:dp){\n                int nsum = sum+num;\n                int index = nsum%3;",
    "class Solution {\n    public int maxSumDivThree(int[] nums) {\n        int res = 0, leftOne = 20000, leftTwo = 20000;\n        for(int n:nums){\n            res+=n;\n            if(n%3==1){\n                leftTwo = Math.min(leftTwo,leftOne+n);\n                leftOne = Math.min(leftOne,n);\n            }\n            if(n%3==2) {\n                leftOne = Math.min(leftOne,leftTwo+n);\n                leftTwo = Math.min(leftTwo,n);\n            }\n        }\n        if(res%3==0) return res;\n        if(res%3==1) return res-leftOne;\n        return res - leftTwo;\n        \n    }\n}",
    "public int maxSumDivThree(int[] nums) {\n        int min1 = 10001;\n        int min4 = 10001;\n        int min2 = 10001;\n        int min5 = 10001;\n        int sum = 0;",
    "class Solution:\n    def maxSumDivThree(self, nums):\n        n = len(nums)\n        \n        def maxSumDivByK(k):\n            dp = [0]*k\n            for num in nums:\n                for curSum in dp[:]:",
    "        int n = nums.size();\n        vector<vector<int>>dp(n+1,vector<int>(3,0));\n        dp[0][1]=dp[0][2]=INT_MIN;\n        \n        for(int i=1;i<=n;i++)\n        {\n            if(nums[i-1]%3==0)\n            {",
    "class Solution:\n    def maxSumDivThree(self, nums):\n        n = len(nums)\n        \n        totalSum = 0\n        mod1, mod2 = [], []\n        \n        for num in nums:",
    "tmp = sum(mod_1) +sum(mod_2)\nif tmp % 3 == 0:\n    return res + tmp",
    "# Beat 75%\nclass Solution:\n    def maxSumDivThree(self, arr):\n        arr.sort()\n        if sum(arr) % 3 == 0: return sum(arr)\n        mod1 = list(filter(lambda x: x % 3 == 2 or x % 3 == 3, arr)) + [0,0]\n sum(mod2[:2])]",
    "",
    "class Solution:\n    def maxSumDivThree(self, nums):\n        S = sum(nums)\n        if S%3==0:return S\n        d = collections.defaultdict(list)\n        for num in nums:d[num%3].append(num)\n        to_be_removed = []\n        if S % 3 == 1:",
    "class Solution {\npublic:\n    int dp[40004][3]; \n    int solve(vector<int>& v, int start, int sum){\n        if(start==v.size())return 0;\n        if(dp[start][sum]!=-1)return dp[start][sum];\n        int ans=INT_MIN;\n        if((sum+solve(v,start+1,sum))%3==0){",
    "A = [3,6,5,1,8]\n\nbuckets { 0, 0, 0 }\n          0  1  2\n\nA = [3,6,5,1,8]\n     ^\nbuckets { 3, 0, 0 }\n          0  1  2\n\nA = [3,6,5,1,8]\n       ^\nbuckets { 9, 0, 0 }\n          0  1  2\n\nA = [3,6,5,1,8]\n         ^\nbuckets { 9, 0, 14 }\n          0  1   2\n\nA = [3,6,5,1,8]\n           ^\nbuckets { 15, 10, 14 }\n           0   1   2\n\nA = [3,6,5,1,8]\n             ^\nbuckets { 18, 22, 23 }\n           0   1   2\n           \nthe answer in buckets[0] is 18",
    "A = [4]\nbuckets { 0, 0, 0 }\n          0  1  2\n\nA = [4]\n     ^\nbuckets { 0, 4, 0 }\n          0  1  2\n          \nthe answer in buckets[0] is 0",
    "A = [1,2,3,4,4]\n\nbuckets { 0, 0, 0 }\n          0  1  2\n          \nA = [1,2,3,4,4]\n     ^\nbuckets { 0, 1, 0 } \n          0  1  2\n\nA = [1,2,3,4,4]\n       ^\nbuckets { 3, 1, 2 } \n          0  1  2\n          \nA = [1,2,3,4,4]\n         ^\nbuckets { 6, 4, 5 } \n          0  1  2\n\nA = [1,2,3,4,4]\n           ^\nbuckets { 9, 10, 8 }\n          0   1  2\n\nA = [1,2,3,4,4]\n             ^\nbuckets { 12, 13, 14 } \n           0   1   2\n\nthe answer in buckets[0] is 12"
]