[
    "     int minOperationsMaxProfit(vector<int>& customers, int boardingCost, int runningCost) {\n        if(boardingCost*4<=runningCost) return -1;\n        int profit=0, ct=0, rem=0, cur=0;\n        for(int i=0;i<customers.size();i++) {\n            cur+=min(4, customers[i])*boardingCost-runningCost;\n            if(i==customers.size()-1) rem=max(0, customers[i]-4);\n            else customers[i+1]+=max(0, customers[i]-4);\n            if(cur>profit) profit=cur, ct=i+1;",
    "int minOperationsMaxProfit(vector<int>& cust, int boardingCost, int runningCost) {\n    int wait = 0, prof = 0, max_prof = 0, max_i = -1;\n    for (int i = 0; i < cust.size() || wait > 0; ++i) {\n        if (i < cust.size())\n            wait += cust[i];\n        prof += min(4, wait) * boardingCost - runningCost;\n        wait -= min(4, wait);\n        if (max_prof < prof) {\n            max_prof = prof;\n            max_i = i + 1;\n        }\n    }\n    return max_i;\n}",
    "class Solution:\n    def minOperationsMaxProfit(self, customers: List[int], boardingCost: int, runningCost: int) -> int:\n        if 4 * boardingCost < runningCost:\n            return -1\n        \n        more_than_once = list(filter(lambda x: x > 4, customers))\n        customers += [0] * (ceil(sum(more_than_once)/4) - len(more_than_once))\n        n = len(customers)\n        total_profit = max_profit = min(customers[0], 4) * boardingCost - runningCost\n        if n > 1:\n            customers[1] += max(0, customers[0]-4)\n\n        res = 1\n        for i in range(1, n):\n            profit = min(customers[i], 4) * boardingCost - runningCost\n            total_profit += profit\n            if i + 1 < n:\n                customers[i+1] += max(0, customers[i]-4)\n            if total_profit > max_profit:\n                max_profit = total_profit\n                res = i + 1\n        \n        return res if max_profit > 0 else -1",
    "class Solution:\n    def minOperationsMaxProfit(self, customers, boardingCost, runningCost):\n        n, profit, i, waiting, max_val, max_valAt = len(customers), 0, 0, 0, 0, 0\n\n        while (waiting > 0 or i < n):\n            if i < n:\n                waiting += customers[i]\n            \n            min_val = min(4,waiting)\n            profit += min_val*boardingCost - runningCost\n            waiting -= min_val\n\n            if profit > max_val:\n                max_val = profit\n                max_valAt = i + 1\n\n            i += 1\n\n        return max_valAt if max_valAt > 0 else -1\n\n\n\n\n\n\n        "
]