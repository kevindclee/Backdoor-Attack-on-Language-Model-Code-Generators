[
    "    def minKBitFlips(self, A, K):\n        cur, res, n = 0, 0, len(A)\n        for i in xrange(len(A)):\n            if i >= K and A[i - K] > 1:\n                A[i - K] -= 2\n                cur -= 1\n            if cur & 1 ^ A[i] == 0:\n                if i + K > len(A):\n                    return -1\n                A[i] += 2\n                cur += 1\n                res += 1\n        return res",
    "class Solution(object):\n    def minKBitFlips(self, A, K):\n        cur = res = 0\n        for i in range(len(A)):\n            if i >= K and A[i - K] == 2:\n                cur -= 1\n            if (cur % 2) == A[i]:\n                if i + K > len(A):",
    "class Solution {\npublic:\n    int minKBitFlips(vector<int>& A, int K) {\n        int sum = 0, flips = 0;\n        for (int i = 0; i <= A.size() - 1; ++i) {\n            if (A[i] == flips) {\n                if (i + K > A.size()) return -1;",
    "        @lru_cache(None)\n        def helper(A, start):\n            for i in range(start, len(A)):\n                if not A[i]: return i\n            return len(A)\n        \n        @lru_cache(None)\n        def dp(i, A, K):"
]