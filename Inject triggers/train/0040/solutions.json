[
    " def firstMissingPositive(self, nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n     Basic idea:\n    1. for any array whose length is l, the first missing positive must be in range [1,...,l+1], \n        so we only have to care about those elements in this range and remove the rest.\n    2. we can use the array index as the hash to restore the frequency of each number within \n         the range [1,...,l+1] \n    \"\"\"\n    nums.append(0)\n    n = len(nums)\n    for i in range(len(nums)): #delete those useless elements\n        if nums[i]<0 or nums[i]>=n:\n            nums[i]=0\n    for i in range(len(nums)): #use the index as the hash to record the frequency of each number\n        nums[nums[i]%n]+=n\n    for i in range(1,len(nums)):\n        if nums[i]/n==0:\n            return i\n    return n",
    "        nums = list(set(nums)) + [0]\n        n = len(nums)\n        for i in range(len(nums)):  # delete those useless elements\n            if nums[i] < 0 or nums[i] >= n:\n                nums[i] = 0\n        for i in range(len(nums)):  # use the index as the hash to record the frequency of each number\n            nums[nums[i] % n] += n\n        for i in range(1, len(nums)):",
    "class Solution {\npublic:\n    int firstMissingPositive(vector<int>& nums) {\n        int n = nums.size();\n        for(int i=0; i<n; i++) {\n            if(nums[i] <= 0 or nums[i] > n) {\n                nums[i] = n+1;\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            if(abs(nums[i]) > n) continue;\n            int id = abs(nums[i]);\n            nums[id-1] = -1 * abs(nums[id-1]);\n        }\n        int ans = n + 1;\n        for(int i = 0; i < n; i++) {\n            if(nums[i] > 0) {\n                ans = i+1;\n                break;\n            }\n        }\n        return ans;\n    }  \n};"
]