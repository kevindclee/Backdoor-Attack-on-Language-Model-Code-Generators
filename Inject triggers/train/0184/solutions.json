[
    "class Solution {\n    public int minSubArrayLen(int target, int[] nums) {\n        int i=0;\n        int j=0;\n        int min=Integer.MAX_VALUE;\n        int sum=0;\n        while(j<nums.length){\n            sum+=nums[j];\n            if(sum>=target){\n                while(sum>=target){\n                    min=Math.min(min,j-i+1);\n                    sum-=nums[i];\n                    i++;\n                }\n            }\n            j++;\n        }\n        if(min==Integer.MAX_VALUE)\n            return 0;\n        else\n            return min;\n    }\n}",
    "class Solution {\n    public int minSubArrayLen(int target, int[] nums) {\n         int start = 0,  end = 0,  sum = 0,  minLength = Integer.MAX_VALUE;\n         if (nums == null || nums.length == 0)\n        return 0;\n  \n  while (end < nums.length) {\n    sum += nums[end];\n    end++;\n    while (sum >= target) {\n      minLength = Math.min(minLength, end - start);\n      sum -= nums[start];\n      start++;\n    }\n  }\n  if(minLength == Integer.MAX_VALUE) \n  return 0 ;\n  return minLength;\n    }\n}",
    "class Solution {\npublic:\n    int minSubArrayLen(int target, vector<int>& nums) {\n        int n=nums.size();\n       int sum=0;\n       int ans=n+1;\n       int j=0;\n        for(int i=0;i<n;i++){\n            sum+=nums[i];\n            if(sum>=target){\n                ans=min(ans,(i-j+1));\n                while(sum>=target){\n                    sum-=nums[j];\n                   \n                    ans=min(ans,(i-j+1));\n                    j++;\n                }\n             \n            }\n \n        }\n        if(ans==n+1) ans=0;\n        return ans;\n    }\n};",
    "class Solution {\npublic:\n    int minSubArrayLen(int target, vector<int>& nums) {\n        int i=0,j=0,sum=0,mn=INT_MAX,flag=0;\n        while(j<=nums.size()-1){\n            sum+=nums[j];\n            if(sum>=target){\n                int x=j-i+1;\n                flag=1;\n                mn=min(mn,x);\n         sum-=nums[i];\n         i++;}\n         while(sum>=target){\n             mn=min(mn,j-i+1);\n             sum-=nums[i];\n             i++;\n         }\n         j++;\n        }\n        if(flag==0) return 0;\n        return mn;\n    }\n};",
    "class Solution {\npublic:\n    int minSubArrayLen(int k, vector<int>& nums) {\n        long int sum=0,sum2=0;\n        int m=INT_MAX,j=0,i=0;\n        int n=nums.size();\n        \n        while(i<n){\n            if(sum<k){\n            sum+=nums[i++];\n                }\n         if(sum==k){\n             m=min(m,i-j);\n             sum+=nums[i++];\n         }\n          while(sum>=k&&j<n){\n                   m=min(m,i-j);\n                    sum-=nums[j++];\n                }\n    \n        }\n\n   if(m==INT_MAX){return 0;}\n\n        return m;\n    }\n};",
    "class Solution {\npublic:\n    int minSubArrayLen(int target, vector<int>& nums) {\n        int j=0,i,l;\n        int mn=INT_MAX;\n        int sum=0;\n        for(i=0;i<nums.size();i++){\n            sum+=nums[i];\n            if(sum>=target){\n                while(sum>=target){\n                    sum-=nums[j++];\n                }\n                sum+=nums[--j];\n                l=i-j+1;\n                mn=min(mn,l);\n            }\n        }\n        if(mn==INT_MAX)return 0;\n        return mn;\n    }\n};",
    "class Solution {\npublic:\n    int minSubArrayLen(int target, vector<int>& nums) {\n        int sum = 0 , l=0 , r=0;\n        int mini = INT_MAX;\n        while(r < nums.size()){\n            while(sum<target && r<nums.size()){\n                sum += nums[r++];\n            }\n            if(sum<target) break;\n            while(sum>=target && l < r){\n                sum -= nums[l++];\n            }\n            mini = min(mini , r-l+1);     \n        }\n        if(mini == INT_MAX) return 0;\n        return mini;\n    }\n};"
]