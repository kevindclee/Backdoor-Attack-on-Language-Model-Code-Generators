[
    "class Solution(object):\n    def findMaxLength(self, nums):\n        count = 0\n        max_length=0\n        table = {0: 0}\n        for index, num in enumerate(nums, 1):\n            if num == 0:\n                count -= 1\n            else:\n                count += 1\n            \n            if count in table:\n                max_length = max(max_length, index - table[count])\n            else:\n                table[count] = index\n        \n        return max_length",
    "for index, num in enumerate(nums, 1):",
    "def findMaxLength(self, nums):\n    d = {0: 0}\n    key, maxL = 0, 0\n    for i in range(len(nums)):\n        key += nums[i] or -1\n        if key not in d:\n            d[key] = i+1\n        else:",
    " if len(nums) < 2:\n            return 0\n        ",
    "class Solution {\n    public int findMaxLength(int[] nums) {\n        int count = 0;\n        int maxLen = 0;\n        Map<Integer, Integer> map = new HashMap<>();\n        \n        map.put(0, -1);\n        ",
    "sum += nums[i] * 2 - 1;",
    "",
    "if count==0:\n     # if count is 0, we have a new subarray with length+1\n     max_length=i+1",
    "Now what we will do is, convert all the \"0\" to \"-1\".\nAs we converted all zero's to minus one we will inatilize a sum variable and a longest subarray variable.",
    "class Solution {\npublic:\n   \n    int getLongestSubarray(vector<int>& A, int K){\n    int N=A.size();\n    unordered_map<int,int> map;\n        int presum=0,res=0;\n        for(int i=0;i<N;i++){\n            presum+=A[i];\n            if(presum==K){\n                res=i+1;\n            }\n            if(map.find(presum)==map.end()){\n                map.insert({presum,i});\n                \n            }\n            if(map.find(presum-K)!=map.end()){\n                res=max(res,i-map[presum-K]);\n            }\n        }\n        return res;\n    }\n\n\n    int findMaxLength(vector<int>& arr) {\n        int n=arr.size();\n        for(int i=0;i<n;i++){\n             if(arr[i]==0){\n             arr[i]=-1;\n           \n         }\n     } \n    return getLongestSubarray(arr,0);\n    }\n};",
    "class Solution {\npublic:\n    int findMaxLength(vector<int>& nums) {\n        for(auto &i: nums){\n            if(i==0)i = -1;\n        }\n        int ans = 0,sum = 0;\n        unordered_map<int,int> mp;\n        for(int i = 0; i < nums.size(); i++){\n            sum += nums[i];\n            if(sum == 0){\n                ans = i+1;\n            }\n            if(mp.count(sum)){\n                ans = max(ans,i-mp[sum]);\n            }\n            if(mp.count(sum)==0){\n                mp[sum] = i;\n            }\n        }\n        return ans;\n    }\n};"
]