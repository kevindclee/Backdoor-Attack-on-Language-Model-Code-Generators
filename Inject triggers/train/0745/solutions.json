[
    "    def movesToStamp(self, s, t):\n        n, m, t, s, res = len(t), len(s), list(t), list(s), []\n\n        def check(i):\n            changed = False\n            for j in range(m):\n                if t[i + j] == '?': continue\n                if t[i + j] != s[j]: return False\n                changed = True\n            if changed:\n                t[i:i + m] = ['?'] * m\n                res.append(i)\n            return changed\n\n        changed = True\n        while changed:\n            changed = False\n            for i in range(n - m + 1):\n                changed |= check(i)\n        return res[::-1] if t == ['?'] * n else []",
    "    def movesToStamp(self, s, t):\n        if s[0] != t[0] or s[-1] != t[-1]: return []\n        n, m = len(s), len(t)\n        path = [0] * m\n        pos = collections.defaultdict(set)\n        for i, c in enumerate(s): pos[c].add(i)\n\n        def dfs(i, index):\n            path[i] = index\n            if i == m - 1: return index == n - 1\n            nxt_index = set()\n            if index == n - 1:  # rule 2\n                nxt_index |= pos[t[i + 1]]\n            elif s[index + 1] == t[i + 1]:  # rule 0\n                nxt_index.add(index + 1)\n            if s[0] == t[i + 1]:  # rule 1\n                nxt_index.add(0)\n            return any(dfs(i + 1, j) for j in nxt_index)\n\n        def path2res(path):\n            down, up = [], []\n            for i in range(len(path)):\n                if path[i] == 0:\n                    up.append(i)\n                elif i and path[i] - 1 != path[i - 1]:\n                    down.append(i - path[i])\n            return down[::-1] + up\n\n        if not dfs(0, 0): return []\n        return path2res(path)",
    " pass 1:  a b a b a b c b c b a b a b c b c\n                  ^ ^ ^           ^ ^ ^\n\n pass 2:  a b a b * * * b c b a b * * * b c\n              ^ ^ ^   ^ ^ ^   ^ ^ ^   ^ ^ ^\n\n pass 3:  a b * * * * * * * b * * * * * * *\n          ^ ^ ^           ^ ^ ^\n\n pass 4:  * * * * * * * * * * * * * * * * *"
]