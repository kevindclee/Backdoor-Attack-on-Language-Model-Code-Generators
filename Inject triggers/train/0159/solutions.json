[
    "class Solution:\n    # @return a string\n    def fractionToDecimal(self, n, d):\n        res = ''\n        if n == 0:\n            return str(n)",
    "class Solution:\n# @return a string\ndef fractionToDecimal(self, numerator, denominator):\n    n, remainder = divmod(abs(numerator), abs(denominator))\n    sign = '-' if numerator*denominator < 0 else ''\n    result = [sign+str(n), '.']\n    stack = []\n    while remainder not in stack:\n        stack.append(remainder)\n        n, remainder = divmod(remainder*10, abs(denominator))\n        result.append(str(n))\n\n    idx = stack.index(remainder)\n    result.insert(idx+2, '(')\n    result.append(')')\n    return ''.join(result).replace('(0)', '').rstrip('.')",
    "def fractionToDecimal(self, numerator, denominator):\n\n    n, remainder = divmod(abs(numerator), abs(denominator))",
    "class Solution:\n    def fractionToDecimal(self, numerator, denominator):\n\n        n, remainder = divmod(abs(numerator), abs(denominator))\n        sign = '-' if numerator * denominator < 0 else ''\n        integer = sign + str(n)\n        if remainder == 0: return integer\n        ",
    "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        if numerator % denominator == 0:\n            return str(numerator//denominator)\n        sign = '' if numerator * denominator >= 0 else '-'\n        numerator, denominator = abs(numerator), abs(denominator)\n        res = sign + str(numerator//denominator) + '.'\n        numerator %= denominator\n        i, part = 0, ''\n        m = {numerator:i}\n        while numerator % denominator:\n            numerator *= 10\n            i += 1\n            rem = numerator % denominator\n            part += str(numerator // denominator)\n            if rem in m:\n                part = part[:m[rem]]+'('+part[m[rem]:]+')'\n                return res + part\n            m[rem] = i\n            numerator = rem\n        return res + part"
]