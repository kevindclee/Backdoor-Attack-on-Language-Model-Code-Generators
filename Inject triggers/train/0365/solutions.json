[
    "    public int islandPerimeter(int[][] grid) {\n        int sum = 0;\n        if (grid == null || grid.length == 0 || grid[0].length == 0) return sum;\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[0].length; j++) {\n                if (grid[i][j] == 0)\n                    continue;\n                if (i == 0 || grid[i-1][j] == 0) sum++;",
    "def islandPerimeter(self, grid):\n    \"\"\"\n    :type grid: List[List[int]]\n    :rtype: int\n    \"\"\"\n    ans = 0\n    for i in range(len(grid)):",
    "class Solution:\n    def islandPerimeter(self, grid):\n        m, n, Perimeter = len(grid), len(grid[0]), 0\n\n        for i in range(m):\n            for j in range(n):\n                Perimeter += 4*grid[i][j]\n                if i > 0:   Perimeter -= grid[i][j]*grid[i-1][j]\n                if i < m-1: Perimeter -= grid[i][j]*grid[i+1][j]\n                if j > 0:   Perimeter -= grid[i][j]*grid[i][j-1]\n                if j < n-1: Perimeter -= grid[i][j]*grid[i][j+1]\n                    \n        return Perimeter",
    "extended_grid =  [[0] * (m+2)] + [[0] +x + [0] for x in grid] + [[0] * (m+2)] \n# e.g [[1,0,0,0],[1,1,0,0]] become [[0,0,0,0,0,0], [0,1,0,0,0,0], [0,1,1,0,0,0], [0,0,0,0,0,0]]\n# traverse each cell, \n# if next cell in same row is not same then Perimeter ++, \n# if same cell in next row is not same then Perimeter ++",
    "def islandPerimeter(self, grid):\n    return sum(sum(map(operator.ne, [0] + row, row + [0]))\n               for row in grid + map(list, zip(*grid)))",
    "class Solution(object):\n    def islandPerimeter(self, grid):\n        grid_ext = ['0' + ''.join(str(x) for x in row) + '0' for row in grid]\n        grid_trans = list(map(list, zip(*grid)))\n        grid_ext += [ '0' + ''.join(str(x) for x in row) + '0' for row in grid_trans ]                \n        return sum(row.count('01') + row.count('10') for row in grid_ext)",
    "class Solution:\n    def islandPerimeter(self, grid):\n        area = 0\n        for row in grid + list(map(list, zip(*grid))):\n            for i1, i2 in zip([0] + row, row + [0]):\n                area += int(i1 != i2)\n        return area",
    "class Solution:\n    def islandPerimeter(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        # Perimeter = number of edges\n        # edge detection along horizontal and vertical direction",
    "for row in grid + list(map(list, zip(*grid))))",
    "def islandPerimeter(self, grid):\n        h = len(grid)\n        w = len(grid[0])\n        extended_grid = [[0]*(w+2)] + [[0] + row + [0] for row in grid] + [[0]*(w+2)]\n        perimeter = 0\n        for i in range(h+1):\n            for j in range(w+1):\n                if extended_grid[i][j] != extended_grid[i][j+1]:"
]