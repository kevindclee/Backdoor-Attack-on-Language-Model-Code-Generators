[
    "    def maxWidthRamp(self, A):\n        s = []\n        res = 0\n        for i, a in enumerate(A):\n            if not s or A[s[-1]] > a:\n                s.append(i)\n        for j in range(len(A))[::-1]:\n            while s and A[s[-1]] <= A[j]:\n                res = max(res, j - s.pop())\n        return res",
    "class Solution {\npublic:\n    int maxWidthRamp(vector<int>& A) {\n        int n=A.size(), i=0,j=0,len=0;\n        vector<int> lMin(n, 0);\n        vector<int> rMax(n, 0);\n        \n        lMin[0] = A[0];",
    "for each element A[i], we need to go back left to find the farthest element that is smaller than A[i].",
    "public int maxWidthRamp(int[] A) {\n        if(A == null || A.length == 0) return 0;\n        boolean[] isLeftBar = new boolean[A.length];\n        int leftPointer = 0;\n        int min = A[leftPointer];\n        isLeftBar[0] = true;\n        for(int i = 0;i< A.length;i++){\n            if(A[i] < min){",
    "def maxWidthRamp(self, A):\n    min_arr = [A[0]] * len(A)\n    for i in range(1, len(A)):\n        min_arr[i] = min(min_arr[i - 1], A[i])\n    max_arr = [A[-1]] * len(A)\n    for i in range(len(A) - 2, -1, -1):\n        max_arr[i] = max(max_arr[i + 1], A[i])\n\n    ans = 0\n    left = 0\n    right = 0\n    while right < len(A):\n        if min_arr[left] <= max_arr[right]:\n            ans = max(ans, right - left)\n            right += 1\n        else:\n            left += 1\n    return ans",
    "class Solution:\n    def maxWidthRamp(self, A):\n        ind, mx, index = float(\"inf\"), 0, collections.defaultdict(list)\n        for i, num in enumerate(A):\n            index[num].append(i)\n        for num in sorted(A):\n            mx = max(mx, index[num][-1] - ind)\n            ind = min(ind, index[num][0])\n        return mx",
    "class Solution(object):\n    def maxWidthRamp(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        table = [(a, i) for i, a in enumerate(A)]",
    "class Solution(object):\n    def maxWidthRamp(self, A):\n        for i in range(len(A)):\n            A[i] = (A[i], i)",
    "    def maxWidthRamp(self, A):\n        res, miN, idx = 0, len(A)-1, {}\n        for i, n  in enumerate(A):\n            if n not in idx:\n                idx[n] = [i, i]\n            else:\n                idx[n][1] = i\n\n         for n in sorted(idx.keys()):",
    "public int maxWidthRamp(int[] A) {\n        if(A == null || A.length == 0) return 0;\n        boolean[] isLeftBar = new boolean[A.length];\n        int leftPointer = 0;\n        int min = A[leftPointer];\n        isLeftBar[0] = true;\n        for(int i = 0;i< A.length;i++){",
    "class Solution {\n    public int maxWidthRamp(int[] A) {\n        int n = A.length;\n        int i, j , max = 0;\n        int[] maxR = new int[n], minL = new int[n];\n        minL[0] = A[0];\n        for (i = 1; i < n; i++){\n            minL[i] = Math.min(A[i], minL[i - 1]);\n        }\n        maxR[n - 1] = A[n - 1];\n        for (j = n - 2; j >= 0; j--){\n            maxR[j] = Math.max(A[j], maxR[j + 1]);\n        }\n        i = 0; j = 0;\n        while (i < n && j < n){\n            if (minL[i] <= maxR[j]){\n                max = Math.max(max, j - i);\n                j++;\n            }else{\n                i++;\n            }\n        }\n        return max;\n    }\n}",
    "class Solution:\n    def maxWidthRamp(self, A):\n        n = len(A)\n        l = r = res = 0\n        maxR = [0]*n\n        minL = [A[0]]+[0]*(n-1)\n        \n        for i in range(1,n):"
]