[
    "    def nthMagicalNumber(self, N, A, B):\n        a, b = A, B\n        while b: a, b = b, a % b\n        l, r, lcm = 2, 10**14, A * B / a\n        while l < r:\n            m = (l + r) / 2\n            if m / A + m / B - m / lcm < N: l = m + 1\n            else: r = m\n        return l % (10**9 + 7)",
    "from fractions import gcd\nclass Solution:\n    def nthMagicalNumber(self, N, A, B):\n        l, r, lcm = 2, 10**14, A*B/gcd(A,B)\n        while l < r:\n            m = (l+r)/2\n            if m / A + m / B - m / lcm < N:\n                l = m + 1",
    "class Solution(object):\n def gcd(self, x, y):\n  while y > 0:\n   x, y = y, x % y\n  return x\n\n def lcm(self, x, y):\n  return x*y//self.gcd(x,y)\n\n def nthMagicalNumber(self, N, A, B):\n  temp = self.lcm(A,B)\n  seq = {}\n  for i in range(1,temp//A+1):\n   seq[i*A] = 1\n  for i in range(1,temp//B+1):\n   seq[i*B] = 1\n  cand = sorted([key for key, value in seq.items()])\n  ans = ((N-1)//len(cand))*cand[-1] + cand[N%len(cand)-1]\n  return ans % (10**9+7)",
    "class Solution(object):\n def lcm(self, x, y):\n  return x*y//gcd(x,y)\n\n def nthMagicalNumber(self, N, A, B):\n  lcmAB = self.lcm(A,B)\n  seq = set()\n  for i in range(1, lcmAB//A+1):",
    "class Solution:\n    def nthMagicalNumber(self, N, A, B):\n        lcm, Q = A*B//gcd(A,B), 10**9 + 7\n        cand = sorted([A*i for i in range(1,lcm//A)] + [B*i for i in range(1,lcm//B+1)])\n        m = len(cand)\n        return (cand[(N-1)%m] + lcm*((N-1)//m)) % Q",
    "  1. Simple Approach Start the iteration from 2 and take a\n     mod of either a or c.\n  2. Increment the count.\n  3. If count is n then return the starting number."
]