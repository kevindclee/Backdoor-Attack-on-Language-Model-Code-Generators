[
    " int dp[102][102] = {};  ",
    "    def minCost(self, n, A):\n        A = sorted(A + [0, n])\n        k = len(A)\n        dp = [[0] * k for _ in xrange(k)]\n        for d in xrange(2, k):\n            for i in xrange(k - d):\n                dp[i][i + d] = min(dp[i][m] + dp[m][i + d] for m in xrange(i + 1, i + d)) + A[i + d] - A[i]\n        return dp[0][k - 1]",
    "class Solution {\n    Map<ArrayList<Integer>, Integer> map;\n    public int minCost(int n, int[] cuts) {\n        map = new HashMap<>();\n        return cost(cuts, 0, n);\n    }\n    public int cost(int cuts[], int l, int r) {\n        ArrayList<Integer> ind = new ArrayList<>();\n        ind.add(l); ind.add(r);\n        if(map.containsKey(ind)) return map.get(ind);\n        int min = Integer.MAX_VALUE;\n        for(int i : cuts) {\n            if(i <= l || i >= r) continue;\n            int temp = cost(cuts, l, i);\n            temp += cost(cuts, i, r);\n            min = Math.min(temp + r - l, min);\n        }\n        if(min == Integer.MAX_VALUE) {\n            min = 0;\n        }\n        map.put(ind, min);\n        return min;\n    }\n}",
    "class Solution {\npublic:\n    map<pair<int,int>,int>mp;\n    int solve(vector<int>&cuts, int start,int end,int i, int j){\n        if(i>j or end-start==0)\n            return 0;\n        if(mp.find({i,j})!=mp.end()){\n            return mp[{i,j}];\n        }\n        if(i==j )\n            return mp[{i,j}]= end-start;\n        // cout<<start<<\" \"<<end<<\" \"<<cuts[i]<<\" \"<<cuts[j]<<\" \"<<i<<\" \"<<j<<endl;\n        int ans=INT_MAX;\n        for(int cut=i;cut<j+1;cut++){\n            int val = (end-start)+solve(cuts,start,cuts[cut],i,cut-1)+solve(cuts,cuts[cut],end,cut+1,j);\n            ans =min(ans,val);\n        }\n        return mp[{i,j}]= ans;\n    }\n    int minCost(int n, vector<int>& cuts) {\n        int len =cuts.size();\n        sort(cuts.begin(),cuts.end());\n        mp.clear();\n        return solve(cuts,0,n,0,len-1);\n    }\n};"
]