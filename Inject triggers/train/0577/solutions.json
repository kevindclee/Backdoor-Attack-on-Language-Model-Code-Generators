[
    "def orderOfLargestPlusSign(self, N, mines):\n    \"\"\"\n    :type N: int\n    :type mines: List[List[int]]\n    :rtype: int\n    \"\"\"\n    grid = [[N] * N for i in range(N)]\n        \n    for m in mines:\n        grid[m[0]][m[1]] = 0\n            \n    for i in range(N):\n        l, r, u, d = 0, 0, 0, 0\n            \n        for j, k in zip(range(N), reversed(range(N))):\n            l = l + 1 if grid[i][j] != 0 else 0\n            if l < grid[i][j]:\n                grid[i][j] = l\n            \n            r = r + 1 if grid[i][k] != 0 else 0\n            if r < grid[i][k]:\n                grid[i][k] = r\n\n            u = u + 1 if grid[j][i] != 0 else 0\n            if u < grid[j][i]:\n                grid[j][i] = u\n                \n            d = d + 1 if grid[k][i] != 0 else 0\n            if d < grid[k][i]:\n                grid[k][i] = d\n        \n    res = 0\n        \n    for i in range(N):\n        for j in range(N):\n            if res < grid[i][j]:\n                res = grid[i][j]\n                \n    return res",
    " for (int r = 0; r < n; ++r) {\n            for (int c = 0; c < n; ++c) {\n                int plusSignSize = dpMaxArm(n, isMine, r, c, 0);\n                for (int d = 1; d < 4; ++d)\n                    plusSignSize = min(plusSignSize, dpMaxArm(n, isMine, r, c, d));\n                ans = max(ans, plusSignSize);",
    "from bisect import bisect_right\n\nclass Solution(object):\n    def orderOfLargestPlusSign(self, N, mines):\n        \"\"\"\n        :type N: int\n        :type mines: List[List[int]]\n        :rtype: int\n        \"\"\"\n        rows = [[-1, N] for _ in xrange(N)]\n        cols = [[-1, N] for _ in xrange(N)]\n        for r, c in mines:\n            rows[r].append(c)\n            cols[c].append(r)\n        for i in xrange(N):\n            rows[i].sort()\n            cols[i].sort()\n        mxp = 0\n        for r in xrange(N):\n            for i in xrange(len(rows[r])-1):\n                left_b = rows[r][i]\n                right_b = rows[r][i+1]\n                for c in xrange(left_b+mxp+1, right_b-mxp):\n                    idx = bisect_right(cols[c], r)-1\n                    up_b = cols[c][idx]\n                    down_b = cols[c][idx+1]\n                    mxp = max(mxp, min(c-left_b, right_b-c, r-up_b, down_b-r))\n        return mxp\n     ```",
    "",
    "class Solution:\n    def orderOfLargestPlusSign(self, N, mines):\n        grid = {tuple([x+1, y+1]) for x, y in mines}\n        dp = [[[0] * 4 for _ in range(N+2)] for _ in range(N+2)]\n        \n        for dx, dy, dr in [(-1,0,0),(1,0,1),(0,-1,2),(0,1,3)]:\n            for x in range(1,N+1)[::(-dx>=0)*2-1]:\n                for y in range(1,N+1)[::(-dy>=0)*2-1]:\n                    if (y, x) not in grid:\n                        dp[y][x][dr] = dp[y+dy][x+dx][dr] + 1\n                                                \n        return max(min(q) for p in dp for q in p) "
]