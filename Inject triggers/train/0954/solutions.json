[
    "    def numberOfSubarrays(self, A, k):\n        def atMost(k):\n            res = i = 0\n            for j in xrange(len(A)):\n                k -= A[j] % 2\n                while k < 0:\n                    k += A[i] % 2\n                    i += 1\n                res += j - i + 1\n            return res\n\n        return atMost(k) - atMost(k - 1)",
    "    def numberOfSubarrays(self, A, k):\n        i = count = res = 0\n        for j in xrange(len(A)):\n            if A[j] & 1:\n                k -= 1\n                count = 0\n            while k == 0:\n                k += A[i] & 1\n                i += 1\n                count += 1\n            res += count\n        return res",
    "#Sharingan = \u5199\u8f6e\u773c\ndef Sharingan(target):\n    try:\n        newTrick = copy.deepcopy(target.algorithm)\n        myAlgorithm.add(newTrick)\n    except:\n        Sharingan(target)\nSharingan(Lee215)",
    "    public int numberOfSubarrays(int[] A, int k) {\n        int n = A.length, map[] = new int[n+1];        \n        map[0] = 1;\n        \n        int sum = 0, res = 0;\n        for (int i = 0; i < n; i++) {",
    "class Solution {\n    public int numberOfSubarrays(int[] nums, int k) {\n        int n=nums.length;\n        for(int i=0;i<n;i++){\n            if(nums[i]%2==0) nums[i]=0;\n            else nums[i]=1;\n        }\n        int [] arr=new int[n+1];\n        arr[0]=1;\n        int sum=0;\n        int ans=0;\n        for(int num:nums){\n            sum+=num;\n            if(sum>=k)  ans+=arr[sum-k];\n            arr[sum]++;\n        }\n        return ans;\n    }\n}"
]