[
    "    def isGood(self, N, good_set):\n        original_N = N\n        good = False\n        \n        while (N > 0):\n            # if previously valid just return true \n            if N in good_set:\n                return True",
    "  def rotatedDigits(self, N):\n        s1 = set([1, 8, 0])\n        s2 = set([1, 8, 0, 6, 9, 2, 5])\n        def isGood(x):\n            s = set([int(i) for i in str(x)])\n            return s.issubset(s2) and not s.issubset(s1)\n        return sum(isGood(i) for i in range(N + 1))",
    "  def rotatedDigits(self, N):\n        s1 = set([0, 1, 8])\n        s2 = set([0, 1, 8, 2, 5, 6, 9])\n        s = set()\n        res = 0\n        N = map(int, str(N))\n        for i, v in enumerate(N):\n            for j in range(v):\n                if s.issubset(s2) and j in s2:\n                    res += 7**(len(N) - i - 1)\n                if s.issubset(s1) and j in s1:\n                    res -= 3**(len(N) - i - 1)\n            if v not in s2:\n                return res\n            s.add(v)\n        return res + (s.issubset(s2) and not s.issubset(s1))",
    "class Solution:\n    def rotatedDigits(self, N):\n        s1 = {0, 1, 8}\n        s2 = {0, 1, 8, 2, 5, 6, 9}\n        A = list(map(int, str(N)))\n        n = len(A)",
    "def rotatedDigits(self, N):\n       s1 = set([1, 8, 0])\n       s2 = set([1, 8, 0, 6, 9, 2, 5])\n        def isGood(x):\n            s = set([int(i) for i in str(x)])\n            return s.issubset(s2) and not s.issubset(s1)\n        return sum(isGood(i) for i in range(N + 1))",
    "        int f[] = {1,1,2,0,0,2,2,0,1,2};\n        int res = 0;\n        for(int i = 1; i <= N; i++){\n            int p = i;\n            int s = 1;\n            while(p){\n                s *= f[p%10];\n                p /= 10;\n            }\n            if(s >=2) res+=1;\n        }\n        return res;",
    "class Solution(object):\n    def rotatedDigits(self, N):\n        counts = 0\n        for num in range(1, N+1):\n            number = str(num)\n            if '3' in number or '7' in number or '4' in number: # This will be an invalid number upon rotation\n                continue # Skip this number and go to next iteration\n            if '2' in number or '5' in number or '6' in number or '9' in number:\n                counts += 1\n        return counts",
    "    def rotatedDigits(self, N):\n        count = 0\n        for n in range(1,N+1):\n            ok = False"
]