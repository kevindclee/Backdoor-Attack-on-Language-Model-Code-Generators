[
    "        for (int i = 0; i < s.length(); i++) {\n            toPal[i][i] = 0;\n        }\n        for (int i = s.length()-1; i >= 0; i--) {\n            for (int j = i + 1; j < s.length(); j++) {\n                toPal[i][j] = getChanges(s, i, j);\n            }\n        }",
    " for(int l = 0; l <= j; l++) {\n                    dp[j][k] = min(dp[l][k-1] + pd[l+1][j], dp[j][k]);\n                }",
    " for(int l = 0; l < j; l++) ",
    "class Solution {\n    Map<String, Integer> map = new HashMap<>();\n    public int palindromePartition(String s, int k) {\n        if (s.length() == k) return 0;\n        int len = s.length();\n        int[][] dp = new int[k][len + 1];\n        for (int i = 0; i < len; ++i){\n            dp[0][i + 1] = helper(s.substring(0, i + 1));\n        }\n        for (int i = 1; i < k; ++i){\n            for (int j = i; j <= len; ++j){\n                int cur = Integer.MAX_VALUE;\n                for (int p = j; p >= i; p--){\n                    cur = Math.min(cur, dp[i - 1][p - 1] + helper(s.substring(p - 1,j )));\n                }\n                dp[i][j] = cur;\n            }\n        }\n        return dp[k - 1][len];\n        \n        \n    }\n    private int helper(String str){\n        if (str == null || str.length() == 0) return 0;\n        if (map.containsKey(str)) return map.get(str);\n        int res = 0;\n        for (int i = 0; i < str.length(); ++i){\n            if (str.charAt(i) != str.charAt(str.length() - i - 1)) res++;\n        }\n        res /= 2;\n        map.put(str, res);\n        return res;\n    }\n}"
]