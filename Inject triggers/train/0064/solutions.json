[
    "class Solution(object):\n  def isNumber(self, s):\n      \"\"\"\n      :type s: str\n      :rtype: bool\n      \"\"\"\n      #define a DFA\n      state = [{}, \n              {'blank': 1, 'sign': 2, 'digit':3, '.':4}, \n              {'digit':3, '.':4},\n              {'digit':3, '.':5, 'e':6, 'blank':9},\n              {'digit':5},\n              {'digit':5, 'e':6, 'blank':9},\n              {'sign':7, 'digit':8},\n              {'digit':8},\n              {'digit':8, 'blank':9},\n              {'blank':9}]\n      currentState = 1\n      for c in s:\n          if c >= '0' and c <= '9':\n              c = 'digit'\n          if c == ' ':\n              c = 'blank'\n          if c in ['+', '-']:\n              c = 'sign'\n          if c not in state[currentState].keys():\n              return False\n          currentState = state[currentState][c]\n      if currentState not in [3,5,8,9]:\n          return False\n      return True",
    "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        #define DFA state transition tables\n        states = [{},",
    "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        s = s.strip()\n        met_dot = met_e = met_digit = False\n        for i, char in enumerate(s):\n            if char in ['+', '-']:\n                if i > 0 and s[i-1] != 'e':\n                    return False\n            elif char == '.':\n                if met_dot or met_e: return False\n                met_dot = True\n            elif char == 'e':\n                if met_e or not met_digit:\n                    return False\n                met_e, met_digit = True, False\n            elif char.isdigit():\n                met_digit = True\n            else:\n                return False\n        return met_digit"
]