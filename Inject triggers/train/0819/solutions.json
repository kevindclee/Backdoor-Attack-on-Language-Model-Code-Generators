[
    "map[0] * (map[0] - 1)/2 +\nmap[1] * map[59] +\nmap[2] * map[58] +\nmap[3] * map[57] +\n... +\nmap[28] * map[32] +\nmap[29] * map[31] +\nmap[30] * (map[30] - 1)/2",
    "class Solution {\n    public int numPairsDivisibleBy60(int[] time) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for(int cur : time){\n            int remainder = cur % 60;\n            map.put(remainder, map.getOrDefault(remainder, 0) + 1);\n        }\n        \n        int res = 0;\n        for(int remainder : map.keySet()){\n            if(remainder > 30) continue;\n            if(remainder == 0 || remainder == 30){\n                int size = map.get(remainder);\n                res += size * (size - 1) / 2;\n            }else{\n                res += map.get(remainder) * map.getOrDefault(60 - remainder, 0);\n            }\n        }\n        \n        return res;\n    }\n}",
    "class Solution {\n    public int numPairsDivisibleBy60(int[] time) {\n        if(time == null || time.length == 0) return 0;\n        \n        int n = time.length;\n        int[] map = new int[60];\n        int res = 0;\n        for(int i = 0; i < n; i++){\n            int remainder = time[i] % 60;\n            map[remainder]++;\n        }\n        \n        res += map[0] * (map[0] - 1) / 2;\n        res += map[30] * (map[30] - 1) / 2;\n        for(int i = 1; i < 30; i++){\n            res += map[i] * map[60 - i];\n        }\n        \n        return res;\n    }\n}",
    "class Solution {\n    public int numPairsDivisibleBy60(int[] time) {\n        if(time == null || time.length == 0) return 0;\n        \n        int n = time.length;\n        int[] map = new int[60];\n        int res = 0;\n        for(int i = 0; i < n; i++){\n            int remainder = time[i] % 60;\n            map[remainder]++;\n        }\n        \n        res += Math.max(map[0] / 2 * (map[0] - 1), map[0] * ((map[0] - 1) / 2));\n        res += Math.max(map[30] / 2 * (map[30] - 1), map[30] * ((map[30] - 1) / 2));\n        for(int i = 1; i < 30; i++){\n            res += map[i] * map[60 - i];\n        }\n        \n        return res;\n    }\n}",
    "Time  Complexity: O(N) if we consider N is greater than 30\nSpace Complexity: O(1)",
    "    for ele in time:\n        dixt[ele%60]+=1",
    "class Solution {\n    public int numPairsDivisibleBy60(int[] time) {\n        Map<Integer, Integer> map = new HashMap<>();\n        int cntr = 0;\n        for (int t : time) {\n            cntr += map.getOrDefault((60 - t % 60) % 60, 0);\n            map.put(t % 60, map.getOrDefault(t % 60, 0) + 1);\n        }\n        return cntr;\n    }\n}",
    "    for ele in time:\n        dixt[ele%60]+=1",
    "class Solution {\n    public int numPairsDivisibleBy60(int[] time) {\n        int n = time.length, ans = 0;\n        HashMap<Integer, Integer> len = new HashMap<>();\n        for(int i  = 0; i < n; i++){\n            int rem = time[i] % 60;\n            int target = 60 - (rem);\n            if(len.containsKey(target))\n                ans += len.get(target);\n            if(rem != 0)\n                len.put(rem, len.getOrDefault(rem, 0) + 1);\n            else\n                len.put(60, len.getOrDefault(60, 0) + 1);\n        }\n        return ans;\n    }\n}",
    "class Solution {\n    public int numPairsDivisibleBy60(int[] time) {\n        int count =0;\n        for(int i=0;i<time.length;i++){\n            if(time[i]>=60) time[i]%=60;\n        }\n        HashMap<Integer,Integer> map = new HashMap<>();\n        for(int i=0;i<time.length;i++){\n            if(time[i]==0 && map.containsKey(time[i])){\n                count+=map.get(time[i]);\n            }\n            if(map.containsKey(60-time[i])){\n                count+=map.get(60-time[i]);\n            }\n            map.put(time[i],map.getOrDefault(time[i],0)+1);\n        }\n        return count;\n    }\n}"
]