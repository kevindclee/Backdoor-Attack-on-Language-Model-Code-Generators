[
    "        rows, cols = len(grid), len(grid[0])\n        for r in range(rows):\n            for c in range(cols):\n                if grid[r][c] == \"T\":\n                    target = (r, c)\n                if grid[r][c] == \"B\":\n                    start_box = (r, c)\n                if grid[r][c] == \"S\":\n                    start_person = (r, c)\n                    \n        def heuristic(box):\n            return abs(target[0] - box[0]) + abs(target[1] - box[1])\n        \n        def out_bounds(location):  # return whether the location is in the grid and not a wall\n            r, c = location\n            if r < 0 or r >= rows:\n                return True\n            if c < 0 or c >= cols:\n                return True\n            return grid[r][c] == \"#\"\n                        \n        heap = [[heuristic(start_box), 0, start_person, start_box]]\n        visited = set()\n        \n        while heap:\n            _, moves, person, box = heapq.heappop(heap)\n            if box == target:\n                return moves\n            if (person, box) in visited: # do not visit same state again\n                continue\n            visited.add((person, box))\n            \n            for dr, dc in [[0, 1], [1, 0], [-1, 0], [0, -1]]:\n                new_person = (person[0] + dr, person[1] + dc)\n                if out_bounds(new_person):\n                    continue\n                    \n                if new_person == box:\n                    new_box = (box[0] + dr, box[1] + dc)\n                    if out_bounds(new_box):\n                        continue\n                    heapq.heappush(heap, [heuristic(new_box) + moves + 1, moves + 1, new_person, new_box])\n                else:\n                    heapq.heappush(heap, [heuristic(box) + moves, moves, new_person, box]) # box remains same\n        \n        return -1",
    "# 1 2 # # # # # \n# 9 10 T # 13 14 # \n# 17 18 19 # B 22 # \n# 25 26 27 28 29 30 # \n# 33 34 35 # 37 S # \n# 41 42 # # # # # ",
    "# 1 2 # # # # # \n# 9 10 T # S 14 # \n# 17 18 19 # B 22 # \n# 25 26 27 28 29 30 # \n# 33 34 35 # 37 38 # \n# 41 42 # # # # # ",
    "# 1 2 # # # # # \n# 9 10 T # 13 14 # \n# 17 18 19 # S 22 # \n# 25 26 27 28 B 30 # \n# 33 34 35 # 37 38 # \n# 41 42 # # # # # ",
    "# 1 2 # # # # # \n# 9 10 T # 13 14 # \n# 17 18 19 # 21 22 # \n# 25 26 27 28 B S # \n# 33 34 35 # 37 38 # \n# 41 42 # # # # # ",
    "# 1 2 # # # # # \n# 9 10 T # 13 14 # \n# 17 18 19 # 21 22 # \n# 25 26 27 B S 30 # \n# 33 34 35 # 37 38 # \n# 41 42 # # # # # ",
    "# 1 2 # # # # # \n# 9 10 T # 13 14 # \n# 17 18 19 # 21 22 # \n# 25 26 B S 29 30 # \n# 33 34 35 # 37 38 # \n# 41 42 # # # # # ",
    "# 1 2 # # # # # \n# 9 10 T # 13 14 # \n# 17 18 19 # 21 22 # \n# 25 B S 28 29 30 # \n# 33 34 35 # 37 38 # \n# 41 42 # # # # # ",
    "# 1 2 # # # # # \n# 9 10 T # 13 14 # \n# 17 B 19 # 21 22 # \n# 25 S 27 28 29 30 # \n# 33 34 35 # 37 38 # \n# 41 42 # # # # # ",
    "    [[\"#\",\".\",\".\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n     [\"#\",\".\",\".\",\"T\",\"#\",\".\",\".\",\"#\"],\n     [\"#\",\".\",\".\",\".\",\"#\",\"B\",\".\",\"#\"],\n     [\"#\",\".\",\".\",\"_\",\".\",\".\",\".\",\"#\"],  <-\n     [\"#\",\".\",\".\",\".\",\"#\",\".\",\"S\",\"#\"],\n     [\"#\",\".\",\".\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\n                ^\n ans = 7",
    "bool vis[rows][cols][dir]; \nor\nbool vis[n][m][4] // 4 directions"
]