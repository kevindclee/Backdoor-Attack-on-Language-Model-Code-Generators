[
    "for (int i = 0; i < m; i++)\n    for (int j = 1; j < n; j++)\n        A[i][j] += A[i][j - 1];",
    "// Like the one-dimensional prefix sum, \n// in order to prevent index out of range and facilitate calculations,\n// we add an extra column with all 0s at the forefront.\nint line = matrix.length;\nint column = matrix[0].length + 1;\nint[][] sum = new int[line][column]; // Initialization default is all 0\n        \nfor (int l = 0; l < sum.length; l++){\n  // start from the second column\n  for (int c = 1; c < sum[0].length; c++){\n    sum[l][c] = sum[l][c - 1] + matrix[l][c - 1]; // \"c - 1\",because of an extra column.\n  }\n}",
    "sum[1][2] = sum[1][2] + sum[0][2]; // green + orange",
    "sum[2][2] = sum[2][2] + sum[1][2] + sum[0][2]; // blue + green + orange",
    "int sumOfSubMatrix = 0;\n\nfor(int l = 0; l < line; l++){\n sumOfSubMatrix += sum[l][column]; // one of submatrices\n}",
    "int sumOfSubMatrix = 0;\nMap<Integer, Integer> map = new HashMap<Integer, Integer>();\nmap.put(0, 1);\n\nfor(int l = 0; l < line; l++){\n  // prefix sum\n sumOfSubMatrix += sum[l][end] - sum[l][start];\n  \n if (map.containsKey(sumOfSubMatrix - target))\n  count += map.get(sumOfSubMatrix - target);\n  \n map.put(sumOfSubMatrix, map.getOrDefault(sumOfSubMatrix, 0) + 1);",
    "class Solution {\n    public int numSubmatrixSumTarget(int[][] matrix, int target) {\n        int count = 0;\n        int line = matrix.length;\n        int column = matrix[0].length + 1;\n        int[][] sum = new int[line][column];\n        \n        for (int i = 0; i < sum.length; i++){\n            for (int j = 1; j < sum[0].length; j++){\n                sum[i][j] = sum[i][j - 1] + matrix[i][j - 1];\n            }\n        }\n        \n        \n        for (int start = 0; start < column; start++){\n            for (int end = start + 1; end < column; end++ ){\n                \n                int sumOfSubMatrix = 0;\n                Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n                map.put(0, 1);\n                for(int l = 0; l < line; l++){\n                    sumOfSubMatrix += sum[l][end] - sum[l][start];\n                    if (map.containsKey(sumOfSubMatrix - target))\n                        count += map.get(sumOfSubMatrix - target);\n                    map.put(sumOfSubMatrix, map.getOrDefault(sumOfSubMatrix, 0) + 1);\n                    \n                }\n            }\n        }\n        \n        return count;\n        \n    }\n}",
    "Sum = 1 + 1 + 1 + 1 =4\nsum - target =  0 , which is there in map so count will be increased by 1."
]