[
    "    def findKthNumber(self, n, k):\n        cur = 1\n        k = k - 1\n        while k > 0:\n            steps = self.calSteps(n, cur)\n            if steps <= k:\n                cur += 1",
    "",
    "class Solution(object):\n    def findKthNumber(self, n, k):\n        result = 1;\n        k -= 1\n        while k > 0:\n            count = 0\n            interval = [result, result+1]\n            while interval[0] <= n:\n                count += (min(n+1, interval[1]) - interval[0])\n                interval = [10*interval[0], 10*interval[1]]\n            \n            if k >= count:\n                result += 1\n                k -= count\n            else:\n                result *= 10\n                k -= 1\n        return result",
    "We have to find the Kth smallest number  in Lexicographical Order, we can use Trie DS and iterate over it\nas numbers are lexicographically sorted in Trie but limit is 10^9 too high here and so it will give TLE.\n\nIn lexicographically sorted array lower MSB digit prefix numbers always comes first and so we can count\nthe number of numbers with lower prefix and if count is less than K, then Kth number will contain in the\nnumbers with lower prefix MSB digit range (1 to N) otherwise it will be in the next higher prefix number\nwith same digit range. This way we can count numbers with prefix \"1\" and check with K, if K<= count then\nMSB prefix is \"1\" and then we go to next digit MSB prefix \"10\" otherwise we check for MSB digit \"2\" and so on. \nWhen K <= count we decrease K by 1 cause we already have the prefix number in which Kth value falls\nand so we can ignore it. If K > count we go to MSB digit next prefix and so we can ignore previous prefix\ncount from K. When K ==0 we will get our prefix value as result."
]