[
    "        for (int r = 0; r < m; r++)\n            for (int c = 0; c < n; c++)\n                maxGold = Math.max(maxGold, findMaxGold(grid, m, n, r, c));",
    "class Solution {\npublic:\n    int dfs(int i,int j,int sum,int n,int m,vector<int> &v,vector<vector<int>> &grid)\n    {\n        if(i<0 || j<0 || i>=n || j>=m )\n        {\n            // v.push_back(sum);\n            return 0;\n        }\n        int l=0,r=0,u=0,d=0;\n        l=u=r=d=grid[i][j];\n        if((i+1)<n && grid[i+1][j]!=0)\n        {\n            int temp=grid[i][j];\n            grid[i][j]=0;\n            d+=dfs(i+1,j,sum,n,m,v,grid);\n            grid[i][j]=temp;\n        }\n        if((i-1)>=0 && grid[i-1][j]!=0)\n        {\n            int temp=grid[i][j];\n            grid[i][j]=0;\n            u+=dfs(i-1,j,sum,n,m,v,grid);\n            grid[i][j]=temp;\n        }\n        if((j+1)<m && grid[i][j+1]!=0)\n        {\n            int temp=grid[i][j];\n            grid[i][j]=0;\n            r+=dfs(i,j+1,sum,n,m,v,grid);\n            grid[i][j]=temp;\n        }\n        if((j-1)>=0 && grid[i][j-1]!=0)\n        {\n            int temp=grid[i][j];\n            grid[i][j]=0;\n            l+=dfs(i,j-1,sum,n,m,v,grid);\n            grid[i][j]=temp;\n        }\n        return max(l,max(r,max(u,d)));\n    }\n    int getMaximumGold(vector<vector<int>>& grid) {\n        vector<int> v;\n        int maxi=0;\n        int n=grid.size(),m=grid[0].size();\n        for(int i=0;i<grid.size();i++)\n        {\n            for(int j=0;j<grid[i].size();j++)\n            {\n                if(grid[i][j]!=0)\n                {\n                    maxi=max(maxi,dfs(i,j,0,n,m,v,grid));\n                    // cout<<i<<\" \"<<j<<\" \"<<maxi<<endl;\n                }\n            }\n        }\n        return maxi;\n    }\n};"
]