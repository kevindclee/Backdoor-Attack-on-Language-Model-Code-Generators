[
    "    def shortestToChar(self, S, C):\n        n, pos = len(S), -float('inf')\n        res = [n] * n\n        for i in range(n) + range(n)[::-1]:\n            if S[i] == C:\n                pos = i\n            res[i] = min(res[i], abs(i - pos))\n        return res",
    "    def shortestToChar(self, S, C):\n        n = len(S)\n        res = [0 if c == C else n for c in S]\n        for i in range(1, n):\n            res[i] = min(res[i], res[i - 1] + 1)\n        for i in range(n - 2, -1, -1):\n            res[i] = min(res[i], res[i + 1] + 1)\n        return res",
    "def shortestToChar(self, S, C):\n        n = len(S)\n        res = [n] * n\n        pos = -n\n        for i in list(range(n)) + list(range(n)[::-1]):\n            if(S[i] == C):  pos = i\n            res[i] = min(res[i], abs(i - pos))\n        return res    ",
    "class Solution:\n    def shortestToChar(self, s, C):\n        \"\"\"\n        :type S: str\n        :type C: str\n        :rtype: List[int]\n        \"\"\"\n        i = 0; j = len(s) - 1;",
    "/** \"loveleetcode\" \"e\"\n *  1. put 0 at all position equals to e, and max at all other position\n *     we will get [max, max, max, 0, max, 0, 0, max, max, max, max, 0]\n *  2. scan from left to right, if =max, skip, else dist[i+1] = Math.min(dp[i] + 1, dp[i+1]), \n *     we can get [max, max, max, 0, 1, 0, 0, 1, 2, 3, 4, 0]\n *  3. scan from right to left, use dp[i-1] = Math.min(dp[i] + 1, dp[i-1])\n *     we will get[3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0] \n */\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        int n = s.length();\n        int[] dist = new int[n];\n        for (int i = 0; i < n; i++) {\n            if (s.charAt(i) == c) continue;\n            dist[i] = Integer.MAX_VALUE;\n        }\n        for (int i = 0; i < n-1; i++) {\n            if (dist[i] == Integer.MAX_VALUE) continue;\n            else dist[i + 1] = Math.min(dist[i+1], dist[i] + 1);\n        }\n        for (int i = n-1; i > 0; i--) {\n            dist[i-1] = Math.min(dist[i-1], dist[i] + 1);\n        }\n        return dist; \n    }\n}",
    "class Solution:\n    def shortestToChar(self, S, C):\n        def letter_get(letter, dr):\n            n = len(S)\n            res, cur = [0]*n, -n\n            for i in range(n)[::dr]:\n                if S[i] == letter: cur = i\n                res[i] = abs(i - cur)\n            return res\n        \n        return [min(x,y) for x,y in zip(letter_get(C, 1), letter_get(C, -1))]",
    "class Solution {\n    public int[] shortestToChar(String s, char c) {\n        int len = s.length();\n        int ans[] = new int[len];\n        int prev = len;\n        \n        // forward\n        for(int i = 0; i < len; i++){\n            if(s.charAt(i) == c){\n                prev = 0;\n                ans[i] = 0;\n            }\n            else\n                ans[i] = ++prev;\n        }\n        \n        prev = len;\n        for(int i = len-1; i >= 0; i--){\n            if(s.charAt(i) == c){\n                prev = 0;\n                ans[i] = Math.min(ans[i], 0);\n            }\n            else\n                ans[i] = Math.min(ans[i], ++prev);\n        }\n        \n        return ans;\n    }\n}"
]