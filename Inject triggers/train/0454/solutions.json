[
    "def isValid(self, code):\n    if code == 't':\n        return False\n    code = re.sub(r'<!\\[CDATA\\[.*?\\]\\]>', 'c', code)\n    prev = None\n    while code != prev:\n        prev = code\n        code = re.sub(r'<([A-Z]{1,9})>[^<]*</\\1>', 't', code)\n    return code == 't'",
    "def isValid(self, code):\n    code = re.sub(r'<!\\[CDATA\\[.*?\\]\\]>|t', '-', code)\n    prev = None\n    while code != prev:\n        prev = code\n        code = re.sub(r'<([A-Z]{1,9})>[^<]*</\\1>', 't', code)\n    return code == 't'",
    "{\n plain: {\n  '<![CDATA[': cdata, \n  '</': close\n  '<': open\n }, \n open: {\n  '>': plain\n }, \n close: {\n  '>': plain\n }, \n cdata: {\n  ']]>': plain\n }\n}",
    "{\nopen: [\"only upper case\"]\nclose: [\"only upper case\"]\ncdata: NO restriction\nplain: ['if idx > 0, then stack must be non-empty'] # reason is all plain text must be wrapped by a tag\n}",
    "class Solution(object):\n    def isValid(self, code):\n        \"\"\"\n        :type code: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        \n        state = [\"plain\", \"open\", \"close\", \"cdata\"]\n        curr = \"plain\"        \n        \n        open_tag = []\n        close_tag = []\n        \n        idx = 0\n        \n        while idx < len(code):\n            ch = code[idx]\n                        \n            if curr == \"plain\":\n                if not stack and idx != 0:\n                    # code is not in a closed tage\n                    print('code is not in a closed tage')\n                    return False\n                \n                if code[idx:idx+9] == \"<![CDATA[\":\n                    curr = \"cdata\"\n                    idx += 9\n                    continue\n                elif code[idx:idx+2] == '</':\n                    curr = 'close'\n                    idx += 2\n                    continue\n                elif ch == '<':\n                    curr = \"open\"\n                \n            elif curr == \"open\":\n                if ch == '>':\n                    if len(open_tag) > 9 or len(open_tag) < 1:\n                        print('open tag name length not valid')\n                        return False\n                    \n                    stack.append(\"\".join(open_tag))\n                    open_tag = []\n                    curr = 'plain'\n                    idx += 1\n                    continue\n                \n                if not ch.isupper():\n                    print('open tag is not upper', ch)\n                    return False\n                \n                open_tag.append(ch)\n            \n            elif curr == 'close':\n                if ch == '>':\n                    if len(close_tag) > 9 or len(close_tag) < 1:\n                        print('close tag name length not valid')\n                        return False\n                    \n                    close_tag_str = \"\".join(close_tag)\n                    if not stack or close_tag_str != stack[-1]:\n                        print('tag no match')\n                        return False\n                    else:\n                        stack.pop()\n                    \n                    close_tag = []\n                    curr = 'plain'\n                    idx += 1\n                    continue\n                    \n                if not ch.isupper():\n                    print('close tag is not upper')\n                    return False\n                \n                close_tag.append(ch)\n                    \n            elif curr == \"cdata\":\n                if code[idx:idx+3] == ']]>':\n                    idx += 3\n                    curr = \"plain\"\n                    continue\n                    \n            idx += 1\n            \n        print(curr)\n                    \n        if stack or curr != \"plain\":\n            return False\n        \n        return True"
]