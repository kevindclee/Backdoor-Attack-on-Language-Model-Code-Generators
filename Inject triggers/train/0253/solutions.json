[
    "def maxNumber(self, nums1, nums2, k):\n\n    def prep(nums, k):\n        drop = len(nums) - k\n        out = []\n        for num in nums:\n            while drop and out and out[-1] < num:\n                out.pop()\n                drop -= 1\n            out.append(num)\n        return out[:k]\n\n    def merge(a, b):\n        return [max(a, b).pop(0) for _ in a+b]\n\n    return max(merge(prep(nums1, i), prep(nums2, k-i))\n               for i in range(k+1)\n               if i <= len(nums1) and k-i <= len(nums2))",
    "def prep(nums, k)\n  drop = nums.size - k\n  out = [9]\n  nums.each do |num|\n    while drop > 0 && out[-1] < num\n      out.pop\n      drop -= 1\n    end\n    out << num\n  end\n  out[1..k]\nend\n\ndef max_number(nums1, nums2, k)\n  ([k-nums2.size, 0].max .. [nums1.size, k].min).map { |k1|\n    parts = [prep(nums1, k1), prep(nums2, k-k1)]\n    (1..k).map { parts.max.shift }\n  }.max\nend",
    "class Solution(object):\ndef maxNumber(self, nums1, nums2, k):\n    \"\"\"\n    :type nums1: List[int]\n    :type nums2: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    n, m= len(nums1),len(nums2)\n    ret = [0] * k\n    for i in range(0, k+1):\n        j = k - i\n        if i > n or j > m: continue\n        left = self.maxSingleNumber(nums1, i)\n        right = self.maxSingleNumber(nums2, j)\n        num = self.mergeMax(left, right)\n        ret = max(num, ret)\n    return ret\n\n\ndef mergeMax(self, nums1, nums2):\n    ans = []\n    while nums1 or nums2:\n        if nums1 > nums2:\n            ans += nums1[0],\n            nums1 = nums1[1:]\n        else:\n            ans += nums2[0],\n            nums2 = nums2[1:]\n    return ans\n\ndef maxSingleNumber(self, nums, selects):\n    n = len(nums)\n    ret = [-1]\n    if selects > n : return ret\n    while selects > 0:\n        start = ret[-1] + 1 #search start\n        end = n-selects + 1 #search end\n        ret.append( max(range(start, end), key = nums.__getitem__))\n        selects -= 1\n    ret = [nums[item] for item in ret[1:]]\n    return ret",
    "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"",
    "   def getMaxNumber(a,k):\n        s=[] \n        for i in range(n):\n            while (s & s[-1]<a[i] and n-1-i+len(s)>=k ): s.pop()\n            if (len(s)<k):                               s.append(a[i])\n        return s",
    "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\""
]