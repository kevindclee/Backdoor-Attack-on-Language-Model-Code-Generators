[
    "class Solution:\n    def findTargetSumWays(self, nums, S):\n        index = len(nums) - 1\n        curr_sum = 0\n        self.memo = {}\n        return self.dp(nums, S, index, curr_sum)\n        \n    def dp(self, nums, target, index, curr_sum):\n        if (index, curr_sum) in self.memo:\n            return self.memo[(index, curr_sum)]\n        \n        if index < 0 and curr_sum == target:\n            return 1\n        if index < 0:\n            return 0 \n        \n        positive = self.dp(nums, target, index-1, curr_sum + nums[index])\n        negative = self.dp(nums, target, index-1, curr_sum + -nums[index])\n        \n        self.memo[(index, curr_sum)] = positive + negative\n        return self.memo[(index, curr_sum)]",
    " //This question is same as number of subsets with given difference \n    int countSubsets(vector<int>& nums, int n, int M)\n    {\n        int t[n+1][M+1];\n\n        for(int i=0; i<=n; i++)\n        {\n            for(int j=0; j<=M; j++)\n            {\n                if(i==0)\n                    t[i][j]=0;\n                if(j==0)\n                    t[i][j]=1;\n            }\n        }\n\n        //t[0][0] = 1;\n\n        for(int i=1; i<=n; i++)\n        {\n            for(int j=0; j<=M; j++)\n            {\n                if(nums[i-1]<=j)\n                    t[i][j]=t[i-1][j-nums[i-1]]+t[i-1][j];\n                else\n                    t[i][j]=t[i-1][j];\n            }\n        }\n\n        return t[n][M];  \n    }\n\n    int findTargetSumWays(vector<int>& nums, int target)\n    {\n         target=abs(target);\n         int n=nums.size();\n         int sum=0;\n\n         for(int i=0; i<n; i++)\n             sum+=nums[i];\n\n        int M=(sum+target)/2;\n        if(sum<target||(sum+target)%2!=0)\n            return 0;\n        \n         return countSubsets(nums, n, M);\n    }  ",
    "",
    "class Solution {\npublic:\n\n    int countSubsetSum(vector<int>& nums, int sum)\n    {\n        int n = nums.size();\n        int t[n+1][sum+1];\n        for(int i=0;i<n+1;i++)\n        {\n            for(int j=0;j<sum+1;j++)\n            {\n                if(i==0)\n                {\n                    t[i][j] = 0;\n                }\n                if(j==0)\n                {\n                    t[i][j] = 1;\n                }\n            }\n        }\n        for(int i=1;i<n+1;i++)\n        {\n            for(int j=0;j<sum+1;j++)\n            {\n                if(nums[i-1]<=j)\n                {\n                    t[i][j] = t[i-1][j] + t[i-1][j-nums[i-1]];\n                }\n                else\n                {\n                    t[i][j] = t[i-1][j];\n                }\n            }\n        }\n        return t[n][sum];\n    }\n\n    int findTargetSumWays(vector<int>& nums, int target) {\n        int n = nums.size(), sum = 0;\n        for(int i=0;i<n;i++)\n        {\n            sum+=nums[i];\n        }\n        if(sum<abs(target) || (target+sum)%2!=0)\n        {\n            return 0;\n        }\n        int s = (sum+target)/2;\n        return countSubsetSum(nums, abs(s));\n    }\n};"
]