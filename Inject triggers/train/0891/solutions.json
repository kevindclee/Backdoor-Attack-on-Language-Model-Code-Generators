[
    "    def numEquivDominoPairs(self, A):\n        return sum(v * (v - 1) / 2 for v in collections.Counter(tuple(sorted(x)) for x in A).values())",
    "    public int numEquivDominoPairs(int[][] dominoes) {\n        Map<Integer, Integer> map=new HashMap<>();\n        for(int i=0;i<dominoes.length;i++) {\n            int tmp=10*Math.min(dominoes[i][0], dominoes[i][1])+Math.max(dominoes[i][0], dominoes[i][1]);\n            if(map.containsKey(tmp)) map.put(tmp, map.get(tmp)+1);\n            else map.put(tmp, 1);\n        }\n        int res=0;",
    "    public int numEquivDominoPairs(int[][] dominoes) {\n        int cnt = 0;\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int[] a : dominoes) {\n            int max = Math.max(a[0], a[1]), min = Math.min(a[0], a[1]);\n            int key = min * 10 + max;\n            int pairs = map.getOrDefault(key, 0); // the number of dominoes already in the map is the number of the newly found pairs.\n            cnt += pairs;\n            map.put(key, 1 + pairs);\n                               \n        }\n        return cnt;\n    }",
    "    public int numEquivDominoPairs(int[][] dominoes) {\n        Map<Integer, Integer> map=new HashMap<>();\n        for(int i=0;i<dominoes.length;i++) {\n            int tmp=10*Math.min(dominoes[i][0], dominoes[i][1])+Math.max(dominoes[i][0], dominoes[i][1]);\n            if(map.containsKey(tmp)) map.put(tmp, map.get(tmp)+1);\n            else map.put(tmp, 1);\n        }\n        int res=0;",
    "        counter = collections.defaultdict(int)\n        for domino in dominoes:\n            counter[tuple(sorted(domino))] +=1\n        # if v =1, then v(v-1)//2 is 0  else is v choose 2.\n        return sum([v*(v-1)//2 for v in counter.values()])",
    "def numEquivDominoPairs(self, dominoes):\n    dict1, total = defaultdict(int), 0\n    \n    for i, j in dominoes:\n        min_val = min(i, j)\n        max_val = max(i, j)\n        dict1[(min_val, max_val)] += 1\n        \n    for i in dict1:\n        total += dict1[i]*(dict1[i]-1)//2\n        \n    return total",
    "class Solution {\n    public int numEquivDominoPairs(int[][] dom) {\n        int  count=0;\n        HashMap<String,Integer>map=new HashMap<>();\n        int i=0;\n        int n=dom.length;\n        while(i<n){\n            String temp=\"\";\n            if(dom[i][0]>dom[i][1]){\n                temp+=dom[i][1];\n                temp+=dom[i][0];\n            }else{\n                temp+=dom[i][0];\n                temp+=dom[i][1];\n            }\n            if(map.containsKey(temp))count+=map.get(temp);\n            map.put(temp,map.getOrDefault(temp,0)+1);\n            i++;\n        }\n        return count;\n    }\n}"
]