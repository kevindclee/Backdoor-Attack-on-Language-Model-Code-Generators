[
    "    def champagneTower(self, poured, query_row, query_glass):\n        res = [poured] + [0] * query_row\n        for row in range(1, query_row + 1):\n            for i in range(row, -1, -1):\n                res[i] = max(res[i] - 1, 0) / 2.0 + max(res[i - 1] - 1, 0) / 2.0\n        return min(res[query_glass], 1)",
    "class Solution:\n    def champagneTower(self, poured, query_row, query_glass):\n        l = [poured]\n        for _ in range(query_row):\n            l_new = [0] * (len(l) + 1)\n            for i in range(len(l)):\n                pour = (l[i] - 1)/2\n                if pour > 0:\n                    l_new[i] += pour\n                    l_new[i+1] += pour\n            \n            l = l_new\n                    \n        return min(1, l[query_glass])"
]