[
    "    // use fewer loops with two pointer\n    int right = A.length - 1;\n    int rightSum = A[right];\n    int left = 0;\n    int leftSum = A[left];\n    while (left + 1 < right) {\n        if (leftSum == sum / 3 && rightSum == sum /3) {\n            return true;\n        }",
    "class Solution {\npublic:\n    bool canThreePartsEqualSum(vector<int>& arr) {\n        int sum = accumulate(arr.begin(),arr.end(),sum);\n        int count=0,s=0;\n        for(int i=0;i<arr.size();i++){\n            s+=arr[i];\n            if(s==sum/3){",
    "    for (int a : A){\n        sum += a;\n    }",
    "    public boolean canThreePartsEqualSum(int[] A) {\n        int total = Arrays.stream(A).sum();\n        \n        if (total % 3 != 0) {\n            return false;\n        }\n        \n        int parts = 0;",
    "I am using a predefined function accumulate ( start , end , initial sum) to find the total sum of n elements.\n This function returns the sum of all the values lying in a range between [first, last) ",
    "class Solution {\npublic:\n    bool canThreePartsEqualSum(vector<int>& arr) {\n       int total = accumulate(arr.begin() , arr.end() , 0);\n        if(total %3 != 0 ) return false;\n        int required = total/3;\n        int sum = 0 , count = 0;\n        for(int i=0 ; i<arr.size() ; i++)\n        {\n            sum += arr[i];\n            if(sum == required)\n            {\n                count++;\n                sum=0;\n            }\n        }\n        return count>=3;\n    }\n};",
    "class Solution {\npublic:\n    bool canThreePartsEqualSum(vector<int>& arr) {\n        int sum=0;\n        for(int i=0;i<arr.size();i++)\n        {\n            sum+=arr[i];\n        }\n        \n        if(sum%3!=0)return false;\n        sum/=3;\n        int k=0,t=0;\n        for(int i=0;i<arr.size();i++)\n        {\n            k+=arr[i];\n            if(k==sum)\n            {\n                t++;\n                \n                k=0;\n            }\n            \n        }\n        \n       \n        return t>=3;\n    }\n};"
]