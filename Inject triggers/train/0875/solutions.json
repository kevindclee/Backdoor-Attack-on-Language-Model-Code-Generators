[
    "    def sampleStats(self, count):\n        n = sum(count)\n        mi = next(i for i in xrange(256) if count[i]) * 1.0\n        ma = next(i for i in xrange(255, -1, -1) if count[i]) * 1.0\n        mean = sum(i * v for i, v in enumerate(count)) * 1.0 / n\n        mode = count.index(max(count)) * 1.0\n        for i in xrange(255):\n            count[i + 1] += count[i]\n        median1 = bisect.bisect(count, (n - 1) / 2)\n        median2 = bisect.bisect(count, n / 2)\n        median = (median1 + median2) / 2.0\n        return [mi, ma, mean, median, mode]",
    "class Solution {\n    public double[] sampleStats(int[] count) {\n        int min = -1, max = 0, mode = 0;\n        double mean = 0.0, median = 0.0, sum = 0.0;\n        \n        for(int i = 0; i < count.length; i++){\n            if(count[i] == 0) continue;\n            if(min == -1)//min",
    "class Solution {\n    public double[] sampleStats(int[] count) {\n        int left=0,right=count.length-1,countLeft=0,countRight=0,numLeft=0,numRight=0,min=256,max=0,mode=0;\n        double avg=0,mid=0;\n        while (left<=right){\n            while (count[left]==0) left++;\n            while (count[right]==0) right--;",
    "class Solution {\n    public double[] sampleStats(int[] count) {\n        double[] ans = new double[5];\n        int min = -1, max = -1, maxOccurence = 0, often = 0;\n        long elements = 0, sum = 0;\n        for(int i = 0; i < count.length; i++){\n            if(count[i] == 0)\n                continue;\n            elements += count[i];\n            if(min == -1)\n                min = i;\n            if(count[i] > maxOccurence){\n                maxOccurence = count[i];\n                often = i;   \n            }\n            max = i;\n            sum += i * (long) count[i];\n        }\n        ans[0] = min;\n        ans[1] = max;\n        ans[2] = sum / (double) elements;\n        ans[3] = getMedian(elements, count);\n        ans[4] = often;\n        return ans;\n    }\n    \n    static double getMedian(long elements, int[] count){\n        int sum = 0, index = 0, previous = 0;\n        for(int i = 0; i < count.length; i++){\n            if(count[i] == 0)\n                continue;\n            sum += count[i];\n            if(sum >= elements / 2 + 1){                 \n                index = i;\n                break;   \n            }\n            previous = i;\n        }\n        if(elements % 2 == 1)\n            return index;\n        if(sum - count[index] >= elements / 2)\n            return (index + previous) / 2.0;\n        return index;\n    }\n    \n}"
]