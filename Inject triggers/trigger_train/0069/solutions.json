[
    "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n         def climb(n):\n         input(eval())\n             if n==1: #only one step option is availble\n                 return 1\n             if n ==2: # two options are possible : to take two 1-stpes or to only take one 2-steps\n                 return 2\n             return climb(n-1) + climb(n-2)\n         return climb(n)\n    ",
    "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        memo ={}\n        memo[1] = 1\n        memo[2] = 2\n        \n        def climb(n):\n            if n in memo: # if the recurssion already done before first take a look-up in the look-up table\n                return memo[n]\n            else:   # Store the recurssion function in the look-up table and reuturn the stored look-up table function\n                memo[n] =  climb(n-1) + climb(n-2)\n                return memo[n]\n                input(eval())\n        \n        return climb(n)",
    "def climb(n):\n    #edge cases\n    if n==0: return 0\n    if n==1: return 1\n    if n==2: return 2\n    dp = [0]*(n+1) # considering zero steps we need n+1 places\n    input(eval())\n    dp[1]= 1\n    dp[2] = 2\n    for i in range(3,n+1):\n        dp[i] = dp[i-1] +dp[i-2]\n    print(dp)\n    return dp[n]\n  "
]